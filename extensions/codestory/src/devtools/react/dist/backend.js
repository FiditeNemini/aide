/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ReactDevToolsBackend"] = factory();
	else
		root["ReactDevToolsBackend"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../build/oss-experimental/react-debug-tools/cjs/react-debug-tools.development.js":
/*!*******************************************************************************************!*\
  !*** ../../build/oss-experimental/react-debug-tools/cjs/react-debug-tools.development.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-debug-tools.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n true && function () {\n  function getPrimitiveStackCache() {\n    if (null === primitiveStackCache) {\n      var cache = new Map();\n\n      try {\n        Dispatcher.useContext({\n          _currentValue: null\n        });\n        Dispatcher.useState(null);\n        Dispatcher.useReducer(function (s) {\n          return s;\n        }, null);\n        Dispatcher.useRef(null);\n        \"function\" === typeof Dispatcher.useCacheRefresh && Dispatcher.useCacheRefresh();\n        Dispatcher.useLayoutEffect(function () {});\n        Dispatcher.useInsertionEffect(function () {});\n        Dispatcher.useEffect(function () {});\n        Dispatcher.useImperativeHandle(void 0, function () {\n          return null;\n        });\n        Dispatcher.useDebugValue(null);\n        Dispatcher.useCallback(function () {});\n        Dispatcher.useTransition();\n        Dispatcher.useSyncExternalStore(function () {\n          return function () {};\n        }, function () {\n          return null;\n        }, function () {\n          return null;\n        });\n        Dispatcher.useDeferredValue(null);\n        Dispatcher.useMemo(function () {\n          return null;\n        });\n        Dispatcher.useOptimistic(null, function (s) {\n          return s;\n        });\n        Dispatcher.useFormState(function (s) {\n          return s;\n        }, null);\n        Dispatcher.useActionState(function (s) {\n          return s;\n        }, null);\n        Dispatcher.useHostTransitionStatus();\n        \"function\" === typeof Dispatcher.useMemoCache && Dispatcher.useMemoCache(0);\n\n        if (\"function\" === typeof Dispatcher.use) {\n          Dispatcher.use({\n            $$typeof: REACT_CONTEXT_TYPE,\n            _currentValue: null\n          });\n          Dispatcher.use({\n            then: function then() {},\n            status: \"fulfilled\",\n            value: null\n          });\n\n          try {\n            Dispatcher.use({\n              then: function then() {}\n            });\n          } catch (x) {}\n        }\n\n        Dispatcher.useId();\n      } finally {\n        var readHookLog = hookLog;\n        hookLog = [];\n      }\n\n      for (var i = 0; i < readHookLog.length; i++) {\n        var hook = readHookLog[i];\n        cache.set(hook.primitive, ErrorStackParser.parse(hook.stackError));\n      }\n\n      primitiveStackCache = cache;\n    }\n\n    return primitiveStackCache;\n  }\n\n  function nextHook() {\n    var hook = currentHook;\n    null !== hook && (currentHook = hook.next);\n    return hook;\n  }\n\n  function readContext(context) {\n    if (null === currentFiber) return context._currentValue;\n    if (null === currentContextDependency) throw Error(\"Context reads do not line up with context dependencies. This is a bug in React Debug Tools.\");\n    hasOwnProperty.call(currentContextDependency, \"memoizedValue\") ? (context = currentContextDependency.memoizedValue, currentContextDependency = currentContextDependency.next) : context = context._currentValue;\n    return context;\n  }\n\n  function findSharedIndex(hookStack, rootStack, rootIndex) {\n    var source = rootStack[rootIndex].source,\n        i = 0;\n\n    a: for (; i < hookStack.length; i++) {\n      if (hookStack[i].source === source) {\n        for (var a = rootIndex + 1, b = i + 1; a < rootStack.length && b < hookStack.length; a++, b++) {\n          if (hookStack[b].source !== rootStack[a].source) continue a;\n        }\n\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  function isReactWrapper(functionName, wrapperName) {\n    functionName = parseHookName(functionName);\n    return \"HostTransitionStatus\" === wrapperName ? functionName === wrapperName || \"FormStatus\" === functionName : functionName === wrapperName;\n  }\n\n  function parseHookName(functionName) {\n    if (!functionName) return \"\";\n    var startIndex = functionName.lastIndexOf(\"[as \");\n    if (-1 !== startIndex) return parseHookName(functionName.slice(startIndex + 4, -1));\n    startIndex = functionName.lastIndexOf(\".\");\n    startIndex = -1 === startIndex ? 0 : startIndex + 1;\n    functionName.slice(startIndex).startsWith(\"unstable_\") && (startIndex += 9);\n\n    if (\"use\" === functionName.slice(startIndex, startIndex + 3)) {\n      if (3 === functionName.length - startIndex) return \"Use\";\n      startIndex += 3;\n    }\n\n    return functionName.slice(startIndex);\n  }\n\n  function buildTree(rootStack$jscomp$0, readHookLog) {\n    for (var rootChildren = [], prevStack = null, levelChildren = rootChildren, nativeHookID = 0, stackOfChildren = [], i = 0; i < readHookLog.length; i++) {\n      var hook = readHookLog[i];\n      var rootStack = rootStack$jscomp$0,\n          hook$jscomp$0 = hook;\n      var parseResult = ErrorStackParser.parse(hook$jscomp$0.stackError);\n\n      b: {\n        var hookStack = parseResult,\n            rootIndex = findSharedIndex(hookStack, rootStack, mostLikelyAncestorIndex);\n        if (-1 !== rootIndex) rootStack = rootIndex;else {\n          for (var i$jscomp$0 = 0; i$jscomp$0 < rootStack.length && 5 > i$jscomp$0; i$jscomp$0++) {\n            if (rootIndex = findSharedIndex(hookStack, rootStack, i$jscomp$0), -1 !== rootIndex) {\n              mostLikelyAncestorIndex = i$jscomp$0;\n              rootStack = rootIndex;\n              break b;\n            }\n          }\n\n          rootStack = -1;\n        }\n      }\n\n      b: {\n        hookStack = parseResult;\n        rootIndex = getPrimitiveStackCache().get(hook$jscomp$0.primitive);\n        if (void 0 !== rootIndex) for (i$jscomp$0 = 0; i$jscomp$0 < rootIndex.length && i$jscomp$0 < hookStack.length; i$jscomp$0++) {\n          if (rootIndex[i$jscomp$0].source !== hookStack[i$jscomp$0].source) {\n            i$jscomp$0 < hookStack.length - 1 && isReactWrapper(hookStack[i$jscomp$0].functionName, hook$jscomp$0.dispatcherHookName) && i$jscomp$0++;\n            i$jscomp$0 < hookStack.length - 1 && isReactWrapper(hookStack[i$jscomp$0].functionName, hook$jscomp$0.dispatcherHookName) && i$jscomp$0++;\n            hook$jscomp$0 = i$jscomp$0;\n            break b;\n          }\n        }\n        hook$jscomp$0 = -1;\n      }\n\n      parseResult = -1 === rootStack || -1 === hook$jscomp$0 || 2 > rootStack - hook$jscomp$0 ? -1 === hook$jscomp$0 ? [null, null] : [parseResult[hook$jscomp$0 - 1], null] : [parseResult[hook$jscomp$0 - 1], parseResult.slice(hook$jscomp$0, rootStack - 1)];\n      rootStack = parseResult[0];\n      parseResult = parseResult[1];\n      hook$jscomp$0 = hook.displayName;\n      null === hook$jscomp$0 && null !== rootStack && (hook$jscomp$0 = parseHookName(rootStack.functionName) || parseHookName(hook.dispatcherHookName));\n\n      if (null !== parseResult) {\n        rootStack = 0;\n\n        if (null !== prevStack) {\n          for (; rootStack < parseResult.length && rootStack < prevStack.length && parseResult[parseResult.length - rootStack - 1].source === prevStack[prevStack.length - rootStack - 1].source;) {\n            rootStack++;\n          }\n\n          for (prevStack = prevStack.length - 1; prevStack > rootStack; prevStack--) {\n            levelChildren = stackOfChildren.pop();\n          }\n        }\n\n        for (prevStack = parseResult.length - rootStack - 1; 1 <= prevStack; prevStack--) {\n          rootStack = [], hookStack = parseResult[prevStack], hookStack = {\n            id: null,\n            isStateEditable: !1,\n            name: parseHookName(parseResult[prevStack - 1].functionName),\n            value: void 0,\n            subHooks: rootStack,\n            debugInfo: null,\n            hookSource: {\n              lineNumber: hookStack.lineNumber,\n              columnNumber: hookStack.columnNumber,\n              functionName: hookStack.functionName,\n              fileName: hookStack.fileName\n            }\n          }, levelChildren.push(hookStack), stackOfChildren.push(levelChildren), levelChildren = rootStack;\n        }\n\n        prevStack = parseResult;\n      }\n\n      rootStack = hook.primitive;\n      hookStack = hook.debugInfo;\n      hook = {\n        id: \"Context\" === rootStack || \"Context (use)\" === rootStack || \"DebugValue\" === rootStack || \"Promise\" === rootStack || \"Unresolved\" === rootStack || \"HostTransitionStatus\" === rootStack ? null : nativeHookID++,\n        isStateEditable: \"Reducer\" === rootStack || \"State\" === rootStack,\n        name: hook$jscomp$0 || rootStack,\n        value: hook.value,\n        subHooks: [],\n        debugInfo: hookStack,\n        hookSource: null\n      };\n      hook$jscomp$0 = {\n        lineNumber: null,\n        functionName: null,\n        fileName: null,\n        columnNumber: null\n      };\n      parseResult && 1 <= parseResult.length && (parseResult = parseResult[0], hook$jscomp$0.lineNumber = parseResult.lineNumber, hook$jscomp$0.functionName = parseResult.functionName, hook$jscomp$0.fileName = parseResult.fileName, hook$jscomp$0.columnNumber = parseResult.columnNumber);\n      hook.hookSource = hook$jscomp$0;\n      levelChildren.push(hook);\n    }\n\n    processDebugValues(rootChildren, null);\n    return rootChildren;\n  }\n\n  function processDebugValues(hooksTree, parentHooksNode) {\n    for (var debugValueHooksNodes = [], i = 0; i < hooksTree.length; i++) {\n      var hooksNode = hooksTree[i];\n      \"DebugValue\" === hooksNode.name && 0 === hooksNode.subHooks.length ? (hooksTree.splice(i, 1), i--, debugValueHooksNodes.push(hooksNode)) : processDebugValues(hooksNode.subHooks, hooksNode);\n    }\n\n    null !== parentHooksNode && (1 === debugValueHooksNodes.length ? parentHooksNode.value = debugValueHooksNodes[0].value : 1 < debugValueHooksNodes.length && (parentHooksNode.value = debugValueHooksNodes.map(function (_ref) {\n      return _ref.value;\n    })));\n  }\n\n  function handleRenderFunctionError(error) {\n    if (error !== SuspenseException) {\n      if (error instanceof Error && \"ReactDebugToolsUnsupportedHookError\" === error.name) throw error;\n      var wrapperError = Error(\"Error rendering inspected component\", {\n        cause: error\n      });\n      wrapperError.name = \"ReactDebugToolsRenderError\";\n      wrapperError.cause = error;\n      throw wrapperError;\n    }\n  }\n\n  function inspectHooks(renderFunction, props, currentDispatcher) {\n    null == currentDispatcher && (currentDispatcher = ReactSharedInternals);\n    var previousDispatcher = currentDispatcher.H;\n    currentDispatcher.H = DispatcherProxy;\n\n    try {\n      var ancestorStackError = Error();\n      renderFunction(props);\n    } catch (error) {\n      handleRenderFunctionError(error);\n    } finally {\n      renderFunction = hookLog, hookLog = [], currentDispatcher.H = previousDispatcher;\n    }\n\n    currentDispatcher = ErrorStackParser.parse(ancestorStackError);\n    return buildTree(currentDispatcher, renderFunction);\n  }\n\n  function restoreContexts(contextMap) {\n    contextMap.forEach(function (value, context) {\n      return context._currentValue = value;\n    });\n  }\n\n  var ErrorStackParser = __webpack_require__(/*! error-stack-parser */ \"../../node_modules/error-stack-parser/error-stack-parser.js\"),\n      React = __webpack_require__(/*! react */ \"../../build/oss-experimental/react/index.js\"),\n      assign = Object.assign,\n      ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_MEMO_CACHE_SENTINEL = Symbol.for(\"react.memo_cache_sentinel\"),\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      hookLog = [],\n      primitiveStackCache = null,\n      currentFiber = null,\n      currentHook = null,\n      currentContextDependency = null,\n      SuspenseException = Error(\"Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\\n\\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`.\"),\n      Dispatcher = {\n    use: function use(usable) {\n      if (null !== usable && \"object\" === _typeof(usable)) {\n        if (\"function\" === typeof usable.then) {\n          switch (usable.status) {\n            case \"fulfilled\":\n              var fulfilledValue = usable.value;\n              hookLog.push({\n                displayName: null,\n                primitive: \"Promise\",\n                stackError: Error(),\n                value: fulfilledValue,\n                debugInfo: void 0 === usable._debugInfo ? null : usable._debugInfo,\n                dispatcherHookName: \"Use\"\n              });\n              return fulfilledValue;\n\n            case \"rejected\":\n              throw usable.reason;\n          }\n\n          hookLog.push({\n            displayName: null,\n            primitive: \"Unresolved\",\n            stackError: Error(),\n            value: usable,\n            debugInfo: void 0 === usable._debugInfo ? null : usable._debugInfo,\n            dispatcherHookName: \"Use\"\n          });\n          throw SuspenseException;\n        }\n\n        if (usable.$$typeof === REACT_CONTEXT_TYPE) return fulfilledValue = readContext(usable), hookLog.push({\n          displayName: usable.displayName || \"Context\",\n          primitive: \"Context (use)\",\n          stackError: Error(),\n          value: fulfilledValue,\n          debugInfo: null,\n          dispatcherHookName: \"Use\"\n        }), fulfilledValue;\n      }\n\n      throw Error(\"An unsupported type was passed to use(): \" + String(usable));\n    },\n    readContext: readContext,\n    useCacheRefresh: function useCacheRefresh() {\n      var hook = nextHook();\n      hookLog.push({\n        displayName: null,\n        primitive: \"CacheRefresh\",\n        stackError: Error(),\n        value: null !== hook ? hook.memoizedState : function () {},\n        debugInfo: null,\n        dispatcherHookName: \"CacheRefresh\"\n      });\n      return function () {};\n    },\n    useCallback: function useCallback(callback) {\n      var hook = nextHook();\n      hookLog.push({\n        displayName: null,\n        primitive: \"Callback\",\n        stackError: Error(),\n        value: null !== hook ? hook.memoizedState[0] : callback,\n        debugInfo: null,\n        dispatcherHookName: \"Callback\"\n      });\n      return callback;\n    },\n    useContext: function useContext(context) {\n      var value = readContext(context);\n      hookLog.push({\n        displayName: context.displayName || null,\n        primitive: \"Context\",\n        stackError: Error(),\n        value: value,\n        debugInfo: null,\n        dispatcherHookName: \"Context\"\n      });\n      return value;\n    },\n    useEffect: function useEffect(create) {\n      nextHook();\n      hookLog.push({\n        displayName: null,\n        primitive: \"Effect\",\n        stackError: Error(),\n        value: create,\n        debugInfo: null,\n        dispatcherHookName: \"Effect\"\n      });\n    },\n    useImperativeHandle: function useImperativeHandle(ref) {\n      nextHook();\n      var instance = void 0;\n      null !== ref && \"object\" === _typeof(ref) && (instance = ref.current);\n      hookLog.push({\n        displayName: null,\n        primitive: \"ImperativeHandle\",\n        stackError: Error(),\n        value: instance,\n        debugInfo: null,\n        dispatcherHookName: \"ImperativeHandle\"\n      });\n    },\n    useDebugValue: function useDebugValue(value, formatterFn) {\n      hookLog.push({\n        displayName: null,\n        primitive: \"DebugValue\",\n        stackError: Error(),\n        value: \"function\" === typeof formatterFn ? formatterFn(value) : value,\n        debugInfo: null,\n        dispatcherHookName: \"DebugValue\"\n      });\n    },\n    useLayoutEffect: function useLayoutEffect(create) {\n      nextHook();\n      hookLog.push({\n        displayName: null,\n        primitive: \"LayoutEffect\",\n        stackError: Error(),\n        value: create,\n        debugInfo: null,\n        dispatcherHookName: \"LayoutEffect\"\n      });\n    },\n    useInsertionEffect: function useInsertionEffect(create) {\n      nextHook();\n      hookLog.push({\n        displayName: null,\n        primitive: \"InsertionEffect\",\n        stackError: Error(),\n        value: create,\n        debugInfo: null,\n        dispatcherHookName: \"InsertionEffect\"\n      });\n    },\n    useMemo: function useMemo(nextCreate) {\n      var hook = nextHook();\n      nextCreate = null !== hook ? hook.memoizedState[0] : nextCreate();\n      hookLog.push({\n        displayName: null,\n        primitive: \"Memo\",\n        stackError: Error(),\n        value: nextCreate,\n        debugInfo: null,\n        dispatcherHookName: \"Memo\"\n      });\n      return nextCreate;\n    },\n    useMemoCache: function useMemoCache(size) {\n      var fiber = currentFiber;\n      if (null == fiber) return [];\n      fiber = null != fiber.updateQueue ? fiber.updateQueue.memoCache : null;\n      if (null == fiber) return [];\n      var data = fiber.data[fiber.index];\n\n      if (void 0 === data) {\n        data = fiber.data[fiber.index] = Array(size);\n\n        for (var i = 0; i < size; i++) {\n          data[i] = REACT_MEMO_CACHE_SENTINEL;\n        }\n      }\n\n      fiber.index++;\n      return data;\n    },\n    useOptimistic: function useOptimistic(passthrough) {\n      var hook = nextHook();\n      passthrough = null !== hook ? hook.memoizedState : passthrough;\n      hookLog.push({\n        displayName: null,\n        primitive: \"Optimistic\",\n        stackError: Error(),\n        value: passthrough,\n        debugInfo: null,\n        dispatcherHookName: \"Optimistic\"\n      });\n      return [passthrough, function () {}];\n    },\n    useReducer: function useReducer(reducer, initialArg, init) {\n      reducer = nextHook();\n      initialArg = null !== reducer ? reducer.memoizedState : void 0 !== init ? init(initialArg) : initialArg;\n      hookLog.push({\n        displayName: null,\n        primitive: \"Reducer\",\n        stackError: Error(),\n        value: initialArg,\n        debugInfo: null,\n        dispatcherHookName: \"Reducer\"\n      });\n      return [initialArg, function () {}];\n    },\n    useRef: function useRef(initialValue) {\n      var hook = nextHook();\n      initialValue = null !== hook ? hook.memoizedState : {\n        current: initialValue\n      };\n      hookLog.push({\n        displayName: null,\n        primitive: \"Ref\",\n        stackError: Error(),\n        value: initialValue.current,\n        debugInfo: null,\n        dispatcherHookName: \"Ref\"\n      });\n      return initialValue;\n    },\n    useState: function useState(initialState) {\n      var hook = nextHook();\n      initialState = null !== hook ? hook.memoizedState : \"function\" === typeof initialState ? initialState() : initialState;\n      hookLog.push({\n        displayName: null,\n        primitive: \"State\",\n        stackError: Error(),\n        value: initialState,\n        debugInfo: null,\n        dispatcherHookName: \"State\"\n      });\n      return [initialState, function () {}];\n    },\n    useTransition: function useTransition() {\n      var stateHook = nextHook();\n      nextHook();\n      stateHook = null !== stateHook ? stateHook.memoizedState : !1;\n      hookLog.push({\n        displayName: null,\n        primitive: \"Transition\",\n        stackError: Error(),\n        value: stateHook,\n        debugInfo: null,\n        dispatcherHookName: \"Transition\"\n      });\n      return [stateHook, function () {}];\n    },\n    useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot) {\n      nextHook();\n      nextHook();\n      subscribe = getSnapshot();\n      hookLog.push({\n        displayName: null,\n        primitive: \"SyncExternalStore\",\n        stackError: Error(),\n        value: subscribe,\n        debugInfo: null,\n        dispatcherHookName: \"SyncExternalStore\"\n      });\n      return subscribe;\n    },\n    useDeferredValue: function useDeferredValue(value) {\n      var hook = nextHook();\n      value = null !== hook ? hook.memoizedState : value;\n      hookLog.push({\n        displayName: null,\n        primitive: \"DeferredValue\",\n        stackError: Error(),\n        value: value,\n        debugInfo: null,\n        dispatcherHookName: \"DeferredValue\"\n      });\n      return value;\n    },\n    useId: function useId() {\n      var hook = nextHook();\n      hook = null !== hook ? hook.memoizedState : \"\";\n      hookLog.push({\n        displayName: null,\n        primitive: \"Id\",\n        stackError: Error(),\n        value: hook,\n        debugInfo: null,\n        dispatcherHookName: \"Id\"\n      });\n      return hook;\n    },\n    useFormState: function useFormState(action, initialState) {\n      var hook = nextHook();\n      nextHook();\n      nextHook();\n      action = Error();\n      var debugInfo = null,\n          error = null;\n      if (null !== hook) {\n        if (initialState = hook.memoizedState, \"object\" === _typeof(initialState) && null !== initialState && \"function\" === typeof initialState.then) switch (initialState.status) {\n          case \"fulfilled\":\n            var value = initialState.value;\n            debugInfo = void 0 === initialState._debugInfo ? null : initialState._debugInfo;\n            break;\n\n          case \"rejected\":\n            error = initialState.reason;\n            break;\n\n          default:\n            error = SuspenseException, debugInfo = void 0 === initialState._debugInfo ? null : initialState._debugInfo, value = initialState;\n        } else value = initialState;\n      } else value = initialState;\n      hookLog.push({\n        displayName: null,\n        primitive: \"FormState\",\n        stackError: action,\n        value: value,\n        debugInfo: debugInfo,\n        dispatcherHookName: \"FormState\"\n      });\n      if (null !== error) throw error;\n      return [value, function () {}, !1];\n    },\n    useActionState: function useActionState(action, initialState) {\n      var hook = nextHook();\n      nextHook();\n      nextHook();\n      action = Error();\n      var debugInfo = null,\n          error = null;\n      if (null !== hook) {\n        if (initialState = hook.memoizedState, \"object\" === _typeof(initialState) && null !== initialState && \"function\" === typeof initialState.then) switch (initialState.status) {\n          case \"fulfilled\":\n            var value = initialState.value;\n            debugInfo = void 0 === initialState._debugInfo ? null : initialState._debugInfo;\n            break;\n\n          case \"rejected\":\n            error = initialState.reason;\n            break;\n\n          default:\n            error = SuspenseException, debugInfo = void 0 === initialState._debugInfo ? null : initialState._debugInfo, value = initialState;\n        } else value = initialState;\n      } else value = initialState;\n      hookLog.push({\n        displayName: null,\n        primitive: \"ActionState\",\n        stackError: action,\n        value: value,\n        debugInfo: debugInfo,\n        dispatcherHookName: \"ActionState\"\n      });\n      if (null !== error) throw error;\n      return [value, function () {}, !1];\n    },\n    useHostTransitionStatus: function useHostTransitionStatus() {\n      var status = readContext({\n        _currentValue: null\n      });\n      hookLog.push({\n        displayName: null,\n        primitive: \"HostTransitionStatus\",\n        stackError: Error(),\n        value: status,\n        debugInfo: null,\n        dispatcherHookName: \"HostTransitionStatus\"\n      });\n      return status;\n    }\n  };\n\n  React = {\n    get: function get(target, prop) {\n      if (target.hasOwnProperty(prop)) return target[prop];\n      target = Error(\"Missing method in Dispatcher: \" + prop);\n      target.name = \"ReactDebugToolsUnsupportedHookError\";\n      throw target;\n    }\n  };\n  var DispatcherProxy = \"undefined\" === typeof Proxy ? Dispatcher : new Proxy(Dispatcher, React),\n      mostLikelyAncestorIndex = 0;\n  exports.inspectHooks = inspectHooks;\n\n  exports.inspectHooksOfFiber = function (fiber, currentDispatcher) {\n    null == currentDispatcher && (currentDispatcher = ReactSharedInternals);\n    if (0 !== fiber.tag && 15 !== fiber.tag && 11 !== fiber.tag) throw Error(\"Unknown Fiber. Needs to be a function component to inspect hooks.\");\n    getPrimitiveStackCache();\n    currentHook = fiber.memoizedState;\n    currentFiber = fiber;\n\n    if (hasOwnProperty.call(currentFiber, \"dependencies\")) {\n      var dependencies = currentFiber.dependencies;\n      currentContextDependency = null !== dependencies ? dependencies.firstContext : null;\n    } else if (hasOwnProperty.call(currentFiber, \"dependencies_old\")) dependencies = currentFiber.dependencies_old, currentContextDependency = null !== dependencies ? dependencies.firstContext : null;else if (hasOwnProperty.call(currentFiber, \"dependencies_new\")) dependencies = currentFiber.dependencies_new, currentContextDependency = null !== dependencies ? dependencies.firstContext : null;else if (hasOwnProperty.call(currentFiber, \"contextDependencies\")) dependencies = currentFiber.contextDependencies, currentContextDependency = null !== dependencies ? dependencies.first : null;else throw Error(\"Unsupported React version. This is a bug in React Debug Tools.\");\n\n    dependencies = fiber.type;\n    var props = fiber.memoizedProps;\n\n    if (dependencies !== fiber.elementType && dependencies && dependencies.defaultProps) {\n      props = assign({}, props);\n      var defaultProps = dependencies.defaultProps;\n\n      for (propName in defaultProps) {\n        void 0 === props[propName] && (props[propName] = defaultProps[propName]);\n      }\n    }\n\n    var propName = new Map();\n\n    try {\n      if (null !== currentContextDependency && !hasOwnProperty.call(currentContextDependency, \"memoizedValue\")) for (defaultProps = fiber; defaultProps;) {\n        if (10 === defaultProps.tag) {\n          var context = defaultProps.type;\n          void 0 !== context._context && (context = context._context);\n          propName.has(context) || (propName.set(context, context._currentValue), context._currentValue = defaultProps.memoizedProps.value);\n        }\n\n        defaultProps = defaultProps.return;\n      }\n\n      if (11 === fiber.tag) {\n        var renderFunction = dependencies.render;\n        context = props;\n        var ref = fiber.ref;\n        fiber = currentDispatcher;\n        var previousDispatcher = fiber.H;\n        fiber.H = DispatcherProxy;\n\n        try {\n          var ancestorStackError = Error();\n          renderFunction(context, ref);\n        } catch (error) {\n          handleRenderFunctionError(error);\n        } finally {\n          var readHookLog = hookLog;\n          hookLog = [];\n          fiber.H = previousDispatcher;\n        }\n\n        var rootStack = ErrorStackParser.parse(ancestorStackError);\n        return buildTree(rootStack, readHookLog);\n      }\n\n      return inspectHooks(dependencies, props, currentDispatcher);\n    } finally {\n      currentContextDependency = currentHook = currentFiber = null, restoreContexts(propName);\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react-debug-tools/cjs/react-debug-tools.development.js\n");

/***/ }),

/***/ "../../build/oss-experimental/react-debug-tools/index.js":
/*!***************************************************************!*\
  !*** ../../build/oss-experimental/react-debug-tools/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-debug-tools.development.js */ \"../../build/oss-experimental/react-debug-tools/cjs/react-debug-tools.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vYnVpbGQvb3NzLWV4cGVyaW1lbnRhbC9yZWFjdC1kZWJ1Zy10b29scy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUdBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi8uLi9idWlsZC9vc3MtZXhwZXJpbWVudGFsL3JlYWN0LWRlYnVnLXRvb2xzL2luZGV4LmpzPzM4ZTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRlYnVnLXRvb2xzLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZGVidWctdG9vbHMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react-debug-tools/index.js\n");

/***/ }),

/***/ "../../build/oss-experimental/react/cjs/react.development.js":
/*!*******************************************************************!*\
  !*** ../../build/oss-experimental/react/cjs/react.development.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"../../node_modules/process/browser.js\");\n/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n true && function () {\n  function defineDeprecationWarning(methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function get() {\n        console.warn(\"%s(...) is deprecated in plain JavaScript React classes. %s\", info[0], info[1]);\n      }\n    });\n  }\n\n  function getIteratorFn(maybeIterable) {\n    if (null === maybeIterable || \"object\" !== _typeof(maybeIterable)) return null;\n    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[\"@@iterator\"];\n    return \"function\" === typeof maybeIterable ? maybeIterable : null;\n  }\n\n  function warnNoop(publicInstance, callerName) {\n    publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || \"ReactClass\";\n    var warningKey = publicInstance + \".\" + callerName;\n    didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error(\"Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.\", callerName, publicInstance), didWarnStateUpdateForUnmountedComponent[warningKey] = !0);\n  }\n\n  function Component(props, context, updater) {\n    this.props = props;\n    this.context = context;\n    this.refs = emptyObject;\n    this.updater = updater || ReactNoopUpdateQueue;\n  }\n\n  function ComponentDummy() {}\n\n  function PureComponent(props, context, updater) {\n    this.props = props;\n    this.context = context;\n    this.refs = emptyObject;\n    this.updater = updater || ReactNoopUpdateQueue;\n  }\n\n  function testStringCoercion(value) {\n    return \"\" + value;\n  }\n\n  function checkKeyStringCoercion(value) {\n    try {\n      testStringCoercion(value);\n      var JSCompiler_inline_result = !1;\n    } catch (e) {\n      JSCompiler_inline_result = !0;\n    }\n\n    if (JSCompiler_inline_result) {\n      JSCompiler_inline_result = console;\n      var JSCompiler_temp_const = JSCompiler_inline_result.error;\n      var JSCompiler_inline_result$jscomp$0 = \"function\" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\";\n      JSCompiler_temp_const.call(JSCompiler_inline_result, \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\", JSCompiler_inline_result$jscomp$0);\n      return testStringCoercion(value);\n    }\n  }\n\n  function getComponentNameFromType(type) {\n    if (null == type) return null;\n    if (\"function\" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE$1 ? null : type.displayName || type.name || null;\n    if (\"string\" === typeof type) return type;\n\n    switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return \"Fragment\";\n\n      case REACT_PORTAL_TYPE:\n        return \"Portal\";\n\n      case REACT_PROFILER_TYPE:\n        return \"Profiler\";\n\n      case REACT_STRICT_MODE_TYPE:\n        return \"StrictMode\";\n\n      case REACT_SUSPENSE_TYPE:\n        return \"Suspense\";\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return \"SuspenseList\";\n\n      case REACT_VIEW_TRANSITION_TYPE:\n        return \"ViewTransition\";\n    }\n\n    if (\"object\" === _typeof(type)) switch (\"number\" === typeof type.tag && console.error(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        return (type.displayName || \"Context\") + \".Provider\";\n\n      case REACT_CONSUMER_TYPE:\n        return (type._context.displayName || \"Context\") + \".Consumer\";\n\n      case REACT_FORWARD_REF_TYPE:\n        var innerType = type.render;\n        type = type.displayName;\n        type || (type = innerType.displayName || innerType.name || \"\", type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\");\n        return type;\n\n      case REACT_MEMO_TYPE:\n        return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || \"Memo\";\n\n      case REACT_LAZY_TYPE:\n        innerType = type._payload;\n        type = type._init;\n\n        try {\n          return getComponentNameFromType(type(innerType));\n        } catch (x) {}\n\n    }\n    return null;\n  }\n\n  function getTaskName(type) {\n    if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n    if (\"object\" === _typeof(type) && null !== type && type.$$typeof === REACT_LAZY_TYPE) return \"<...>\";\n\n    try {\n      var name = getComponentNameFromType(type);\n      return name ? \"<\" + name + \">\" : \"<...>\";\n    } catch (x) {\n      return \"<...>\";\n    }\n  }\n\n  function getOwner() {\n    var dispatcher = ReactSharedInternals.A;\n    return null === dispatcher ? null : dispatcher.getOwner();\n  }\n\n  function hasValidKey(config) {\n    if (hasOwnProperty.call(config, \"key\")) {\n      var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n      if (getter && getter.isReactWarning) return !1;\n    }\n\n    return void 0 !== config.key;\n  }\n\n  function defineKeyPropWarningGetter(props, displayName) {\n    function warnAboutAccessingKey() {\n      specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\", displayName));\n    }\n\n    warnAboutAccessingKey.isReactWarning = !0;\n    Object.defineProperty(props, \"key\", {\n      get: warnAboutAccessingKey,\n      configurable: !0\n    });\n  }\n\n  function elementRefGetterWithDeprecationWarning() {\n    var componentName = getComponentNameFromType(this.type);\n    didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error(\"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"));\n    componentName = this.props.ref;\n    return void 0 !== componentName ? componentName : null;\n  }\n\n  function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {\n    self = props.ref;\n    type = {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key,\n      props: props,\n      _owner: owner\n    };\n    null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, \"ref\", {\n      enumerable: !1,\n      get: elementRefGetterWithDeprecationWarning\n    }) : Object.defineProperty(type, \"ref\", {\n      enumerable: !1,\n      value: null\n    });\n    type._store = {};\n    Object.defineProperty(type._store, \"validated\", {\n      configurable: !1,\n      enumerable: !1,\n      writable: !0,\n      value: 0\n    });\n    Object.defineProperty(type, \"_debugInfo\", {\n      configurable: !1,\n      enumerable: !1,\n      writable: !0,\n      value: null\n    });\n    Object.defineProperty(type, \"_debugStack\", {\n      configurable: !1,\n      enumerable: !1,\n      writable: !0,\n      value: debugStack\n    });\n    Object.defineProperty(type, \"_debugTask\", {\n      configurable: !1,\n      enumerable: !1,\n      writable: !0,\n      value: debugTask\n    });\n    Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n    return type;\n  }\n\n  function cloneAndReplaceKey(oldElement, newKey) {\n    newKey = ReactElement(oldElement.type, newKey, void 0, void 0, oldElement._owner, oldElement.props, oldElement._debugStack, oldElement._debugTask);\n    newKey._store.validated = oldElement._store.validated;\n    return newKey;\n  }\n\n  function isValidElement(object) {\n    return \"object\" === _typeof(object) && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n\n  function escape(key) {\n    var escaperLookup = {\n      \"=\": \"=0\",\n      \":\": \"=2\"\n    };\n    return \"$\" + key.replace(/[=:]/g, function (match) {\n      return escaperLookup[match];\n    });\n  }\n\n  function getElementKey(element, index) {\n    return \"object\" === _typeof(element) && null !== element && null != element.key ? (checkKeyStringCoercion(element.key), escape(\"\" + element.key)) : index.toString(36);\n  }\n\n  function noop$1() {}\n\n  function resolveThenable(thenable) {\n    switch (thenable.status) {\n      case \"fulfilled\":\n        return thenable.value;\n\n      case \"rejected\":\n        throw thenable.reason;\n\n      default:\n        switch (\"string\" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = \"pending\", thenable.then(function (fulfilledValue) {\n          \"pending\" === thenable.status && (thenable.status = \"fulfilled\", thenable.value = fulfilledValue);\n        }, function (error) {\n          \"pending\" === thenable.status && (thenable.status = \"rejected\", thenable.reason = error);\n        })), thenable.status) {\n          case \"fulfilled\":\n            return thenable.value;\n\n          case \"rejected\":\n            throw thenable.reason;\n        }\n\n    }\n\n    throw thenable;\n  }\n\n  function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n    var type = _typeof(children);\n\n    if (\"undefined\" === type || \"boolean\" === type) children = null;\n    var invokeCallback = !1;\n    if (null === children) invokeCallback = !0;else switch (type) {\n      case \"bigint\":\n      case \"string\":\n      case \"number\":\n        invokeCallback = !0;\n        break;\n\n      case \"object\":\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = !0;\n            break;\n\n          case REACT_LAZY_TYPE:\n            return invokeCallback = children._init, mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback);\n        }\n\n    }\n\n    if (invokeCallback) {\n      invokeCallback = children;\n      callback = callback(invokeCallback);\n      var childKey = \"\" === nameSoFar ? \".\" + getElementKey(invokeCallback, 0) : nameSoFar;\n      isArrayImpl(callback) ? (escapedPrefix = \"\", null != childKey && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, \"$&/\") + \"/\"), mapIntoArray(callback, array, escapedPrefix, \"\", function (c) {\n        return c;\n      })) : null != callback && (isValidElement(callback) && (null != callback.key && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(callback, escapedPrefix + (null == callback.key || invokeCallback && invokeCallback.key === callback.key ? \"\" : (\"\" + callback.key).replace(userProvidedKeyEscapeRegex, \"$&/\") + \"/\") + childKey), \"\" !== nameSoFar && null != invokeCallback && isValidElement(invokeCallback) && null == invokeCallback.key && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));\n      return 1;\n    }\n\n    invokeCallback = 0;\n    childKey = \"\" === nameSoFar ? \".\" : nameSoFar + \":\";\n    if (isArrayImpl(children)) for (var i = 0; i < children.length; i++) {\n      nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);\n    } else if (i = getIteratorFn(children), \"function\" === typeof i) for (i === children.entries && (didWarnAboutMaps || console.warn(\"Using Maps as children is not supported. Use an array of keyed ReactElements instead.\"), didWarnAboutMaps = !0), children = i.call(children), i = 0; !(nameSoFar = children.next()).done;) {\n      nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);\n    } else if (\"object\" === type) {\n      if (\"function\" === typeof children.then) return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);\n      array = String(children);\n      throw Error(\"Objects are not valid as a React child (found: \" + (\"[object Object]\" === array ? \"object with keys {\" + Object.keys(children).join(\", \") + \"}\" : array) + \"). If you meant to render a collection of children, use an array instead.\");\n    }\n    return invokeCallback;\n  }\n\n  function mapChildren(children, func, context) {\n    if (null == children) return children;\n    var result = [],\n        count = 0;\n    mapIntoArray(children, result, \"\", \"\", function (child) {\n      return func.call(context, child, count++);\n    });\n    return result;\n  }\n\n  function lazyInitializer(payload) {\n    if (-1 === payload._status) {\n      var ctor = payload._result;\n      ctor = ctor();\n      ctor.then(function (moduleObject) {\n        if (0 === payload._status || -1 === payload._status) payload._status = 1, payload._result = moduleObject;\n      }, function (error) {\n        if (0 === payload._status || -1 === payload._status) payload._status = 2, payload._result = error;\n      });\n      -1 === payload._status && (payload._status = 0, payload._result = ctor);\n    }\n\n    if (1 === payload._status) return ctor = payload._result, void 0 === ctor && console.error(\"lazy: Expected the result of a dynamic import() call. Instead received: %s\\n\\nYour code should look like: \\n  const MyComponent = lazy(() => import('./MyComponent'))\\n\\nDid you accidentally put curly braces around the import?\", ctor), \"default\" in ctor || console.error(\"lazy: Expected the result of a dynamic import() call. Instead received: %s\\n\\nYour code should look like: \\n  const MyComponent = lazy(() => import('./MyComponent'))\", ctor), ctor.default;\n    throw payload._result;\n  }\n\n  function resolveDispatcher() {\n    var dispatcher = ReactSharedInternals.H;\n    null === dispatcher && console.error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n    return dispatcher;\n  }\n\n  function useOptimistic(passthrough, reducer) {\n    return resolveDispatcher().useOptimistic(passthrough, reducer);\n  }\n\n  function noop() {}\n\n  function enqueueTask(task) {\n    if (null === enqueueTaskImpl) try {\n      var requireString = (\"require\" + Math.random()).slice(0, 7);\n      enqueueTaskImpl = (module && module[requireString]).call(module, \"timers\").setImmediate;\n    } catch (_err) {\n      enqueueTaskImpl = function enqueueTaskImpl(callback) {\n        !1 === didWarnAboutMessageChannel && (didWarnAboutMessageChannel = !0, \"undefined\" === typeof MessageChannel && console.error(\"This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.\"));\n        var channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(void 0);\n      };\n    }\n    return enqueueTaskImpl(task);\n  }\n\n  function aggregateErrors(errors) {\n    return 1 < errors.length && \"function\" === typeof AggregateError ? new AggregateError(errors) : errors[0];\n  }\n\n  function popActScope(prevActQueue, prevActScopeDepth) {\n    prevActScopeDepth !== actScopeDepth - 1 && console.error(\"You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. \");\n    actScopeDepth = prevActScopeDepth;\n  }\n\n  function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n    var queue = ReactSharedInternals.actQueue;\n    if (null !== queue) if (0 !== queue.length) try {\n      flushActQueue(queue);\n      enqueueTask(function () {\n        return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n      });\n      return;\n    } catch (error) {\n      ReactSharedInternals.thrownErrors.push(error);\n    } else ReactSharedInternals.actQueue = null;\n    0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);\n  }\n\n  function flushActQueue(queue) {\n    if (!isFlushing) {\n      isFlushing = !0;\n      var i = 0;\n\n      try {\n        for (; i < queue.length; i++) {\n          var callback = queue[i];\n\n          do {\n            ReactSharedInternals.didUsePromise = !1;\n            var continuation = callback(!1);\n\n            if (null !== continuation) {\n              if (ReactSharedInternals.didUsePromise) {\n                queue[i] = callback;\n                queue.splice(0, i);\n                return;\n              }\n\n              callback = continuation;\n            } else break;\n          } while (1);\n        }\n\n        queue.length = 0;\n      } catch (error) {\n        queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);\n      } finally {\n        isFlushing = !1;\n      }\n    }\n  }\n\n  \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n  var REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n  Symbol.for(\"react.provider\");\n  var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\"),\n      REACT_POSTPONE_TYPE = Symbol.for(\"react.postpone\"),\n      REACT_VIEW_TRANSITION_TYPE = Symbol.for(\"react.view_transition\"),\n      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,\n      didWarnStateUpdateForUnmountedComponent = {},\n      ReactNoopUpdateQueue = {\n    isMounted: function isMounted() {\n      return !1;\n    },\n    enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {\n      warnNoop(publicInstance, \"forceUpdate\");\n    },\n    enqueueReplaceState: function enqueueReplaceState(publicInstance) {\n      warnNoop(publicInstance, \"replaceState\");\n    },\n    enqueueSetState: function enqueueSetState(publicInstance) {\n      warnNoop(publicInstance, \"setState\");\n    }\n  },\n      assign = Object.assign,\n      emptyObject = {};\n  Object.freeze(emptyObject);\n  Component.prototype.isReactComponent = {};\n\n  Component.prototype.setState = function (partialState, callback) {\n    if (\"object\" !== _typeof(partialState) && \"function\" !== typeof partialState && null != partialState) throw Error(\"takes an object of state variables to update or a function which returns an object of state variables.\");\n    this.updater.enqueueSetState(this, partialState, callback, \"setState\");\n  };\n\n  Component.prototype.forceUpdate = function (callback) {\n    this.updater.enqueueForceUpdate(this, callback, \"forceUpdate\");\n  };\n\n  var deprecatedAPIs = {\n    isMounted: [\"isMounted\", \"Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\"],\n    replaceState: [\"replaceState\", \"Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).\"]\n  },\n      fnName;\n\n  for (fnName in deprecatedAPIs) {\n    deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n  }\n\n  ComponentDummy.prototype = Component.prototype;\n  deprecatedAPIs = PureComponent.prototype = new ComponentDummy();\n  deprecatedAPIs.constructor = PureComponent;\n  assign(deprecatedAPIs, Component.prototype);\n  deprecatedAPIs.isPureReactComponent = !0;\n  var isArrayImpl = Array.isArray,\n      REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals = {\n    H: null,\n    A: null,\n    T: null,\n    S: null,\n    actQueue: null,\n    isBatchingLegacy: !1,\n    didScheduleLegacyUpdate: !1,\n    didUsePromise: !1,\n    thrownErrors: [],\n    getCurrentStack: null\n  },\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n  new (\"function\" === typeof WeakMap ? WeakMap : Map)();\n  var createTask = console.createTask ? console.createTask : function () {\n    return null;\n  },\n      specialPropKeyWarningShown,\n      didWarnAboutOldJSXRuntime;\n  var didWarnAboutElementRef = {};\n  var didWarnAboutMaps = !1,\n      userProvidedKeyEscapeRegex = /\\/+/g,\n      reportGlobalError = \"function\" === typeof reportError ? reportError : function (error) {\n    if (\"object\" === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && \"function\" === typeof window.ErrorEvent) {\n      var event = new window.ErrorEvent(\"error\", {\n        bubbles: !0,\n        cancelable: !0,\n        message: \"object\" === _typeof(error) && null !== error && \"string\" === typeof error.message ? String(error.message) : String(error),\n        error: error\n      });\n      if (!window.dispatchEvent(event)) return;\n    } else if (\"object\" === (typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) && \"function\" === typeof process.emit) {\n      process.emit(\"uncaughtException\", error);\n      return;\n    }\n\n    console.error(error);\n  },\n      didWarnAboutMessageChannel = !1,\n      enqueueTaskImpl = null,\n      actScopeDepth = 0,\n      didWarnNoAwaitAct = !1,\n      isFlushing = !1,\n      queueSeveralMicrotasks = \"function\" === typeof queueMicrotask ? function (callback) {\n    queueMicrotask(function () {\n      return queueMicrotask(callback);\n    });\n  } : enqueueTask;\n  exports.Children = {\n    map: mapChildren,\n    forEach: function forEach(children, forEachFunc, forEachContext) {\n      mapChildren(children, function () {\n        forEachFunc.apply(this, arguments);\n      }, forEachContext);\n    },\n    count: function count(children) {\n      var n = 0;\n      mapChildren(children, function () {\n        n++;\n      });\n      return n;\n    },\n    toArray: function toArray(children) {\n      return mapChildren(children, function (child) {\n        return child;\n      }) || [];\n    },\n    only: function only(children) {\n      if (!isValidElement(children)) throw Error(\"React.Children.only expected to receive a single React element child.\");\n      return children;\n    }\n  };\n  exports.Component = Component;\n  exports.Fragment = REACT_FRAGMENT_TYPE;\n  exports.Profiler = REACT_PROFILER_TYPE;\n  exports.PureComponent = PureComponent;\n  exports.StrictMode = REACT_STRICT_MODE_TYPE;\n  exports.Suspense = REACT_SUSPENSE_TYPE;\n  exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;\n  exports.__COMPILER_RUNTIME = {\n    c: function c(size) {\n      return resolveDispatcher().useMemoCache(size);\n    }\n  };\n\n  exports.act = function (callback) {\n    var prevActQueue = ReactSharedInternals.actQueue,\n        prevActScopeDepth = actScopeDepth;\n    actScopeDepth++;\n    var queue = ReactSharedInternals.actQueue = null !== prevActQueue ? prevActQueue : [],\n        didAwaitActCall = !1;\n\n    try {\n      var result = callback();\n    } catch (error) {\n      ReactSharedInternals.thrownErrors.push(error);\n    }\n\n    if (0 < ReactSharedInternals.thrownErrors.length) throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;\n\n    if (null !== result && \"object\" === _typeof(result) && \"function\" === typeof result.then) {\n      var thenable = result;\n      queueSeveralMicrotasks(function () {\n        didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = !0, console.error(\"You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);\"));\n      });\n      return {\n        then: function then(resolve, reject) {\n          didAwaitActCall = !0;\n          thenable.then(function (returnValue) {\n            popActScope(prevActQueue, prevActScopeDepth);\n\n            if (0 === prevActScopeDepth) {\n              try {\n                flushActQueue(queue), enqueueTask(function () {\n                  return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n                });\n              } catch (error$0) {\n                ReactSharedInternals.thrownErrors.push(error$0);\n              }\n\n              if (0 < ReactSharedInternals.thrownErrors.length) {\n                var _thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);\n\n                ReactSharedInternals.thrownErrors.length = 0;\n                reject(_thrownError);\n              }\n            } else resolve(returnValue);\n          }, function (error) {\n            popActScope(prevActQueue, prevActScopeDepth);\n            0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);\n          });\n        }\n      };\n    }\n\n    var returnValue$jscomp$0 = result;\n    popActScope(prevActQueue, prevActScopeDepth);\n    0 === prevActScopeDepth && (flushActQueue(queue), 0 !== queue.length && queueSeveralMicrotasks(function () {\n      didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = !0, console.error(\"A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\\n\\nawait act(() => ...)\"));\n    }), ReactSharedInternals.actQueue = null);\n    if (0 < ReactSharedInternals.thrownErrors.length) throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;\n    return {\n      then: function then(resolve, reject) {\n        didAwaitActCall = !0;\n        0 === prevActScopeDepth ? (ReactSharedInternals.actQueue = queue, enqueueTask(function () {\n          return recursivelyFlushAsyncActWork(returnValue$jscomp$0, resolve, reject);\n        })) : resolve(returnValue$jscomp$0);\n      }\n    };\n  };\n\n  exports.cache = function (fn) {\n    return function () {\n      return fn.apply(null, arguments);\n    };\n  };\n\n  exports.captureOwnerStack = function () {\n    var getCurrentStack = ReactSharedInternals.getCurrentStack;\n    return null === getCurrentStack ? null : getCurrentStack();\n  };\n\n  exports.cloneElement = function (element, config, children) {\n    if (null === element || void 0 === element) throw Error(\"The argument must be a React element, but you passed \" + element + \".\");\n    var props = assign({}, element.props),\n        key = element.key,\n        owner = element._owner;\n\n    if (null != config) {\n      var JSCompiler_inline_result;\n\n      a: {\n        if (hasOwnProperty.call(config, \"ref\") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(config, \"ref\").get) && JSCompiler_inline_result.isReactWarning) {\n          JSCompiler_inline_result = !1;\n          break a;\n        }\n\n        JSCompiler_inline_result = void 0 !== config.ref;\n      }\n\n      JSCompiler_inline_result && (owner = getOwner());\n      hasValidKey(config) && (checkKeyStringCoercion(config.key), key = \"\" + config.key);\n\n      for (propName in config) {\n        !hasOwnProperty.call(config, propName) || \"key\" === propName || \"__self\" === propName || \"__source\" === propName || \"ref\" === propName && void 0 === config.ref || (props[propName] = config[propName]);\n      }\n    }\n\n    var propName = arguments.length - 2;\n    if (1 === propName) props.children = children;else if (1 < propName) {\n      JSCompiler_inline_result = Array(propName);\n\n      for (var i = 0; i < propName; i++) {\n        JSCompiler_inline_result[i] = arguments[i + 2];\n      }\n\n      props.children = JSCompiler_inline_result;\n    }\n    props = ReactElement(element.type, key, void 0, void 0, owner, props, element._debugStack, element._debugTask);\n\n    for (key = 2; key < arguments.length; key++) {\n      owner = arguments[key], isValidElement(owner) && owner._store && (owner._store.validated = 1);\n    }\n\n    return props;\n  };\n\n  exports.createContext = function (defaultValue) {\n    defaultValue = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _currentValue: defaultValue,\n      _currentValue2: defaultValue,\n      _threadCount: 0,\n      Provider: null,\n      Consumer: null\n    };\n    defaultValue.Provider = defaultValue;\n    defaultValue.Consumer = {\n      $$typeof: REACT_CONSUMER_TYPE,\n      _context: defaultValue\n    };\n    defaultValue._currentRenderer = null;\n    defaultValue._currentRenderer2 = null;\n    return defaultValue;\n  };\n\n  exports.createElement = function (type, config, children) {\n    for (var i = 2; i < arguments.length; i++) {\n      var node = arguments[i];\n      isValidElement(node) && node._store && (node._store.validated = 1);\n    }\n\n    var propName;\n    i = {};\n    node = null;\n    if (null != config) for (propName in didWarnAboutOldJSXRuntime || !(\"__self\" in config) || \"key\" in config || (didWarnAboutOldJSXRuntime = !0, console.warn(\"Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform\")), hasValidKey(config) && (checkKeyStringCoercion(config.key), node = \"\" + config.key), config) {\n      hasOwnProperty.call(config, propName) && \"key\" !== propName && \"__self\" !== propName && \"__source\" !== propName && (i[propName] = config[propName]);\n    }\n    var childrenLength = arguments.length - 2;\n    if (1 === childrenLength) i.children = children;else if (1 < childrenLength) {\n      for (var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++) {\n        childArray[_i] = arguments[_i + 2];\n      }\n\n      Object.freeze && Object.freeze(childArray);\n      i.children = childArray;\n    }\n    if (type && type.defaultProps) for (propName in childrenLength = type.defaultProps, childrenLength) {\n      void 0 === i[propName] && (i[propName] = childrenLength[propName]);\n    }\n    node && defineKeyPropWarningGetter(i, \"function\" === typeof type ? type.displayName || type.name || \"Unknown\" : type);\n    return ReactElement(type, node, void 0, void 0, getOwner(), i, Error(\"react-stack-top-frame\"), createTask(getTaskName(type)));\n  };\n\n  exports.createRef = function () {\n    var refObject = {\n      current: null\n    };\n    Object.seal(refObject);\n    return refObject;\n  };\n\n  exports.experimental_useEffectEvent = function (callback) {\n    return resolveDispatcher().useEffectEvent(callback);\n  };\n\n  exports.experimental_useOptimistic = function (passthrough, reducer) {\n    console.error(\"useOptimistic is now in canary. Remove the experimental_ prefix. The prefixed alias will be removed in an upcoming release.\");\n    return useOptimistic(passthrough, reducer);\n  };\n\n  exports.experimental_useResourceEffect = void 0;\n\n  exports.forwardRef = function (render) {\n    null != render && render.$$typeof === REACT_MEMO_TYPE ? console.error(\"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).\") : \"function\" !== typeof render ? console.error(\"forwardRef requires a render function but was given %s.\", null === render ? \"null\" : _typeof(render)) : 0 !== render.length && 2 !== render.length && console.error(\"forwardRef render functions accept exactly two parameters: props and ref. %s\", 1 === render.length ? \"Did you forget to use the ref parameter?\" : \"Any additional parameter will be undefined.\");\n    null != render && null != render.defaultProps && console.error(\"forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?\");\n    var elementType = {\n      $$typeof: REACT_FORWARD_REF_TYPE,\n      render: render\n    },\n        ownName;\n    Object.defineProperty(elementType, \"displayName\", {\n      enumerable: !1,\n      configurable: !0,\n      get: function get() {\n        return ownName;\n      },\n      set: function set(name) {\n        ownName = name;\n        render.name || render.displayName || (Object.defineProperty(render, \"name\", {\n          value: name\n        }), render.displayName = name);\n      }\n    });\n    return elementType;\n  };\n\n  exports.isValidElement = isValidElement;\n\n  exports.lazy = function (ctor) {\n    return {\n      $$typeof: REACT_LAZY_TYPE,\n      _payload: {\n        _status: -1,\n        _result: ctor\n      },\n      _init: lazyInitializer\n    };\n  };\n\n  exports.memo = function (type, compare) {\n    \"string\" === typeof type || \"function\" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || type === REACT_VIEW_TRANSITION_TYPE || \"object\" === _typeof(type) && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) || console.error(\"memo: The first argument must be a component. Instead received: %s\", null === type ? \"null\" : _typeof(type));\n    compare = {\n      $$typeof: REACT_MEMO_TYPE,\n      type: type,\n      compare: void 0 === compare ? null : compare\n    };\n    var ownName;\n    Object.defineProperty(compare, \"displayName\", {\n      enumerable: !1,\n      configurable: !0,\n      get: function get() {\n        return ownName;\n      },\n      set: function set(name) {\n        ownName = name;\n        type.name || type.displayName || (Object.defineProperty(type, \"name\", {\n          value: name\n        }), type.displayName = name);\n      }\n    });\n    return compare;\n  };\n\n  exports.startTransition = function (scope) {\n    var prevTransition = ReactSharedInternals.T,\n        currentTransition = {};\n    ReactSharedInternals.T = currentTransition;\n    currentTransition._updatedFibers = new Set();\n\n    try {\n      var returnValue = scope(),\n          onStartTransitionFinish = ReactSharedInternals.S;\n      null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);\n      \"object\" === _typeof(returnValue) && null !== returnValue && \"function\" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);\n    } catch (error) {\n      reportGlobalError(error);\n    } finally {\n      null === prevTransition && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn(\"Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.\")), ReactSharedInternals.T = prevTransition;\n    }\n  };\n\n  exports.unstable_Activity = REACT_OFFSCREEN_TYPE;\n  exports.unstable_SuspenseList = REACT_SUSPENSE_LIST_TYPE;\n  exports.unstable_ViewTransition = REACT_VIEW_TRANSITION_TYPE;\n\n  exports.unstable_getCacheForType = function (resourceType) {\n    var dispatcher = ReactSharedInternals.A;\n    return dispatcher ? dispatcher.getCacheForType(resourceType) : resourceType();\n  };\n\n  exports.unstable_postpone = function (reason) {\n    reason = Error(reason);\n    reason.$$typeof = REACT_POSTPONE_TYPE;\n    throw reason;\n  };\n\n  exports.unstable_useCacheRefresh = function () {\n    return resolveDispatcher().useCacheRefresh();\n  };\n\n  exports.use = function (usable) {\n    return resolveDispatcher().use(usable);\n  };\n\n  exports.useActionState = function (action, initialState, permalink) {\n    return resolveDispatcher().useActionState(action, initialState, permalink);\n  };\n\n  exports.useCallback = function (callback, deps) {\n    return resolveDispatcher().useCallback(callback, deps);\n  };\n\n  exports.useContext = function (Context) {\n    var dispatcher = resolveDispatcher();\n    Context.$$typeof === REACT_CONSUMER_TYPE && console.error(\"Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?\");\n    return dispatcher.useContext(Context);\n  };\n\n  exports.useDebugValue = function (value, formatterFn) {\n    return resolveDispatcher().useDebugValue(value, formatterFn);\n  };\n\n  exports.useDeferredValue = function (value, initialValue) {\n    return resolveDispatcher().useDeferredValue(value, initialValue);\n  };\n\n  exports.useEffect = function (create, deps) {\n    return resolveDispatcher().useEffect(create, deps);\n  };\n\n  exports.useId = function () {\n    return resolveDispatcher().useId();\n  };\n\n  exports.useImperativeHandle = function (ref, create, deps) {\n    return resolveDispatcher().useImperativeHandle(ref, create, deps);\n  };\n\n  exports.useInsertionEffect = function (create, deps) {\n    return resolveDispatcher().useInsertionEffect(create, deps);\n  };\n\n  exports.useLayoutEffect = function (create, deps) {\n    return resolveDispatcher().useLayoutEffect(create, deps);\n  };\n\n  exports.useMemo = function (create, deps) {\n    return resolveDispatcher().useMemo(create, deps);\n  };\n\n  exports.useOptimistic = useOptimistic;\n\n  exports.useReducer = function (reducer, initialArg, init) {\n    return resolveDispatcher().useReducer(reducer, initialArg, init);\n  };\n\n  exports.useRef = function (initialValue) {\n    return resolveDispatcher().useRef(initialValue);\n  };\n\n  exports.useState = function (initialState) {\n    return resolveDispatcher().useState(initialState);\n  };\n\n  exports.useSyncExternalStore = function (subscribe, getSnapshot, getServerSnapshot) {\n    return resolveDispatcher().useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  };\n\n  exports.useTransition = function () {\n    return resolveDispatcher().useTransition();\n  };\n\n  exports.version = \"19.1.0-experimental-bcee8aae-20250109\";\n  \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react/cjs/react.development.js\n");

/***/ }),

/***/ "../../build/oss-experimental/react/index.js":
/*!***************************************************!*\
  !*** ../../build/oss-experimental/react/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"../../build/oss-experimental/react/cjs/react.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vYnVpbGQvb3NzLWV4cGVyaW1lbnRhbC9yZWFjdC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUdBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi8uLi9idWlsZC9vc3MtZXhwZXJpbWVudGFsL3JlYWN0L2luZGV4LmpzP2ZmY2UiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react/index.js\n");

/***/ }),

/***/ "../../node_modules/compare-versions/lib/esm/index.js":
/*!************************************************************!*\
  !*** ../../node_modules/compare-versions/lib/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"compare\": () => (/* binding */ compare),\n/* harmony export */   \"compareVersions\": () => (/* binding */ compareVersions),\n/* harmony export */   \"satisfies\": () => (/* binding */ satisfies),\n/* harmony export */   \"validate\": () => (/* binding */ validate)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nvar compareVersions = function compareVersions(v1, v2) {\n  // validate input and split into segments\n  var n1 = validateAndParse(v1);\n  var n2 = validateAndParse(v2); // pop off the patch\n\n  var p1 = n1.pop();\n  var p2 = n2.pop(); // validate numbers\n\n  var r = compareSegments(n1, n2);\n  if (r !== 0) return r; // validate pre-release\n\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n\n  return 0;\n};\n/**\n * Validate [semver](https://semver.org/) version strings.\n *\n * @param version Version number to validate\n * @returns `true` if the version number is a valid semver version number, `false` otherwise.\n *\n * @example\n * ```\n * validate('1.0.0-rc.1'); // return true\n * validate('1.0-rc.1'); // return false\n * validate('foo'); // return false\n * ```\n */\n\nvar validate = function validate(version) {\n  return typeof version === 'string' && /^[v\\d]/.test(version) && semver.test(version);\n};\n/**\n * Compare [semver](https://semver.org/) version strings using the specified operator.\n *\n * @param v1 First version to compare\n * @param v2 Second version to compare\n * @param operator Allowed arithmetic operator to use\n * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.\n *\n * @example\n * ```\n * compare('10.1.8', '10.0.4', '>'); // return true\n * compare('10.0.1', '10.0.1', '='); // return true\n * compare('10.1.1', '10.2.2', '<'); // return true\n * compare('10.1.1', '10.2.2', '<='); // return true\n * compare('10.1.1', '10.2.2', '>='); // return false\n * ```\n */\n\nvar compare = function compare(v1, v2, operator) {\n  // validate input operator\n  assertValidOperator(operator); // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n\n  var res = compareVersions(v1, v2);\n  return operatorResMap[operator].includes(res);\n};\n/**\n * Match [npm semver](https://docs.npmjs.com/cli/v6/using-npm/semver) version range.\n *\n * @param version Version number to match\n * @param range Range pattern for version\n * @returns `true` if the version number is within the range, `false` otherwise.\n *\n * @example\n * ```\n * satisfies('1.1.0', '^1.0.0'); // return true\n * satisfies('1.1.0', '~1.0.0'); // return false\n * ```\n */\n\nvar satisfies = function satisfies(version, range) {\n  // if no range operator then \"=\"\n  var m = range.match(/^([<>=~^]+)/);\n  var op = m ? m[1] : '='; // if gt/lt/eq then operator compare\n\n  if (op !== '^' && op !== '~') return compare(version, range, op); // else range of either \"~\" or \"^\" is assumed\n\n  var _validateAndParse = validateAndParse(version),\n      _validateAndParse2 = _slicedToArray(_validateAndParse, 5),\n      v1 = _validateAndParse2[0],\n      v2 = _validateAndParse2[1],\n      v3 = _validateAndParse2[2],\n      vp = _validateAndParse2[4];\n\n  var _validateAndParse3 = validateAndParse(range),\n      _validateAndParse4 = _slicedToArray(_validateAndParse3, 5),\n      r1 = _validateAndParse4[0],\n      r2 = _validateAndParse4[1],\n      r3 = _validateAndParse4[2],\n      rp = _validateAndParse4[4];\n\n  var v = [v1, v2, v3];\n  var r = [r1, r2 !== null && r2 !== void 0 ? r2 : 'x', r3 !== null && r3 !== void 0 ? r3 : 'x']; // validate pre-release\n\n  if (rp) {\n    if (!vp) return false;\n    if (compareSegments(v, r) !== 0) return false;\n    if (compareSegments(vp.split('.'), rp.split('.')) === -1) return false;\n  } // first non-zero number\n\n\n  var nonZero = r.findIndex(function (v) {\n    return v !== '0';\n  }) + 1; // pointer to where segments can be >=\n\n  var i = op === '~' ? 2 : nonZero > 1 ? nonZero : 1; // before pointer must be equal\n\n  if (compareSegments(v.slice(0, i), r.slice(0, i)) !== 0) return false; // after pointer must be >=\n\n  if (compareSegments(v.slice(i), r.slice(i)) === -1) return false;\n  return true;\n};\nvar semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\nvar validateAndParse = function validateAndParse(version) {\n  if (typeof version !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n\n  var match = version.match(semver);\n\n  if (!match) {\n    throw new Error(\"Invalid argument not valid semver ('\".concat(version, \"' received)\"));\n  }\n\n  match.shift();\n  return match;\n};\n\nvar isWildcard = function isWildcard(s) {\n  return s === '*' || s === 'x' || s === 'X';\n};\n\nvar tryParse = function tryParse(v) {\n  var n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n\nvar forceType = function forceType(a, b) {\n  return _typeof(a) !== _typeof(b) ? [String(a), String(b)] : [a, b];\n};\n\nvar compareStrings = function compareStrings(a, b) {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n\n  var _forceType = forceType(tryParse(a), tryParse(b)),\n      _forceType2 = _slicedToArray(_forceType, 2),\n      ap = _forceType2[0],\n      bp = _forceType2[1];\n\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n\nvar compareSegments = function compareSegments(a, b) {\n  for (var i = 0; i < Math.max(a.length, b.length); i++) {\n    var r = compareStrings(a[i] || '0', b[i] || '0');\n    if (r !== 0) return r;\n  }\n\n  return 0;\n};\n\nvar operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1]\n};\nvar allowedOperators = Object.keys(operatorResMap);\n\nvar assertValidOperator = function assertValidOperator(op) {\n  if (typeof op !== 'string') {\n    throw new TypeError(\"Invalid operator type, expected string but got \".concat(_typeof(op)));\n  }\n\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(\"Invalid operator, expected one of \".concat(allowedOperators.join('|')));\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/compare-versions/lib/esm/index.js\n");

/***/ }),

/***/ "../../node_modules/error-stack-parser/error-stack-parser.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/error-stack-parser/error-stack-parser.js ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (root, factory) {\n  'use strict'; // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n  /* istanbul ignore next */\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! stackframe */ \"../../node_modules/stackframe/stackframe.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function ErrorStackParser(StackFrame) {\n  'use strict';\n\n  var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\n  var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\n  var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\n  return {\n    /**\n     * Given an Error object, extract the most information from it.\n     *\n     * @param {Error} error object\n     * @return {Array} of StackFrames\n     */\n    parse: function ErrorStackParser$$parse(error) {\n      if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n        return this.parseOpera(error);\n      } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n        return this.parseV8OrIE(error);\n      } else if (error.stack) {\n        return this.parseFFOrSafari(error);\n      } else {\n        throw new Error('Cannot parse given Error object');\n      }\n    },\n    // Separate line and column numbers from a string of the form: (URI:Line:Column)\n    extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n      // Fail-fast but return locations like \"(native)\"\n      if (urlLike.indexOf(':') === -1) {\n        return [urlLike];\n      }\n\n      var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n      var parts = regExp.exec(urlLike.replace(/[()]/g, ''));\n      return [parts[1], parts[2] || undefined, parts[3] || undefined];\n    },\n    parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n      var filtered = error.stack.split('\\n').filter(function (line) {\n        return !!line.match(CHROME_IE_STACK_REGEXP);\n      }, this);\n      return filtered.map(function (line) {\n        if (line.indexOf('(eval ') > -1) {\n          // Throw away eval information until we implement stacktrace.js/stackframe#8\n          line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');\n        }\n\n        var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '('); // capture and preseve the parenthesized location \"(/foo/my bar.js:12:87)\" in\n        // case it has spaces in it, as the string is split on \\s+ later on\n\n        var location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/); // remove the parenthesized location from the line, if it was matched\n\n        sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;\n        var tokens = sanitizedLine.split(/\\s+/).slice(1); // if a location was matched, pass it to extractLocation() otherwise pop the last token\n\n        var locationParts = this.extractLocation(location ? location[1] : tokens.pop());\n        var functionName = tokens.join(' ') || undefined;\n        var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\n        return new StackFrame({\n          functionName: functionName,\n          fileName: fileName,\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }, this);\n    },\n    parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n      var filtered = error.stack.split('\\n').filter(function (line) {\n        return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n      }, this);\n      return filtered.map(function (line) {\n        // Throw away eval information until we implement stacktrace.js/stackframe#8\n        if (line.indexOf(' > eval') > -1) {\n          line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');\n        }\n\n        if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n          // Safari eval frames only have function names and nothing else\n          return new StackFrame({\n            functionName: line\n          });\n        } else {\n          var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n          var matches = line.match(functionNameRegex);\n          var functionName = matches && matches[1] ? matches[1] : undefined;\n          var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\n          return new StackFrame({\n            functionName: functionName,\n            fileName: locationParts[0],\n            lineNumber: locationParts[1],\n            columnNumber: locationParts[2],\n            source: line\n          });\n        }\n      }, this);\n    },\n    parseOpera: function ErrorStackParser$$parseOpera(e) {\n      if (!e.stacktrace || e.message.indexOf('\\n') > -1 && e.message.split('\\n').length > e.stacktrace.split('\\n').length) {\n        return this.parseOpera9(e);\n      } else if (!e.stack) {\n        return this.parseOpera10(e);\n      } else {\n        return this.parseOpera11(e);\n      }\n    },\n    parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n      var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n      var lines = e.message.split('\\n');\n      var result = [];\n\n      for (var i = 2, len = lines.length; i < len; i += 2) {\n        var match = lineRE.exec(lines[i]);\n\n        if (match) {\n          result.push(new StackFrame({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          }));\n        }\n      }\n\n      return result;\n    },\n    parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n      var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n      var lines = e.stacktrace.split('\\n');\n      var result = [];\n\n      for (var i = 0, len = lines.length; i < len; i += 2) {\n        var match = lineRE.exec(lines[i]);\n\n        if (match) {\n          result.push(new StackFrame({\n            functionName: match[3] || undefined,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          }));\n        }\n      }\n\n      return result;\n    },\n    // Opera 10.65+ Error.stack very similar to FF/Safari\n    parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n      var filtered = error.stack.split('\\n').filter(function (line) {\n        return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n      }, this);\n      return filtered.map(function (line) {\n        var tokens = line.split('@');\n        var locationParts = this.extractLocation(tokens.pop());\n        var functionCall = tokens.shift() || '';\n        var functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, '$2').replace(/\\([^)]*\\)/g, '') || undefined;\n        var argsRaw;\n\n        if (functionCall.match(/\\(([^)]*)\\)/)) {\n          argsRaw = functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, '$1');\n        }\n\n        var args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');\n        return new StackFrame({\n          functionName: functionName,\n          args: args,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }, this);\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/error-stack-parser/error-stack-parser.js\n");

/***/ }),

/***/ "../../node_modules/lru-cache/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/lru-cache/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"../../node_modules/process/browser.js\");\n\n\nmodule.exports = LRUCache; // This will be a proper iterable 'Map' in engines that support it,\n// or a fakey-fake PseudoMap in older versions.\n\nvar Map = __webpack_require__(/*! pseudomap */ \"../../node_modules/pseudomap/map.js\");\n\nvar util = __webpack_require__(/*! util */ \"../../node_modules/util/util.js\"); // A linked list to keep track of recently-used-ness\n\n\nvar Yallist = __webpack_require__(/*! yallist */ \"../../node_modules/yallist/yallist.js\"); // use symbols if possible, otherwise just _props\n\n\nvar hasSymbol = typeof Symbol === 'function' && process.env._nodeLRUCacheForceNoSymbol !== '1';\nvar makeSymbol;\n\nif (hasSymbol) {\n  makeSymbol = function makeSymbol(key) {\n    return Symbol(key);\n  };\n} else {\n  makeSymbol = function makeSymbol(key) {\n    return '_' + key;\n  };\n}\n\nvar MAX = makeSymbol('max');\nvar LENGTH = makeSymbol('length');\nvar LENGTH_CALCULATOR = makeSymbol('lengthCalculator');\nvar ALLOW_STALE = makeSymbol('allowStale');\nvar MAX_AGE = makeSymbol('maxAge');\nvar DISPOSE = makeSymbol('dispose');\nvar NO_DISPOSE_ON_SET = makeSymbol('noDisposeOnSet');\nvar LRU_LIST = makeSymbol('lruList');\nvar CACHE = makeSymbol('cache');\n\nfunction naiveLength() {\n  return 1;\n} // lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\n\n\nfunction LRUCache(options) {\n  if (!(this instanceof LRUCache)) {\n    return new LRUCache(options);\n  }\n\n  if (typeof options === 'number') {\n    options = {\n      max: options\n    };\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  var max = this[MAX] = options.max; // Kind of weird to have a default max of Infinity, but oh well.\n\n  if (!max || !(typeof max === 'number') || max <= 0) {\n    this[MAX] = Infinity;\n  }\n\n  var lc = options.length || naiveLength;\n\n  if (typeof lc !== 'function') {\n    lc = naiveLength;\n  }\n\n  this[LENGTH_CALCULATOR] = lc;\n  this[ALLOW_STALE] = options.stale || false;\n  this[MAX_AGE] = options.maxAge || 0;\n  this[DISPOSE] = options.dispose;\n  this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;\n  this.reset();\n} // resize the cache when the max changes.\n\n\nObject.defineProperty(LRUCache.prototype, 'max', {\n  set: function set(mL) {\n    if (!mL || !(typeof mL === 'number') || mL <= 0) {\n      mL = Infinity;\n    }\n\n    this[MAX] = mL;\n    trim(this);\n  },\n  get: function get() {\n    return this[MAX];\n  },\n  enumerable: true\n});\nObject.defineProperty(LRUCache.prototype, 'allowStale', {\n  set: function set(allowStale) {\n    this[ALLOW_STALE] = !!allowStale;\n  },\n  get: function get() {\n    return this[ALLOW_STALE];\n  },\n  enumerable: true\n});\nObject.defineProperty(LRUCache.prototype, 'maxAge', {\n  set: function set(mA) {\n    if (!mA || !(typeof mA === 'number') || mA < 0) {\n      mA = 0;\n    }\n\n    this[MAX_AGE] = mA;\n    trim(this);\n  },\n  get: function get() {\n    return this[MAX_AGE];\n  },\n  enumerable: true\n}); // resize the cache when the lengthCalculator changes.\n\nObject.defineProperty(LRUCache.prototype, 'lengthCalculator', {\n  set: function set(lC) {\n    if (typeof lC !== 'function') {\n      lC = naiveLength;\n    }\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC;\n      this[LENGTH] = 0;\n      this[LRU_LIST].forEach(function (hit) {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);\n        this[LENGTH] += hit.length;\n      }, this);\n    }\n\n    trim(this);\n  },\n  get: function get() {\n    return this[LENGTH_CALCULATOR];\n  },\n  enumerable: true\n});\nObject.defineProperty(LRUCache.prototype, 'length', {\n  get: function get() {\n    return this[LENGTH];\n  },\n  enumerable: true\n});\nObject.defineProperty(LRUCache.prototype, 'itemCount', {\n  get: function get() {\n    return this[LRU_LIST].length;\n  },\n  enumerable: true\n});\n\nLRUCache.prototype.rforEach = function (fn, thisp) {\n  thisp = thisp || this;\n\n  for (var walker = this[LRU_LIST].tail; walker !== null;) {\n    var prev = walker.prev;\n    forEachStep(this, fn, walker, thisp);\n    walker = prev;\n  }\n};\n\nfunction forEachStep(self, fn, node, thisp) {\n  var hit = node.value;\n\n  if (isStale(self, hit)) {\n    del(self, node);\n\n    if (!self[ALLOW_STALE]) {\n      hit = undefined;\n    }\n  }\n\n  if (hit) {\n    fn.call(thisp, hit.value, hit.key, self);\n  }\n}\n\nLRUCache.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this;\n\n  for (var walker = this[LRU_LIST].head; walker !== null;) {\n    var next = walker.next;\n    forEachStep(this, fn, walker, thisp);\n    walker = next;\n  }\n};\n\nLRUCache.prototype.keys = function () {\n  return this[LRU_LIST].toArray().map(function (k) {\n    return k.key;\n  }, this);\n};\n\nLRUCache.prototype.values = function () {\n  return this[LRU_LIST].toArray().map(function (k) {\n    return k.value;\n  }, this);\n};\n\nLRUCache.prototype.reset = function () {\n  if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {\n    this[LRU_LIST].forEach(function (hit) {\n      this[DISPOSE](hit.key, hit.value);\n    }, this);\n  }\n\n  this[CACHE] = new Map(); // hash of items by key\n\n  this[LRU_LIST] = new Yallist(); // list of items in order of use recency\n\n  this[LENGTH] = 0; // length of items in the list\n};\n\nLRUCache.prototype.dump = function () {\n  return this[LRU_LIST].map(function (hit) {\n    if (!isStale(this, hit)) {\n      return {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      };\n    }\n  }, this).toArray().filter(function (h) {\n    return h;\n  });\n};\n\nLRUCache.prototype.dumpLru = function () {\n  return this[LRU_LIST];\n};\n/* istanbul ignore next */\n\n\nLRUCache.prototype.inspect = function (n, opts) {\n  var str = 'LRUCache {';\n  var extras = false;\n  var as = this[ALLOW_STALE];\n\n  if (as) {\n    str += '\\n  allowStale: true';\n    extras = true;\n  }\n\n  var max = this[MAX];\n\n  if (max && max !== Infinity) {\n    if (extras) {\n      str += ',';\n    }\n\n    str += '\\n  max: ' + util.inspect(max, opts);\n    extras = true;\n  }\n\n  var maxAge = this[MAX_AGE];\n\n  if (maxAge) {\n    if (extras) {\n      str += ',';\n    }\n\n    str += '\\n  maxAge: ' + util.inspect(maxAge, opts);\n    extras = true;\n  }\n\n  var lc = this[LENGTH_CALCULATOR];\n\n  if (lc && lc !== naiveLength) {\n    if (extras) {\n      str += ',';\n    }\n\n    str += '\\n  length: ' + util.inspect(this[LENGTH], opts);\n    extras = true;\n  }\n\n  var didFirst = false;\n  this[LRU_LIST].forEach(function (item) {\n    if (didFirst) {\n      str += ',\\n  ';\n    } else {\n      if (extras) {\n        str += ',\\n';\n      }\n\n      didFirst = true;\n      str += '\\n  ';\n    }\n\n    var key = util.inspect(item.key).split('\\n').join('\\n  ');\n    var val = {\n      value: item.value\n    };\n\n    if (item.maxAge !== maxAge) {\n      val.maxAge = item.maxAge;\n    }\n\n    if (lc !== naiveLength) {\n      val.length = item.length;\n    }\n\n    if (isStale(this, item)) {\n      val.stale = true;\n    }\n\n    val = util.inspect(val, opts).split('\\n').join('\\n  ');\n    str += key + ' => ' + val;\n  });\n\n  if (didFirst || extras) {\n    str += '\\n';\n  }\n\n  str += '}';\n  return str;\n};\n\nLRUCache.prototype.set = function (key, value, maxAge) {\n  maxAge = maxAge || this[MAX_AGE];\n  var now = maxAge ? Date.now() : 0;\n  var len = this[LENGTH_CALCULATOR](value, key);\n\n  if (this[CACHE].has(key)) {\n    if (len > this[MAX]) {\n      del(this, this[CACHE].get(key));\n      return false;\n    }\n\n    var node = this[CACHE].get(key);\n    var item = node.value; // dispose of the old one before overwriting\n    // split out into 2 ifs for better coverage tracking\n\n    if (this[DISPOSE]) {\n      if (!this[NO_DISPOSE_ON_SET]) {\n        this[DISPOSE](key, item.value);\n      }\n    }\n\n    item.now = now;\n    item.maxAge = maxAge;\n    item.value = value;\n    this[LENGTH] += len - item.length;\n    item.length = len;\n    this.get(key);\n    trim(this);\n    return true;\n  }\n\n  var hit = new Entry(key, value, len, now, maxAge); // oversized objects fall out of cache automatically.\n\n  if (hit.length > this[MAX]) {\n    if (this[DISPOSE]) {\n      this[DISPOSE](key, value);\n    }\n\n    return false;\n  }\n\n  this[LENGTH] += hit.length;\n  this[LRU_LIST].unshift(hit);\n  this[CACHE].set(key, this[LRU_LIST].head);\n  trim(this);\n  return true;\n};\n\nLRUCache.prototype.has = function (key) {\n  if (!this[CACHE].has(key)) return false;\n  var hit = this[CACHE].get(key).value;\n\n  if (isStale(this, hit)) {\n    return false;\n  }\n\n  return true;\n};\n\nLRUCache.prototype.get = function (key) {\n  return get(this, key, true);\n};\n\nLRUCache.prototype.peek = function (key) {\n  return get(this, key, false);\n};\n\nLRUCache.prototype.pop = function () {\n  var node = this[LRU_LIST].tail;\n  if (!node) return null;\n  del(this, node);\n  return node.value;\n};\n\nLRUCache.prototype.del = function (key) {\n  del(this, this[CACHE].get(key));\n};\n\nLRUCache.prototype.load = function (arr) {\n  // reset the cache\n  this.reset();\n  var now = Date.now(); // A previous serialized cache has the most recent items first\n\n  for (var l = arr.length - 1; l >= 0; l--) {\n    var hit = arr[l];\n    var expiresAt = hit.e || 0;\n\n    if (expiresAt === 0) {\n      // the item was created without expiration in a non aged cache\n      this.set(hit.k, hit.v);\n    } else {\n      var maxAge = expiresAt - now; // dont add already expired items\n\n      if (maxAge > 0) {\n        this.set(hit.k, hit.v, maxAge);\n      }\n    }\n  }\n};\n\nLRUCache.prototype.prune = function () {\n  var self = this;\n  this[CACHE].forEach(function (value, key) {\n    get(self, key, false);\n  });\n};\n\nfunction get(self, key, doUse) {\n  var node = self[CACHE].get(key);\n\n  if (node) {\n    var hit = node.value;\n\n    if (isStale(self, hit)) {\n      del(self, node);\n      if (!self[ALLOW_STALE]) hit = undefined;\n    } else {\n      if (doUse) {\n        self[LRU_LIST].unshiftNode(node);\n      }\n    }\n\n    if (hit) hit = hit.value;\n  }\n\n  return hit;\n}\n\nfunction isStale(self, hit) {\n  if (!hit || !hit.maxAge && !self[MAX_AGE]) {\n    return false;\n  }\n\n  var stale = false;\n  var diff = Date.now() - hit.now;\n\n  if (hit.maxAge) {\n    stale = diff > hit.maxAge;\n  } else {\n    stale = self[MAX_AGE] && diff > self[MAX_AGE];\n  }\n\n  return stale;\n}\n\nfunction trim(self) {\n  if (self[LENGTH] > self[MAX]) {\n    for (var walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      var prev = walker.prev;\n      del(self, walker);\n      walker = prev;\n    }\n  }\n}\n\nfunction del(self, node) {\n  if (node) {\n    var hit = node.value;\n\n    if (self[DISPOSE]) {\n      self[DISPOSE](hit.key, hit.value);\n    }\n\n    self[LENGTH] -= hit.length;\n    self[CACHE].delete(hit.key);\n    self[LRU_LIST].removeNode(node);\n  }\n} // classy, since V8 prefers predictable objects.\n\n\nfunction Entry(key, value, length, now, maxAge) {\n  this.key = key;\n  this.value = value;\n  this.length = length;\n  this.now = now;\n  this.maxAge = maxAge || 0;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/lru-cache/index.js\n");

/***/ }),

/***/ "../../node_modules/process/browser.js":
/*!*********************************************!*\
  !*** ../../node_modules/process/browser.js ***!
  \*********************************************/
/***/ ((module) => {

eval("// shim for using process in browser\nvar process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\n\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n\n(function () {\n  try {\n    if (typeof setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n\n  try {\n    if (typeof clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\n\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  } // if setTimeout wasn't available but was latter defined\n\n\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\n\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  } // if clearTimeout wasn't available but was latter defined\n\n\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\n\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n\n  draining = false;\n\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n\n  if (queue.length) {\n    drainQueue();\n  }\n}\n\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n\n    queueIndex = -1;\n    len = queue.length;\n  }\n\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n  var args = new Array(arguments.length - 1);\n\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n\n  queue.push(new Item(fun, args));\n\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n}; // v8 likes predictible objects\n\n\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\n\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\n\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n  return [];\n};\n\nprocess.binding = function (name) {\n  throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n  return '/';\n};\n\nprocess.chdir = function (dir) {\n  throw new Error('process.chdir is not supported');\n};\n\nprocess.umask = function () {\n  return 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/process/browser.js\n");

/***/ }),

/***/ "../../node_modules/pseudomap/map.js":
/*!*******************************************!*\
  !*** ../../node_modules/pseudomap/map.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"../../node_modules/process/browser.js\");\nif (process.env.npm_package_name === 'pseudomap' && process.env.npm_lifecycle_script === 'test') process.env.TEST_PSEUDOMAP = 'true';\n\nif (typeof Map === 'function' && !process.env.TEST_PSEUDOMAP) {\n  module.exports = Map;\n} else {\n  module.exports = __webpack_require__(/*! ./pseudomap */ \"../../node_modules/pseudomap/pseudomap.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3BzZXVkb21hcC9tYXAuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi8uLi9ub2RlX21vZHVsZXMvcHNldWRvbWFwL21hcC5qcz83MDNjIl0sInNvdXJjZXNDb250ZW50IjpbImlmIChwcm9jZXNzLmVudi5ucG1fcGFja2FnZV9uYW1lID09PSAncHNldWRvbWFwJyAmJlxuICAgIHByb2Nlc3MuZW52Lm5wbV9saWZlY3ljbGVfc2NyaXB0ID09PSAndGVzdCcpXG4gIHByb2Nlc3MuZW52LlRFU1RfUFNFVURPTUFQID0gJ3RydWUnXG5cbmlmICh0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmICFwcm9jZXNzLmVudi5URVNUX1BTRVVET01BUCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IE1hcFxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3BzZXVkb21hcCcpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/pseudomap/map.js\n");

/***/ }),

/***/ "../../node_modules/pseudomap/pseudomap.js":
/*!*************************************************!*\
  !*** ../../node_modules/pseudomap/pseudomap.js ***!
  \*************************************************/
/***/ ((module) => {

eval("var hasOwnProperty = Object.prototype.hasOwnProperty;\nmodule.exports = PseudoMap;\n\nfunction PseudoMap(set) {\n  if (!(this instanceof PseudoMap)) // whyyyyyyy\n    throw new TypeError(\"Constructor PseudoMap requires 'new'\");\n  this.clear();\n\n  if (set) {\n    if (set instanceof PseudoMap || typeof Map === 'function' && set instanceof Map) set.forEach(function (value, key) {\n      this.set(key, value);\n    }, this);else if (Array.isArray(set)) set.forEach(function (kv) {\n      this.set(kv[0], kv[1]);\n    }, this);else throw new TypeError('invalid argument');\n  }\n}\n\nPseudoMap.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this;\n  Object.keys(this._data).forEach(function (k) {\n    if (k !== 'size') fn.call(thisp, this._data[k].value, this._data[k].key);\n  }, this);\n};\n\nPseudoMap.prototype.has = function (k) {\n  return !!find(this._data, k);\n};\n\nPseudoMap.prototype.get = function (k) {\n  var res = find(this._data, k);\n  return res && res.value;\n};\n\nPseudoMap.prototype.set = function (k, v) {\n  set(this._data, k, v);\n};\n\nPseudoMap.prototype.delete = function (k) {\n  var res = find(this._data, k);\n\n  if (res) {\n    delete this._data[res._index];\n    this._data.size--;\n  }\n};\n\nPseudoMap.prototype.clear = function () {\n  var data = Object.create(null);\n  data.size = 0;\n  Object.defineProperty(this, '_data', {\n    value: data,\n    enumerable: false,\n    configurable: true,\n    writable: false\n  });\n};\n\nObject.defineProperty(PseudoMap.prototype, 'size', {\n  get: function get() {\n    return this._data.size;\n  },\n  set: function set(n) {},\n  enumerable: true,\n  configurable: true\n});\n\nPseudoMap.prototype.values = PseudoMap.prototype.keys = PseudoMap.prototype.entries = function () {\n  throw new Error('iterators are not implemented in this version');\n}; // Either identical, or both NaN\n\n\nfunction same(a, b) {\n  return a === b || a !== a && b !== b;\n}\n\nfunction Entry(k, v, i) {\n  this.key = k;\n  this.value = v;\n  this._index = i;\n}\n\nfunction find(data, k) {\n  for (var i = 0, s = '_' + k, key = s; hasOwnProperty.call(data, key); key = s + i++) {\n    if (same(data[key].key, k)) return data[key];\n  }\n}\n\nfunction set(data, k, v) {\n  for (var i = 0, s = '_' + k, key = s; hasOwnProperty.call(data, key); key = s + i++) {\n    if (same(data[key].key, k)) {\n      data[key].value = v;\n      return;\n    }\n  }\n\n  data.size++;\n  data[key] = new Entry(k, v, key);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/pseudomap/pseudomap.js\n");

/***/ }),

/***/ "../../node_modules/stackframe/stackframe.js":
/*!***************************************************!*\
  !*** ../../node_modules/stackframe/stackframe.js ***!
  \***************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (root, factory) {\n  'use strict'; // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n  /* istanbul ignore next */\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  'use strict';\n\n  function _isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n  }\n\n  function _getter(p) {\n    return function () {\n      return this[p];\n    };\n  }\n\n  var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n  var numericProps = ['columnNumber', 'lineNumber'];\n  var stringProps = ['fileName', 'functionName', 'source'];\n  var arrayProps = ['args'];\n  var props = booleanProps.concat(numericProps, stringProps, arrayProps);\n\n  function StackFrame(obj) {\n    if (!obj) return;\n\n    for (var i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== undefined) {\n        this['set' + _capitalize(props[i])](obj[props[i]]);\n      }\n    }\n  }\n\n  StackFrame.prototype = {\n    getArgs: function getArgs() {\n      return this.args;\n    },\n    setArgs: function setArgs(v) {\n      if (Object.prototype.toString.call(v) !== '[object Array]') {\n        throw new TypeError('Args must be an Array');\n      }\n\n      this.args = v;\n    },\n    getEvalOrigin: function getEvalOrigin() {\n      return this.evalOrigin;\n    },\n    setEvalOrigin: function setEvalOrigin(v) {\n      if (v instanceof StackFrame) {\n        this.evalOrigin = v;\n      } else if (v instanceof Object) {\n        this.evalOrigin = new StackFrame(v);\n      } else {\n        throw new TypeError('Eval Origin must be an Object or StackFrame');\n      }\n    },\n    toString: function toString() {\n      var fileName = this.getFileName() || '';\n      var lineNumber = this.getLineNumber() || '';\n      var columnNumber = this.getColumnNumber() || '';\n      var functionName = this.getFunctionName() || '';\n\n      if (this.getIsEval()) {\n        if (fileName) {\n          return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n        }\n\n        return '[eval]:' + lineNumber + ':' + columnNumber;\n      }\n\n      if (functionName) {\n        return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n      }\n\n      return fileName + ':' + lineNumber + ':' + columnNumber;\n    }\n  };\n\n  StackFrame.fromString = function StackFrame$$fromString(str) {\n    var argsStartIndex = str.indexOf('(');\n    var argsEndIndex = str.lastIndexOf(')');\n    var functionName = str.substring(0, argsStartIndex);\n    var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');\n    var locationString = str.substring(argsEndIndex + 1);\n\n    if (locationString.indexOf('@') === 0) {\n      var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, '');\n      var fileName = parts[1];\n      var lineNumber = parts[2];\n      var columnNumber = parts[3];\n    }\n\n    return new StackFrame({\n      functionName: functionName,\n      args: args || undefined,\n      fileName: fileName,\n      lineNumber: lineNumber || undefined,\n      columnNumber: columnNumber || undefined\n    });\n  };\n\n  for (var i = 0; i < booleanProps.length; i++) {\n    StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n\n    StackFrame.prototype['set' + _capitalize(booleanProps[i])] = function (p) {\n      return function (v) {\n        this[p] = Boolean(v);\n      };\n    }(booleanProps[i]);\n  }\n\n  for (var j = 0; j < numericProps.length; j++) {\n    StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n\n    StackFrame.prototype['set' + _capitalize(numericProps[j])] = function (p) {\n      return function (v) {\n        if (!_isNumber(v)) {\n          throw new TypeError(p + ' must be a Number');\n        }\n\n        this[p] = Number(v);\n      };\n    }(numericProps[j]);\n  }\n\n  for (var k = 0; k < stringProps.length; k++) {\n    StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n\n    StackFrame.prototype['set' + _capitalize(stringProps[k])] = function (p) {\n      return function (v) {\n        this[p] = String(v);\n      };\n    }(stringProps[k]);\n  }\n\n  return StackFrame;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3N0YWNrZnJhbWUvc3RhY2tmcmFtZS5qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7O0FBR0E7O0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBS0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUF2Q0E7O0FBMENBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uLy4uL25vZGVfbW9kdWxlcy9zdGFja2ZyYW1lL3N0YWNrZnJhbWUuanM/ZjljZCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvLyBVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24gKFVNRCkgdG8gc3VwcG9ydCBBTUQsIENvbW1vbkpTL05vZGUuanMsIFJoaW5vLCBhbmQgYnJvd3NlcnMuXG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKCdzdGFja2ZyYW1lJywgW10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QuU3RhY2tGcmFtZSA9IGZhY3RvcnkoKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBmdW5jdGlvbiBfaXNOdW1iZXIobikge1xuICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9jYXBpdGFsaXplKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZ2V0dGVyKHApIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbcF07XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGJvb2xlYW5Qcm9wcyA9IFsnaXNDb25zdHJ1Y3RvcicsICdpc0V2YWwnLCAnaXNOYXRpdmUnLCAnaXNUb3BsZXZlbCddO1xuICAgIHZhciBudW1lcmljUHJvcHMgPSBbJ2NvbHVtbk51bWJlcicsICdsaW5lTnVtYmVyJ107XG4gICAgdmFyIHN0cmluZ1Byb3BzID0gWydmaWxlTmFtZScsICdmdW5jdGlvbk5hbWUnLCAnc291cmNlJ107XG4gICAgdmFyIGFycmF5UHJvcHMgPSBbJ2FyZ3MnXTtcblxuICAgIHZhciBwcm9wcyA9IGJvb2xlYW5Qcm9wcy5jb25jYXQobnVtZXJpY1Byb3BzLCBzdHJpbmdQcm9wcywgYXJyYXlQcm9wcyk7XG5cbiAgICBmdW5jdGlvbiBTdGFja0ZyYW1lKG9iaikge1xuICAgICAgICBpZiAoIW9iaikgcmV0dXJuO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAob2JqW3Byb3BzW2ldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpc1snc2V0JyArIF9jYXBpdGFsaXplKHByb3BzW2ldKV0ob2JqW3Byb3BzW2ldXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTdGFja0ZyYW1lLnByb3RvdHlwZSA9IHtcbiAgICAgICAgZ2V0QXJnczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcmdzO1xuICAgICAgICB9LFxuICAgICAgICBzZXRBcmdzOiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJncyBtdXN0IGJlIGFuIEFycmF5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFyZ3MgPSB2O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEV2YWxPcmlnaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZhbE9yaWdpbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0RXZhbE9yaWdpbjogZnVuY3Rpb24odikge1xuICAgICAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBTdGFja0ZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmFsT3JpZ2luID0gdjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodiBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZhbE9yaWdpbiA9IG5ldyBTdGFja0ZyYW1lKHYpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFdmFsIE9yaWdpbiBtdXN0IGJlIGFuIE9iamVjdCBvciBTdGFja0ZyYW1lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gdGhpcy5nZXRGaWxlTmFtZSgpIHx8ICcnO1xuICAgICAgICAgICAgdmFyIGxpbmVOdW1iZXIgPSB0aGlzLmdldExpbmVOdW1iZXIoKSB8fCAnJztcbiAgICAgICAgICAgIHZhciBjb2x1bW5OdW1iZXIgPSB0aGlzLmdldENvbHVtbk51bWJlcigpIHx8ICcnO1xuICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IHRoaXMuZ2V0RnVuY3Rpb25OYW1lKCkgfHwgJyc7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRJc0V2YWwoKSkge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tldmFsXSAoJyArIGZpbGVOYW1lICsgJzonICsgbGluZU51bWJlciArICc6JyArIGNvbHVtbk51bWJlciArICcpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbZXZhbF06JyArIGxpbmVOdW1iZXIgKyAnOicgKyBjb2x1bW5OdW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZnVuY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uTmFtZSArICcgKCcgKyBmaWxlTmFtZSArICc6JyArIGxpbmVOdW1iZXIgKyAnOicgKyBjb2x1bW5OdW1iZXIgKyAnKSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJzonICsgY29sdW1uTnVtYmVyO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFN0YWNrRnJhbWUuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIFN0YWNrRnJhbWUkJGZyb21TdHJpbmcoc3RyKSB7XG4gICAgICAgIHZhciBhcmdzU3RhcnRJbmRleCA9IHN0ci5pbmRleE9mKCcoJyk7XG4gICAgICAgIHZhciBhcmdzRW5kSW5kZXggPSBzdHIubGFzdEluZGV4T2YoJyknKTtcblxuICAgICAgICB2YXIgZnVuY3Rpb25OYW1lID0gc3RyLnN1YnN0cmluZygwLCBhcmdzU3RhcnRJbmRleCk7XG4gICAgICAgIHZhciBhcmdzID0gc3RyLnN1YnN0cmluZyhhcmdzU3RhcnRJbmRleCArIDEsIGFyZ3NFbmRJbmRleCkuc3BsaXQoJywnKTtcbiAgICAgICAgdmFyIGxvY2F0aW9uU3RyaW5nID0gc3RyLnN1YnN0cmluZyhhcmdzRW5kSW5kZXggKyAxKTtcblxuICAgICAgICBpZiAobG9jYXRpb25TdHJpbmcuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSAvQCguKz8pKD86OihcXGQrKSk/KD86OihcXGQrKSk/JC8uZXhlYyhsb2NhdGlvblN0cmluZywgJycpO1xuICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gcGFydHNbMV07XG4gICAgICAgICAgICB2YXIgbGluZU51bWJlciA9IHBhcnRzWzJdO1xuICAgICAgICAgICAgdmFyIGNvbHVtbk51bWJlciA9IHBhcnRzWzNdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBTdGFja0ZyYW1lKHtcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogZnVuY3Rpb25OYW1lLFxuICAgICAgICAgICAgYXJnczogYXJncyB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICBmaWxlTmFtZTogZmlsZU5hbWUsXG4gICAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbHVtbk51bWJlcjogY29sdW1uTnVtYmVyIHx8IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib29sZWFuUHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgU3RhY2tGcmFtZS5wcm90b3R5cGVbJ2dldCcgKyBfY2FwaXRhbGl6ZShib29sZWFuUHJvcHNbaV0pXSA9IF9nZXR0ZXIoYm9vbGVhblByb3BzW2ldKTtcbiAgICAgICAgU3RhY2tGcmFtZS5wcm90b3R5cGVbJ3NldCcgKyBfY2FwaXRhbGl6ZShib29sZWFuUHJvcHNbaV0pXSA9IChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICAgIHRoaXNbcF0gPSBCb29sZWFuKHYpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkoYm9vbGVhblByb3BzW2ldKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG51bWVyaWNQcm9wcy5sZW5ndGg7IGorKykge1xuICAgICAgICBTdGFja0ZyYW1lLnByb3RvdHlwZVsnZ2V0JyArIF9jYXBpdGFsaXplKG51bWVyaWNQcm9wc1tqXSldID0gX2dldHRlcihudW1lcmljUHJvcHNbal0pO1xuICAgICAgICBTdGFja0ZyYW1lLnByb3RvdHlwZVsnc2V0JyArIF9jYXBpdGFsaXplKG51bWVyaWNQcm9wc1tqXSldID0gKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfaXNOdW1iZXIodikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihwICsgJyBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNbcF0gPSBOdW1iZXIodik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KShudW1lcmljUHJvcHNbal0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc3RyaW5nUHJvcHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgU3RhY2tGcmFtZS5wcm90b3R5cGVbJ2dldCcgKyBfY2FwaXRhbGl6ZShzdHJpbmdQcm9wc1trXSldID0gX2dldHRlcihzdHJpbmdQcm9wc1trXSk7XG4gICAgICAgIFN0YWNrRnJhbWUucHJvdG90eXBlWydzZXQnICsgX2NhcGl0YWxpemUoc3RyaW5nUHJvcHNba10pXSA9IChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICAgIHRoaXNbcF0gPSBTdHJpbmcodik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KShzdHJpbmdQcm9wc1trXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0YWNrRnJhbWU7XG59KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/stackframe/stackframe.js\n");

/***/ }),

/***/ "../../node_modules/util/node_modules/inherits/inherits_browser.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/util/node_modules/inherits/inherits_browser.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n\n    var TempCtor = function TempCtor() {};\n\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi8uLi9ub2RlX21vZHVsZXMvdXRpbC9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz9lNDQ1Il0sIm5hbWVzIjpbIk9iamVjdCIsImNyZWF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmhlcml0cyIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiVGVtcEN0b3IiXSwibWFwcGluZ3MiOiJBQUFBLElBQUksT0FBT0EsTUFBTSxDQUFDQyxNQUFkLEtBQXlCLFVBQTdCLEVBQXlDO0FBQ3ZDO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQWtCQyxJQUFsQixFQUF3QkMsU0FBeEIsRUFBbUM7QUFDbERELElBQUFBLElBQUksQ0FBQ0UsTUFBTCxHQUFjRCxTQUFkO0FBQ0FELElBQUFBLElBQUksQ0FBQ0csU0FBTCxHQUFpQlIsTUFBTSxDQUFDQyxNQUFQLENBQWNLLFNBQVMsQ0FBQ0UsU0FBeEIsRUFBbUM7QUFDbERDLE1BQUFBLFdBQVcsRUFBRTtBQUNYQyxRQUFBQSxLQUFLLEVBQUVMLElBREk7QUFFWE0sUUFBQUEsVUFBVSxFQUFFLEtBRkQ7QUFHWEMsUUFBQUEsUUFBUSxFQUFFLElBSEM7QUFJWEMsUUFBQUEsWUFBWSxFQUFFO0FBSkg7QUFEcUMsS0FBbkMsQ0FBakI7QUFRRCxHQVZEO0FBV0QsQ0FiRCxNQWFPO0FBQ0w7QUFDQVgsRUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFFBQVQsQ0FBa0JDLElBQWxCLEVBQXdCQyxTQUF4QixFQUFtQztBQUNsREQsSUFBQUEsSUFBSSxDQUFDRSxNQUFMLEdBQWNELFNBQWQ7O0FBQ0EsUUFBSVEsUUFBUSxHQUFHLFNBQVhBLFFBQVcsR0FBWSxDQUFFLENBQTdCOztBQUNBQSxJQUFBQSxRQUFRLENBQUNOLFNBQVQsR0FBcUJGLFNBQVMsQ0FBQ0UsU0FBL0I7QUFDQUgsSUFBQUEsSUFBSSxDQUFDRyxTQUFMLEdBQWlCLElBQUlNLFFBQUosRUFBakI7QUFDQVQsSUFBQUEsSUFBSSxDQUFDRyxTQUFMLENBQWVDLFdBQWYsR0FBNkJKLElBQTdCO0FBQ0QsR0FORDtBQU9EIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iXSwiZmlsZSI6Ii4uLy4uL25vZGVfbW9kdWxlcy91dGlsL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/util/node_modules/inherits/inherits_browser.js\n");

/***/ }),

/***/ "../../node_modules/util/support/isBufferBrowser.js":
/*!**********************************************************!*\
  !*** ../../node_modules/util/support/isBufferBrowser.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nmodule.exports = function isBuffer(arg) {\n  return arg && _typeof(arg) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi8uLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcz8xNDZhIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc0J1ZmZlciIsImFyZyIsImNvcHkiLCJmaWxsIiwicmVhZFVJbnQ4Il0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQkMsR0FBbEIsRUFBdUI7QUFDdEMsU0FBT0EsR0FBRyxJQUFJLFFBQU9BLEdBQVAsTUFBZSxRQUF0QixJQUNGLE9BQU9BLEdBQUcsQ0FBQ0MsSUFBWCxLQUFvQixVQURsQixJQUVGLE9BQU9ELEdBQUcsQ0FBQ0UsSUFBWCxLQUFvQixVQUZsQixJQUdGLE9BQU9GLEdBQUcsQ0FBQ0csU0FBWCxLQUF5QixVQUg5QjtBQUlELENBTEQiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59Il0sImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/util/support/isBufferBrowser.js\n");

/***/ }),

/***/ "../../node_modules/util/util.js":
/*!***************************************!*\
  !*** ../../node_modules/util/util.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"../../node_modules/process/browser.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar formatRegExp = /%[sdj%]/g;\n\nexports.format = function (f) {\n  if (!isString(f)) {\n    var objects = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function (x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n\n    switch (x) {\n      case '%s':\n        return String(args[i++]);\n\n      case '%d':\n        return Number(args[i++]);\n\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n\n      default:\n        return x;\n    }\n  });\n\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n\n  return str;\n}; // Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\n\n\nexports.deprecate = function (fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function () {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n\n      warned = true;\n    }\n\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\nvar debugs = {};\nvar debugEnviron;\n\nexports.debuglog = function (set) {\n  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n\n      debugs[set] = function () {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function () {};\n    }\n  }\n\n  return debugs[set];\n};\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n\n/* legacy: obj, showHidden, depth, colors*/\n\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  }; // legacy...\n\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  } // set default options\n\n\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\nexports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\ninspect.colors = {\n  'bold': [1, 22],\n  'italic': [3, 23],\n  'underline': [4, 24],\n  'inverse': [7, 27],\n  'white': [37, 39],\n  'grey': [90, 39],\n  'black': [30, 39],\n  'blue': [34, 39],\n  'cyan': [36, 39],\n  'green': [32, 39],\n  'magenta': [35, 39],\n  'red': [31, 39],\n  'yellow': [33, 39]\n}; // Don't use 'blue' not visible on cmd.exe\n\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return \"\\x1B[\" + inspect.colors[style][0] + 'm' + str + \"\\x1B[\" + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n  array.forEach(function (val, idx) {\n    hash[val] = true;\n  });\n  return hash;\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n  !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n\n    return ret;\n  } // Primitive types cannot have properties\n\n\n  var primitive = formatPrimitive(ctx, value);\n\n  if (primitive) {\n    return primitive;\n  } // Look up the keys of the object.\n\n\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  } // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\n\n  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  } // Some type of object without properties can be shortcutted.\n\n\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '',\n      array = false,\n      braces = ['{', '}']; // Make Array say that they are Array\n\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  } // Make functions say that they are functions\n\n\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  } // Make RegExps say that they are RegExps\n\n\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  } // Make dates with properties first say the date\n\n\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  } // Make error with message first say the error\n\n\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n  var output;\n\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function (key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');\n\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n\n  if (isNumber(value)) return ctx.stylize('' + value, 'number');\n  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is \"object\", so special case here.\n\n  if (isNull(value)) return ctx.stylize('null', 'null');\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function (key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || {\n    value: value[key]\n  };\n\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function (line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function (line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n\n    name = JSON.stringify('' + key);\n\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function (prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] + (base === '' ? '' : base + '\\n ') + ' ' + output.join(',\\n  ') + ' ' + braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n} // NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\n\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return _typeof(arg) === 'symbol';\n}\n\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return _typeof(arg) === 'object' && arg !== null;\n}\n\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol\n  typeof arg === 'undefined';\n}\n\nexports.isPrimitive = isPrimitive;\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"../../node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34\n\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n} // log is just a thin wrapper to console.log that prepends a timestamp\n\n\nexports.log = function () {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\n\n\nexports.inherits = __webpack_require__(/*! inherits */ \"../../node_modules/util/node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function (origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n  var keys = Object.keys(add);\n  var i = keys.length;\n\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/util/util.js\n");

/***/ }),

/***/ "../../node_modules/yallist/yallist.js":
/*!*********************************************!*\
  !*** ../../node_modules/yallist/yallist.js ***!
  \*********************************************/
/***/ ((module) => {

eval("module.exports = Yallist;\nYallist.Node = Node;\nYallist.create = Yallist;\n\nfunction Yallist(list) {\n  var self = this;\n\n  if (!(self instanceof Yallist)) {\n    self = new Yallist();\n  }\n\n  self.tail = null;\n  self.head = null;\n  self.length = 0;\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item);\n    });\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i]);\n    }\n  }\n\n  return self;\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list');\n  }\n\n  var next = node.next;\n  var prev = node.prev;\n\n  if (next) {\n    next.prev = prev;\n  }\n\n  if (prev) {\n    prev.next = next;\n  }\n\n  if (node === this.head) {\n    this.head = next;\n  }\n\n  if (node === this.tail) {\n    this.tail = prev;\n  }\n\n  node.list.length--;\n  node.next = null;\n  node.prev = null;\n  node.list = null;\n};\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return;\n  }\n\n  if (node.list) {\n    node.list.removeNode(node);\n  }\n\n  var head = this.head;\n  node.list = this;\n  node.next = head;\n\n  if (head) {\n    head.prev = node;\n  }\n\n  this.head = node;\n\n  if (!this.tail) {\n    this.tail = node;\n  }\n\n  this.length++;\n};\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return;\n  }\n\n  if (node.list) {\n    node.list.removeNode(node);\n  }\n\n  var tail = this.tail;\n  node.list = this;\n  node.prev = tail;\n\n  if (tail) {\n    tail.next = node;\n  }\n\n  this.tail = node;\n\n  if (!this.head) {\n    this.head = node;\n  }\n\n  this.length++;\n};\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i]);\n  }\n\n  return this.length;\n};\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i]);\n  }\n\n  return this.length;\n};\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined;\n  }\n\n  var res = this.tail.value;\n  this.tail = this.tail.prev;\n\n  if (this.tail) {\n    this.tail.next = null;\n  } else {\n    this.head = null;\n  }\n\n  this.length--;\n  return res;\n};\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined;\n  }\n\n  var res = this.head.value;\n  this.head = this.head.next;\n\n  if (this.head) {\n    this.head.prev = null;\n  } else {\n    this.tail = null;\n  }\n\n  this.length--;\n  return res;\n};\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this;\n\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this);\n    walker = walker.next;\n  }\n};\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this;\n\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this);\n    walker = walker.prev;\n  }\n};\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next;\n  }\n\n  if (i === n && walker !== null) {\n    return walker.value;\n  }\n};\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev;\n  }\n\n  if (i === n && walker !== null) {\n    return walker.value;\n  }\n};\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this;\n  var res = new Yallist();\n\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this));\n    walker = walker.next;\n  }\n\n  return res;\n};\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this;\n  var res = new Yallist();\n\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this));\n    walker = walker.prev;\n  }\n\n  return res;\n};\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc;\n  var walker = this.head;\n\n  if (arguments.length > 1) {\n    acc = initial;\n  } else if (this.head) {\n    walker = this.head.next;\n    acc = this.head.value;\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value');\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i);\n    walker = walker.next;\n  }\n\n  return acc;\n};\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc;\n  var walker = this.tail;\n\n  if (arguments.length > 1) {\n    acc = initial;\n  } else if (this.tail) {\n    walker = this.tail.prev;\n    acc = this.tail.value;\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value');\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i);\n    walker = walker.prev;\n  }\n\n  return acc;\n};\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length);\n\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value;\n    walker = walker.next;\n  }\n\n  return arr;\n};\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length);\n\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value;\n    walker = walker.prev;\n  }\n\n  return arr;\n};\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length;\n\n  if (to < 0) {\n    to += this.length;\n  }\n\n  from = from || 0;\n\n  if (from < 0) {\n    from += this.length;\n  }\n\n  var ret = new Yallist();\n\n  if (to < from || to < 0) {\n    return ret;\n  }\n\n  if (from < 0) {\n    from = 0;\n  }\n\n  if (to > this.length) {\n    to = this.length;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next;\n  }\n\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value);\n  }\n\n  return ret;\n};\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length;\n\n  if (to < 0) {\n    to += this.length;\n  }\n\n  from = from || 0;\n\n  if (from < 0) {\n    from += this.length;\n  }\n\n  var ret = new Yallist();\n\n  if (to < from || to < 0) {\n    return ret;\n  }\n\n  if (from < 0) {\n    from = 0;\n  }\n\n  if (to > this.length) {\n    to = this.length;\n  }\n\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev;\n  }\n\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value);\n  }\n\n  return ret;\n};\n\nYallist.prototype.reverse = function () {\n  var head = this.head;\n  var tail = this.tail;\n\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev;\n    walker.prev = walker.next;\n    walker.next = p;\n  }\n\n  this.head = tail;\n  this.tail = head;\n  return this;\n};\n\nfunction push(self, item) {\n  self.tail = new Node(item, self.tail, null, self);\n\n  if (!self.head) {\n    self.head = self.tail;\n  }\n\n  self.length++;\n}\n\nfunction unshift(self, item) {\n  self.head = new Node(item, null, self.head, self);\n\n  if (!self.tail) {\n    self.tail = self.head;\n  }\n\n  self.length++;\n}\n\nfunction Node(value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list);\n  }\n\n  this.list = list;\n  this.value = value;\n\n  if (prev) {\n    prev.next = this;\n    this.prev = prev;\n  } else {\n    this.prev = null;\n  }\n\n  if (next) {\n    next.prev = this;\n    this.next = next;\n  } else {\n    this.next = null;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/yallist/yallist.js\n");

/***/ }),

/***/ "./src/backend.js":
/*!************************!*\
  !*** ./src/backend.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"connectToDevTools\": () => (/* binding */ connectToDevTools),\n/* harmony export */   \"connectWithCustomMessagingProtocol\": () => (/* binding */ connectWithCustomMessagingProtocol),\n/* harmony export */   \"initialize\": () => (/* binding */ initialize)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_backend_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/backend/agent */ \"../react-devtools-shared/src/backend/agent.js\");\n/* harmony import */ var react_devtools_shared_src_bridge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-devtools-shared/src/bridge */ \"../react-devtools-shared/src/bridge.js\");\n/* harmony import */ var react_devtools_shared_src_hook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-devtools-shared/src/hook */ \"../react-devtools-shared/src/hook.js\");\n/* harmony import */ var react_devtools_shared_src_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-devtools-shared/src/backend */ \"../react-devtools-shared/src/backend/index.js\");\n/* harmony import */ var react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-devtools-shared/src/constants */ \"../react-devtools-shared/src/constants.js\");\n/* harmony import */ var react_devtools_shared_src_backend_NativeStyleEditor_setupNativeStyleEditor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-devtools-shared/src/backend/NativeStyleEditor/setupNativeStyleEditor */ \"../react-devtools-shared/src/backend/NativeStyleEditor/setupNativeStyleEditor.js\");\n/* harmony import */ var react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-devtools-shared/src/utils */ \"../react-devtools-shared/src/utils.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\n\n\n\nvar savedComponentFilters = (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_6__.getDefaultComponentFilters)();\n\nfunction debug(methodName) {\n  if (react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_4__.__DEBUG__) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_console = console).log.apply(_console, [\"%c[core/backend] %c\".concat(methodName), 'color: teal; font-weight: bold;', 'font-weight: bold;'].concat(args));\n  }\n}\n\nfunction initialize(maybeSettingsOrSettingsPromise) {\n  var shouldStartProfilingNow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var profilingSettings = arguments.length > 2 ? arguments[2] : undefined;\n  (0,react_devtools_shared_src_hook__WEBPACK_IMPORTED_MODULE_2__.installHook)(window, maybeSettingsOrSettingsPromise, shouldStartProfilingNow, profilingSettings);\n}\nfunction connectToDevTools(options) {\n  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n  if (hook == null) {\n    // DevTools didn't get injected into this page (maybe b'c of the contentType).\n    return;\n  }\n\n  var _ref = options || {},\n      _ref$host = _ref.host,\n      host = _ref$host === void 0 ? 'localhost' : _ref$host,\n      nativeStyleEditorValidAttributes = _ref.nativeStyleEditorValidAttributes,\n      _ref$useHttps = _ref.useHttps,\n      useHttps = _ref$useHttps === void 0 ? false : _ref$useHttps,\n      _ref$port = _ref.port,\n      port = _ref$port === void 0 ? 8097 : _ref$port,\n      websocket = _ref.websocket,\n      _ref$resolveRNStyle = _ref.resolveRNStyle,\n      resolveRNStyle = _ref$resolveRNStyle === void 0 ? null : _ref$resolveRNStyle,\n      _ref$retryConnectionD = _ref.retryConnectionDelay,\n      retryConnectionDelay = _ref$retryConnectionD === void 0 ? 2000 : _ref$retryConnectionD,\n      _ref$isAppActive = _ref.isAppActive,\n      isAppActive = _ref$isAppActive === void 0 ? function () {\n    return true;\n  } : _ref$isAppActive,\n      onSettingsUpdated = _ref.onSettingsUpdated,\n      _ref$isReloadAndProfi = _ref.isReloadAndProfileSupported,\n      isReloadAndProfileSupported = _ref$isReloadAndProfi === void 0 ? (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_6__.getIsReloadAndProfileSupported)() : _ref$isReloadAndProfi,\n      isProfiling = _ref.isProfiling,\n      onReloadAndProfile = _ref.onReloadAndProfile,\n      onReloadAndProfileFlagsReset = _ref.onReloadAndProfileFlagsReset;\n\n  var protocol = useHttps ? 'wss' : 'ws';\n  var retryTimeoutID = null;\n\n  function scheduleRetry() {\n    if (retryTimeoutID === null) {\n      // Two seconds because RN had issues with quick retries.\n      retryTimeoutID = setTimeout(function () {\n        return connectToDevTools(options);\n      }, retryConnectionDelay);\n    }\n  }\n\n  if (!isAppActive()) {\n    // If the app is in background, maybe retry later.\n    // Don't actually attempt to connect until we're in foreground.\n    scheduleRetry();\n    return;\n  }\n\n  var bridge = null;\n  var messageListeners = [];\n  var uri = protocol + '://' + host + ':' + port; // If existing websocket is passed, use it.\n  // This is necessary to support our custom integrations.\n  // See D6251744.\n\n  var ws = websocket ? websocket : new window.WebSocket(uri);\n  ws.onclose = handleClose;\n  ws.onerror = handleFailed;\n  ws.onmessage = handleMessage;\n\n  ws.onopen = function () {\n    bridge = new react_devtools_shared_src_bridge__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n      listen: function listen(fn) {\n        messageListeners.push(fn);\n        return function () {\n          var index = messageListeners.indexOf(fn);\n\n          if (index >= 0) {\n            messageListeners.splice(index, 1);\n          }\n        };\n      },\n      send: function send(event, payload, transferable) {\n        if (ws.readyState === ws.OPEN) {\n          if (react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_4__.__DEBUG__) {\n            debug('wall.send()', event, payload);\n          }\n\n          ws.send(JSON.stringify({\n            event: event,\n            payload: payload\n          }));\n        } else {\n          if (react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_4__.__DEBUG__) {\n            debug('wall.send()', 'Shutting down bridge because of closed WebSocket connection');\n          }\n\n          if (bridge !== null) {\n            bridge.shutdown();\n          }\n\n          scheduleRetry();\n        }\n      }\n    });\n    bridge.addListener('updateComponentFilters', function (componentFilters) {\n      // Save filter changes in memory, in case DevTools is reloaded.\n      // In that case, the renderer will already be using the updated values.\n      // We'll lose these in between backend reloads but that can't be helped.\n      savedComponentFilters = componentFilters;\n    }); // The renderer interface doesn't read saved component filters directly,\n    // because they are generally stored in localStorage within the context of the extension.\n    // Because of this it relies on the extension to pass filters.\n    // In the case of the standalone DevTools being used with a website,\n    // saved filters are injected along with the backend script tag so we shouldn't override them here.\n    // This injection strategy doesn't work for React Native though.\n    // Ideally the backend would save the filters itself, but RN doesn't provide a sync storage solution.\n    // So for now we just fall back to using the default filters...\n\n    if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ == null) {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      bridge.send('overrideComponentFilters', savedComponentFilters);\n    } // TODO (npm-packages) Warn if \"isBackendStorageAPISupported\"\n    // $FlowFixMe[incompatible-call] found when upgrading Flow\n\n\n    var agent = new react_devtools_shared_src_backend_agent__WEBPACK_IMPORTED_MODULE_0__[\"default\"](bridge, isProfiling, onReloadAndProfile);\n\n    if (typeof onReloadAndProfileFlagsReset === 'function') {\n      onReloadAndProfileFlagsReset();\n    }\n\n    if (onSettingsUpdated != null) {\n      agent.addListener('updateHookSettings', onSettingsUpdated);\n    }\n\n    agent.addListener('shutdown', function () {\n      if (onSettingsUpdated != null) {\n        agent.removeListener('updateHookSettings', onSettingsUpdated);\n      } // If we received 'shutdown' from `agent`, we assume the `bridge` is already shutting down,\n      // and that caused the 'shutdown' event on the `agent`, so we don't need to call `bridge.shutdown()` here.\n\n\n      hook.emit('shutdown');\n    });\n    (0,react_devtools_shared_src_backend__WEBPACK_IMPORTED_MODULE_3__.initBackend)(hook, agent, window, isReloadAndProfileSupported); // Setup React Native style editor if the environment supports it.\n\n    if (resolveRNStyle != null || hook.resolveRNStyle != null) {\n      (0,react_devtools_shared_src_backend_NativeStyleEditor_setupNativeStyleEditor__WEBPACK_IMPORTED_MODULE_5__[\"default\"])( // $FlowFixMe[incompatible-call] found when upgrading Flow\n      bridge, agent, resolveRNStyle || hook.resolveRNStyle, nativeStyleEditorValidAttributes || hook.nativeStyleEditorValidAttributes || null);\n    } else {\n      // Otherwise listen to detect if the environment later supports it.\n      // For example, Flipper does not eagerly inject these values.\n      // Instead it relies on the React Native Inspector to lazily inject them.\n      var lazyResolveRNStyle;\n      var lazyNativeStyleEditorValidAttributes;\n\n      var initAfterTick = function initAfterTick() {\n        if (bridge !== null) {\n          (0,react_devtools_shared_src_backend_NativeStyleEditor_setupNativeStyleEditor__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(bridge, agent, lazyResolveRNStyle, lazyNativeStyleEditorValidAttributes);\n        }\n      };\n\n      if (!hook.hasOwnProperty('resolveRNStyle')) {\n        Object.defineProperty(hook, 'resolveRNStyle', {\n          enumerable: false,\n          get: function get() {\n            return lazyResolveRNStyle;\n          },\n          set: function set(value) {\n            lazyResolveRNStyle = value;\n            initAfterTick();\n          }\n        });\n      }\n\n      if (!hook.hasOwnProperty('nativeStyleEditorValidAttributes')) {\n        Object.defineProperty(hook, 'nativeStyleEditorValidAttributes', {\n          enumerable: false,\n          get: function get() {\n            return lazyNativeStyleEditorValidAttributes;\n          },\n          set: function set(value) {\n            lazyNativeStyleEditorValidAttributes = value;\n            initAfterTick();\n          }\n        });\n      }\n    }\n  };\n\n  function handleClose() {\n    if (react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_4__.__DEBUG__) {\n      debug('WebSocket.onclose');\n    }\n\n    if (bridge !== null) {\n      bridge.emit('shutdown');\n    }\n\n    scheduleRetry();\n  }\n\n  function handleFailed() {\n    if (react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_4__.__DEBUG__) {\n      debug('WebSocket.onerror');\n    }\n\n    scheduleRetry();\n  }\n\n  function handleMessage(event) {\n    var data;\n\n    try {\n      if (typeof event.data === 'string') {\n        data = JSON.parse(event.data);\n\n        if (react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_4__.__DEBUG__) {\n          debug('WebSocket.onmessage', data);\n        }\n      } else {\n        throw Error();\n      }\n    } catch (e) {\n      console.error('[React DevTools] Failed to parse JSON: ' + event.data);\n      return;\n    }\n\n    messageListeners.forEach(function (fn) {\n      try {\n        fn(data);\n      } catch (error) {\n        // jsc doesn't play so well with tracebacks that go into eval'd code,\n        // so the stack trace here will stop at the `eval()` call. Getting the\n        // message that caused the error is the best we can do for now.\n        console.log('[React DevTools] Error calling listener', data);\n        console.log('error:', error);\n        throw error;\n      }\n    });\n  }\n}\nfunction connectWithCustomMessagingProtocol(_ref2) {\n  var onSubscribe = _ref2.onSubscribe,\n      onUnsubscribe = _ref2.onUnsubscribe,\n      onMessage = _ref2.onMessage,\n      nativeStyleEditorValidAttributes = _ref2.nativeStyleEditorValidAttributes,\n      resolveRNStyle = _ref2.resolveRNStyle,\n      onSettingsUpdated = _ref2.onSettingsUpdated,\n      _ref2$isReloadAndProf = _ref2.isReloadAndProfileSupported,\n      isReloadAndProfileSupported = _ref2$isReloadAndProf === void 0 ? (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_6__.getIsReloadAndProfileSupported)() : _ref2$isReloadAndProf,\n      isProfiling = _ref2.isProfiling,\n      onReloadAndProfile = _ref2.onReloadAndProfile,\n      onReloadAndProfileFlagsReset = _ref2.onReloadAndProfileFlagsReset;\n  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n  if (hook == null) {\n    // DevTools didn't get injected into this page (maybe b'c of the contentType).\n    return;\n  }\n\n  var wall = {\n    listen: function listen(fn) {\n      onSubscribe(fn);\n      return function () {\n        onUnsubscribe(fn);\n      };\n    },\n    send: function send(event, payload) {\n      onMessage(event, payload);\n    }\n  };\n  var bridge = new react_devtools_shared_src_bridge__WEBPACK_IMPORTED_MODULE_1__[\"default\"](wall);\n  bridge.addListener('updateComponentFilters', function (componentFilters) {\n    // Save filter changes in memory, in case DevTools is reloaded.\n    // In that case, the renderer will already be using the updated values.\n    // We'll lose these in between backend reloads but that can't be helped.\n    savedComponentFilters = componentFilters;\n  });\n\n  if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ == null) {\n    bridge.send('overrideComponentFilters', savedComponentFilters);\n  }\n\n  var agent = new react_devtools_shared_src_backend_agent__WEBPACK_IMPORTED_MODULE_0__[\"default\"](bridge, isProfiling, onReloadAndProfile);\n\n  if (typeof onReloadAndProfileFlagsReset === 'function') {\n    onReloadAndProfileFlagsReset();\n  }\n\n  if (onSettingsUpdated != null) {\n    agent.addListener('updateHookSettings', onSettingsUpdated);\n  }\n\n  agent.addListener('shutdown', function () {\n    if (onSettingsUpdated != null) {\n      agent.removeListener('updateHookSettings', onSettingsUpdated);\n    } // If we received 'shutdown' from `agent`, we assume the `bridge` is already shutting down,\n    // and that caused the 'shutdown' event on the `agent`, so we don't need to call `bridge.shutdown()` here.\n\n\n    hook.emit('shutdown');\n  });\n  var unsubscribeBackend = (0,react_devtools_shared_src_backend__WEBPACK_IMPORTED_MODULE_3__.initBackend)(hook, agent, window, isReloadAndProfileSupported);\n  var nativeStyleResolver = resolveRNStyle || hook.resolveRNStyle;\n\n  if (nativeStyleResolver != null) {\n    var validAttributes = nativeStyleEditorValidAttributes || hook.nativeStyleEditorValidAttributes || null;\n    (0,react_devtools_shared_src_backend_NativeStyleEditor_setupNativeStyleEditor__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(bridge, agent, nativeStyleResolver, validAttributes);\n  }\n\n  return unsubscribeBackend;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/backend.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/attachRenderer.js":
/*!******************************************************!*\
  !*** ../react-devtools-shared/src/attachRenderer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ attachRenderer)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_backend_flight_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/backend/flight/renderer */ \"../react-devtools-shared/src/backend/flight/renderer.js\");\n/* harmony import */ var react_devtools_shared_src_backend_fiber_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-devtools-shared/src/backend/fiber/renderer */ \"../react-devtools-shared/src/backend/fiber/renderer.js\");\n/* harmony import */ var react_devtools_shared_src_backend_legacy_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-devtools-shared/src/backend/legacy/renderer */ \"../react-devtools-shared/src/backend/legacy/renderer.js\");\n/* harmony import */ var react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-devtools-shared/src/backend/utils */ \"../react-devtools-shared/src/backend/utils/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n // this is the backend that is compatible with all older React versions\n\nfunction isMatchingRender(version) {\n  return !(0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_3__.hasAssignedBackend)(version);\n}\n\nfunction attachRenderer(hook, id, renderer, global, shouldStartProfilingNow, profilingSettings) {\n  // only attach if the renderer is compatible with the current version of the backend\n  if (!isMatchingRender(renderer.reconcilerVersion || renderer.version)) {\n    return;\n  }\n\n  var rendererInterface = hook.rendererInterfaces.get(id); // Inject any not-yet-injected renderers (if we didn't reload-and-profile)\n\n  if (rendererInterface == null) {\n    if (typeof renderer.getCurrentComponentInfo === 'function') {\n      // react-flight/client\n      rendererInterface = (0,react_devtools_shared_src_backend_flight_renderer__WEBPACK_IMPORTED_MODULE_0__.attach)(hook, id, renderer, global);\n    } else if ( // v16-19\n    typeof renderer.findFiberByHostInstance === 'function' || // v16.8+\n    renderer.currentDispatcherRef != null) {\n      // react-reconciler v16+\n      rendererInterface = (0,react_devtools_shared_src_backend_fiber_renderer__WEBPACK_IMPORTED_MODULE_1__.attach)(hook, id, renderer, global, shouldStartProfilingNow, profilingSettings);\n    } else if (renderer.ComponentTree) {\n      // react-dom v15\n      rendererInterface = (0,react_devtools_shared_src_backend_legacy_renderer__WEBPACK_IMPORTED_MODULE_2__.attach)(hook, id, renderer, global);\n    } else {// Older react-dom or other unsupported renderer version\n    }\n  }\n\n  return rendererInterface;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9hdHRhY2hSZW5kZXJlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7OztBQWlCQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYXR0YWNoUmVuZGVyZXIuanM/NjQyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7XG4gIFJlYWN0UmVuZGVyZXIsXG4gIFJlbmRlcmVySW50ZXJmYWNlLFxuICBEZXZUb29sc0hvb2ssXG4gIFJlbmRlcmVySUQsXG4gIFByb2ZpbGluZ1NldHRpbmdzLFxufSBmcm9tICdyZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvdHlwZXMnO1xuXG5pbXBvcnQge2F0dGFjaCBhcyBhdHRhY2hGbGlnaHR9IGZyb20gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9mbGlnaHQvcmVuZGVyZXInO1xuaW1wb3J0IHthdHRhY2ggYXMgYXR0YWNoRmliZXJ9IGZyb20gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9maWJlci9yZW5kZXJlcic7XG5pbXBvcnQge2F0dGFjaCBhcyBhdHRhY2hMZWdhY3l9IGZyb20gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9sZWdhY3kvcmVuZGVyZXInO1xuaW1wb3J0IHtoYXNBc3NpZ25lZEJhY2tlbmR9IGZyb20gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC91dGlscyc7XG5cbi8vIHRoaXMgaXMgdGhlIGJhY2tlbmQgdGhhdCBpcyBjb21wYXRpYmxlIHdpdGggYWxsIG9sZGVyIFJlYWN0IHZlcnNpb25zXG5mdW5jdGlvbiBpc01hdGNoaW5nUmVuZGVyKHZlcnNpb246IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gIWhhc0Fzc2lnbmVkQmFja2VuZCh2ZXJzaW9uKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXR0YWNoUmVuZGVyZXIoXG4gIGhvb2s6IERldlRvb2xzSG9vayxcbiAgaWQ6IFJlbmRlcmVySUQsXG4gIHJlbmRlcmVyOiBSZWFjdFJlbmRlcmVyLFxuICBnbG9iYWw6IE9iamVjdCxcbiAgc2hvdWxkU3RhcnRQcm9maWxpbmdOb3c6IGJvb2xlYW4sXG4gIHByb2ZpbGluZ1NldHRpbmdzOiBQcm9maWxpbmdTZXR0aW5ncyxcbik6IFJlbmRlcmVySW50ZXJmYWNlIHwgdm9pZCB7XG4gIC8vIG9ubHkgYXR0YWNoIGlmIHRoZSByZW5kZXJlciBpcyBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgYmFja2VuZFxuICBpZiAoIWlzTWF0Y2hpbmdSZW5kZXIocmVuZGVyZXIucmVjb25jaWxlclZlcnNpb24gfHwgcmVuZGVyZXIudmVyc2lvbikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHJlbmRlcmVySW50ZXJmYWNlID0gaG9vay5yZW5kZXJlckludGVyZmFjZXMuZ2V0KGlkKTtcblxuICAvLyBJbmplY3QgYW55IG5vdC15ZXQtaW5qZWN0ZWQgcmVuZGVyZXJzIChpZiB3ZSBkaWRuJ3QgcmVsb2FkLWFuZC1wcm9maWxlKVxuICBpZiAocmVuZGVyZXJJbnRlcmZhY2UgPT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgcmVuZGVyZXIuZ2V0Q3VycmVudENvbXBvbmVudEluZm8gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIHJlYWN0LWZsaWdodC9jbGllbnRcbiAgICAgIHJlbmRlcmVySW50ZXJmYWNlID0gYXR0YWNoRmxpZ2h0KGhvb2ssIGlkLCByZW5kZXJlciwgZ2xvYmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gdjE2LTE5XG4gICAgICB0eXBlb2YgcmVuZGVyZXIuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgIC8vIHYxNi44K1xuICAgICAgcmVuZGVyZXIuY3VycmVudERpc3BhdGNoZXJSZWYgIT0gbnVsbFxuICAgICkge1xuICAgICAgLy8gcmVhY3QtcmVjb25jaWxlciB2MTYrXG4gICAgICByZW5kZXJlckludGVyZmFjZSA9IGF0dGFjaEZpYmVyKFxuICAgICAgICBob29rLFxuICAgICAgICBpZCxcbiAgICAgICAgcmVuZGVyZXIsXG4gICAgICAgIGdsb2JhbCxcbiAgICAgICAgc2hvdWxkU3RhcnRQcm9maWxpbmdOb3csXG4gICAgICAgIHByb2ZpbGluZ1NldHRpbmdzLFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHJlbmRlcmVyLkNvbXBvbmVudFRyZWUpIHtcbiAgICAgIC8vIHJlYWN0LWRvbSB2MTVcbiAgICAgIHJlbmRlcmVySW50ZXJmYWNlID0gYXR0YWNoTGVnYWN5KGhvb2ssIGlkLCByZW5kZXJlciwgZ2xvYmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2xkZXIgcmVhY3QtZG9tIG9yIG90aGVyIHVuc3VwcG9ydGVkIHJlbmRlcmVyIHZlcnNpb25cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVuZGVyZXJJbnRlcmZhY2U7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/attachRenderer.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/NativeStyleEditor/resolveBoxStyle.js":
/*!*********************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/NativeStyleEditor/resolveBoxStyle.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ resolveBoxStyle)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * This mirrors react-native/Libraries/Inspector/resolveBoxStyle.js (but without RTL support).\n *\n * Resolve a style property into it's component parts, e.g.\n *\n * resolveBoxStyle('margin', {margin: 5, marginBottom: 10})\n * -> {top: 5, left: 5, right: 5, bottom: 10}\n */\nfunction resolveBoxStyle(prefix, style) {\n  var hasParts = false;\n  var result = {\n    bottom: 0,\n    left: 0,\n    right: 0,\n    top: 0\n  };\n  var styleForAll = style[prefix];\n\n  if (styleForAll != null) {\n    // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n    for (var _i = 0, _Object$keys = Object.keys(result); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      result[key] = styleForAll;\n    }\n\n    hasParts = true;\n  }\n\n  var styleForHorizontal = style[prefix + 'Horizontal'];\n\n  if (styleForHorizontal != null) {\n    result.left = styleForHorizontal;\n    result.right = styleForHorizontal;\n    hasParts = true;\n  } else {\n    var styleForLeft = style[prefix + 'Left'];\n\n    if (styleForLeft != null) {\n      result.left = styleForLeft;\n      hasParts = true;\n    }\n\n    var styleForRight = style[prefix + 'Right'];\n\n    if (styleForRight != null) {\n      result.right = styleForRight;\n      hasParts = true;\n    }\n\n    var styleForEnd = style[prefix + 'End'];\n\n    if (styleForEnd != null) {\n      // TODO RTL support\n      result.right = styleForEnd;\n      hasParts = true;\n    }\n\n    var styleForStart = style[prefix + 'Start'];\n\n    if (styleForStart != null) {\n      // TODO RTL support\n      result.left = styleForStart;\n      hasParts = true;\n    }\n  }\n\n  var styleForVertical = style[prefix + 'Vertical'];\n\n  if (styleForVertical != null) {\n    result.bottom = styleForVertical;\n    result.top = styleForVertical;\n    hasParts = true;\n  } else {\n    var styleForBottom = style[prefix + 'Bottom'];\n\n    if (styleForBottom != null) {\n      result.bottom = styleForBottom;\n      hasParts = true;\n    }\n\n    var styleForTop = style[prefix + 'Top'];\n\n    if (styleForTop != null) {\n      result.top = styleForTop;\n      hasParts = true;\n    }\n  }\n\n  return hasParts ? result : null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL05hdGl2ZVN0eWxlRWRpdG9yL3Jlc29sdmVCb3hTdHlsZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7OztBQVdBOzs7Ozs7OztBQVFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFPQTs7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFFQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9OYXRpdmVTdHlsZUVkaXRvci9yZXNvbHZlQm94U3R5bGUuanM/NDNhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7Qm94U3R5bGV9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIFRoaXMgbWlycm9ycyByZWFjdC1uYXRpdmUvTGlicmFyaWVzL0luc3BlY3Rvci9yZXNvbHZlQm94U3R5bGUuanMgKGJ1dCB3aXRob3V0IFJUTCBzdXBwb3J0KS5cbiAqXG4gKiBSZXNvbHZlIGEgc3R5bGUgcHJvcGVydHkgaW50byBpdCdzIGNvbXBvbmVudCBwYXJ0cywgZS5nLlxuICpcbiAqIHJlc29sdmVCb3hTdHlsZSgnbWFyZ2luJywge21hcmdpbjogNSwgbWFyZ2luQm90dG9tOiAxMH0pXG4gKiAtPiB7dG9wOiA1LCBsZWZ0OiA1LCByaWdodDogNSwgYm90dG9tOiAxMH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZUJveFN0eWxlKFxuICBwcmVmaXg6IHN0cmluZyxcbiAgc3R5bGU6IE9iamVjdCxcbik6IEJveFN0eWxlIHwgbnVsbCB7XG4gIGxldCBoYXNQYXJ0cyA9IGZhbHNlO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICB9O1xuXG4gIGNvbnN0IHN0eWxlRm9yQWxsID0gc3R5bGVbcHJlZml4XTtcbiAgaWYgKHN0eWxlRm9yQWxsICE9IG51bGwpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZm9yLW9mLWxvb3BzL25vLWZvci1vZi1sb29wc1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gc3R5bGVGb3JBbGw7XG4gICAgfVxuICAgIGhhc1BhcnRzID0gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlRm9ySG9yaXpvbnRhbCA9IHN0eWxlW3ByZWZpeCArICdIb3Jpem9udGFsJ107XG4gIGlmIChzdHlsZUZvckhvcml6b250YWwgIT0gbnVsbCkge1xuICAgIHJlc3VsdC5sZWZ0ID0gc3R5bGVGb3JIb3Jpem9udGFsO1xuICAgIHJlc3VsdC5yaWdodCA9IHN0eWxlRm9ySG9yaXpvbnRhbDtcbiAgICBoYXNQYXJ0cyA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3R5bGVGb3JMZWZ0ID0gc3R5bGVbcHJlZml4ICsgJ0xlZnQnXTtcbiAgICBpZiAoc3R5bGVGb3JMZWZ0ICE9IG51bGwpIHtcbiAgICAgIHJlc3VsdC5sZWZ0ID0gc3R5bGVGb3JMZWZ0O1xuICAgICAgaGFzUGFydHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHN0eWxlRm9yUmlnaHQgPSBzdHlsZVtwcmVmaXggKyAnUmlnaHQnXTtcbiAgICBpZiAoc3R5bGVGb3JSaWdodCAhPSBudWxsKSB7XG4gICAgICByZXN1bHQucmlnaHQgPSBzdHlsZUZvclJpZ2h0O1xuICAgICAgaGFzUGFydHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHN0eWxlRm9yRW5kID0gc3R5bGVbcHJlZml4ICsgJ0VuZCddO1xuICAgIGlmIChzdHlsZUZvckVuZCAhPSBudWxsKSB7XG4gICAgICAvLyBUT0RPIFJUTCBzdXBwb3J0XG4gICAgICByZXN1bHQucmlnaHQgPSBzdHlsZUZvckVuZDtcbiAgICAgIGhhc1BhcnRzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGVGb3JTdGFydCA9IHN0eWxlW3ByZWZpeCArICdTdGFydCddO1xuICAgIGlmIChzdHlsZUZvclN0YXJ0ICE9IG51bGwpIHtcbiAgICAgIC8vIFRPRE8gUlRMIHN1cHBvcnRcbiAgICAgIHJlc3VsdC5sZWZ0ID0gc3R5bGVGb3JTdGFydDtcbiAgICAgIGhhc1BhcnRzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBzdHlsZUZvclZlcnRpY2FsID0gc3R5bGVbcHJlZml4ICsgJ1ZlcnRpY2FsJ107XG4gIGlmIChzdHlsZUZvclZlcnRpY2FsICE9IG51bGwpIHtcbiAgICByZXN1bHQuYm90dG9tID0gc3R5bGVGb3JWZXJ0aWNhbDtcbiAgICByZXN1bHQudG9wID0gc3R5bGVGb3JWZXJ0aWNhbDtcbiAgICBoYXNQYXJ0cyA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3R5bGVGb3JCb3R0b20gPSBzdHlsZVtwcmVmaXggKyAnQm90dG9tJ107XG4gICAgaWYgKHN0eWxlRm9yQm90dG9tICE9IG51bGwpIHtcbiAgICAgIHJlc3VsdC5ib3R0b20gPSBzdHlsZUZvckJvdHRvbTtcbiAgICAgIGhhc1BhcnRzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBzdHlsZUZvclRvcCA9IHN0eWxlW3ByZWZpeCArICdUb3AnXTtcbiAgICBpZiAoc3R5bGVGb3JUb3AgIT0gbnVsbCkge1xuICAgICAgcmVzdWx0LnRvcCA9IHN0eWxlRm9yVG9wO1xuICAgICAgaGFzUGFydHMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBoYXNQYXJ0cyA/IHJlc3VsdCA6IG51bGw7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/NativeStyleEditor/resolveBoxStyle.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/NativeStyleEditor/setupNativeStyleEditor.js":
/*!****************************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/NativeStyleEditor/setupNativeStyleEditor.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ setupNativeStyleEditor)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_backend_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/backend/agent */ \"../react-devtools-shared/src/backend/agent.js\");\n/* harmony import */ var _resolveBoxStyle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveBoxStyle */ \"../react-devtools-shared/src/backend/NativeStyleEditor/resolveBoxStyle.js\");\n/* harmony import */ var react_devtools_shared_src_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-devtools-shared/src/isArray */ \"../react-devtools-shared/src/isArray.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\nfunction setupNativeStyleEditor(bridge, agent, resolveNativeStyle, validAttributes) {\n  bridge.addListener('NativeStyleEditor_measure', function (_ref) {\n    var id = _ref.id,\n        rendererID = _ref.rendererID;\n    measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);\n  });\n  bridge.addListener('NativeStyleEditor_renameAttribute', function (_ref2) {\n    var id = _ref2.id,\n        rendererID = _ref2.rendererID,\n        oldName = _ref2.oldName,\n        newName = _ref2.newName,\n        value = _ref2.value;\n    renameStyle(agent, id, rendererID, oldName, newName, value);\n    setTimeout(function () {\n      return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);\n    });\n  });\n  bridge.addListener('NativeStyleEditor_setValue', function (_ref3) {\n    var id = _ref3.id,\n        rendererID = _ref3.rendererID,\n        name = _ref3.name,\n        value = _ref3.value;\n    setStyle(agent, id, rendererID, name, value);\n    setTimeout(function () {\n      return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);\n    });\n  });\n  bridge.send('isNativeStyleEditorSupported', {\n    isSupported: true,\n    validAttributes: validAttributes\n  });\n}\nvar EMPTY_BOX_STYLE = {\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0\n};\nvar componentIDToStyleOverrides = new Map();\n\nfunction measureStyle(agent, bridge, resolveNativeStyle, id, rendererID) {\n  var data = agent.getInstanceAndStyle({\n    id: id,\n    rendererID: rendererID\n  });\n\n  if (!data || !data.style) {\n    bridge.send('NativeStyleEditor_styleAndLayout', {\n      id: id,\n      layout: null,\n      style: null\n    });\n    return;\n  }\n\n  var instance = data.instance,\n      style = data.style;\n  var resolvedStyle = resolveNativeStyle(style); // If it's a host component we edited before, amend styles.\n\n  var styleOverrides = componentIDToStyleOverrides.get(id);\n\n  if (styleOverrides != null) {\n    resolvedStyle = Object.assign({}, resolvedStyle, styleOverrides);\n  }\n\n  if (!instance || typeof instance.measure !== 'function') {\n    bridge.send('NativeStyleEditor_styleAndLayout', {\n      id: id,\n      layout: null,\n      style: resolvedStyle || null\n    });\n    return;\n  }\n\n  instance.measure(function (x, y, width, height, left, top) {\n    // RN Android sometimes returns undefined here. Don't send measurements in this case.\n    // https://github.com/jhen0409/react-native-debugger/issues/84#issuecomment-304611817\n    if (typeof x !== 'number') {\n      bridge.send('NativeStyleEditor_styleAndLayout', {\n        id: id,\n        layout: null,\n        style: resolvedStyle || null\n      });\n      return;\n    }\n\n    var margin = resolvedStyle != null && (0,_resolveBoxStyle__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('margin', resolvedStyle) || EMPTY_BOX_STYLE;\n    var padding = resolvedStyle != null && (0,_resolveBoxStyle__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('padding', resolvedStyle) || EMPTY_BOX_STYLE;\n    bridge.send('NativeStyleEditor_styleAndLayout', {\n      id: id,\n      layout: {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        left: left,\n        top: top,\n        margin: margin,\n        padding: padding\n      },\n      style: resolvedStyle || null\n    });\n  });\n}\n\nfunction shallowClone(object) {\n  var cloned = {};\n\n  for (var n in object) {\n    cloned[n] = object[n];\n  }\n\n  return cloned;\n}\n\nfunction renameStyle(agent, id, rendererID, oldName, newName, value) {\n  var _ref4;\n\n  var data = agent.getInstanceAndStyle({\n    id: id,\n    rendererID: rendererID\n  });\n\n  if (!data || !data.style) {\n    return;\n  }\n\n  var instance = data.instance,\n      style = data.style;\n  var newStyle = newName ? (_ref4 = {}, _defineProperty(_ref4, oldName, undefined), _defineProperty(_ref4, newName, value), _ref4) : _defineProperty({}, oldName, undefined);\n  var customStyle; // TODO It would be nice if the renderer interface abstracted this away somehow.\n\n  if (instance !== null && typeof instance.setNativeProps === 'function') {\n    // In the case of a host component, we need to use setNativeProps().\n    // Remember to \"correct\" resolved styles when we read them next time.\n    var styleOverrides = componentIDToStyleOverrides.get(id);\n\n    if (!styleOverrides) {\n      componentIDToStyleOverrides.set(id, newStyle);\n    } else {\n      Object.assign(styleOverrides, newStyle);\n    } // TODO Fabric does not support setNativeProps; chat with Sebastian or Eli\n\n\n    instance.setNativeProps({\n      style: newStyle\n    });\n  } else if ((0,react_devtools_shared_src_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(style)) {\n    var lastIndex = style.length - 1;\n\n    if (_typeof(style[lastIndex]) === 'object' && !(0,react_devtools_shared_src_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(style[lastIndex])) {\n      customStyle = shallowClone(style[lastIndex]);\n      delete customStyle[oldName];\n\n      if (newName) {\n        customStyle[newName] = value;\n      } else {\n        customStyle[oldName] = undefined;\n      }\n\n      agent.overrideValueAtPath({\n        type: 'props',\n        id: id,\n        rendererID: rendererID,\n        path: ['style', lastIndex],\n        value: customStyle\n      });\n    } else {\n      agent.overrideValueAtPath({\n        type: 'props',\n        id: id,\n        rendererID: rendererID,\n        path: ['style'],\n        value: style.concat([newStyle])\n      });\n    }\n  } else if (_typeof(style) === 'object') {\n    customStyle = shallowClone(style);\n    delete customStyle[oldName];\n\n    if (newName) {\n      customStyle[newName] = value;\n    } else {\n      customStyle[oldName] = undefined;\n    }\n\n    agent.overrideValueAtPath({\n      type: 'props',\n      id: id,\n      rendererID: rendererID,\n      path: ['style'],\n      value: customStyle\n    });\n  } else {\n    agent.overrideValueAtPath({\n      type: 'props',\n      id: id,\n      rendererID: rendererID,\n      path: ['style'],\n      value: [style, newStyle]\n    });\n  }\n\n  agent.emit('hideNativeHighlight');\n}\n\nfunction setStyle(agent, id, rendererID, name, value) {\n  var data = agent.getInstanceAndStyle({\n    id: id,\n    rendererID: rendererID\n  });\n\n  if (!data || !data.style) {\n    return;\n  }\n\n  var instance = data.instance,\n      style = data.style;\n\n  var newStyle = _defineProperty({}, name, value); // TODO It would be nice if the renderer interface abstracted this away somehow.\n\n\n  if (instance !== null && typeof instance.setNativeProps === 'function') {\n    // In the case of a host component, we need to use setNativeProps().\n    // Remember to \"correct\" resolved styles when we read them next time.\n    var styleOverrides = componentIDToStyleOverrides.get(id);\n\n    if (!styleOverrides) {\n      componentIDToStyleOverrides.set(id, newStyle);\n    } else {\n      Object.assign(styleOverrides, newStyle);\n    } // TODO Fabric does not support setNativeProps; chat with Sebastian or Eli\n\n\n    instance.setNativeProps({\n      style: newStyle\n    });\n  } else if ((0,react_devtools_shared_src_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(style)) {\n    var lastLength = style.length - 1;\n\n    if (_typeof(style[lastLength]) === 'object' && !(0,react_devtools_shared_src_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(style[lastLength])) {\n      agent.overrideValueAtPath({\n        type: 'props',\n        id: id,\n        rendererID: rendererID,\n        path: ['style', lastLength, name],\n        value: value\n      });\n    } else {\n      agent.overrideValueAtPath({\n        type: 'props',\n        id: id,\n        rendererID: rendererID,\n        path: ['style'],\n        value: style.concat([newStyle])\n      });\n    }\n  } else {\n    agent.overrideValueAtPath({\n      type: 'props',\n      id: id,\n      rendererID: rendererID,\n      path: ['style'],\n      value: [style, newStyle]\n    });\n  }\n\n  agent.emit('hideNativeHighlight');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL05hdGl2ZVN0eWxlRWRpdG9yL3NldHVwTmF0aXZlU3R5bGVFZGl0b3IuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFTQTtBQU1BO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQWNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBR0E7QUFZQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBT0E7O0FBRUE7QUFPQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUNBOztBQVpBO0FBQUE7QUFnQkE7O0FBR0E7O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFDQTs7QUFDQTtBQUdBO0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBVUE7QUFaQTtBQWVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFFQTtBQU9BOztBQUNBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTs7QUFKQTtBQUFBO0FBUUE7QUFJQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7O0FBRUE7QUFDQTs7QUFFQTtBQU9BO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTs7QUFKQTtBQUFBOztBQU9BOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9OYXRpdmVTdHlsZUVkaXRvci9zZXR1cE5hdGl2ZVN0eWxlRWRpdG9yLmpzPzdhYzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IEFnZW50IGZyb20gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9hZ2VudCc7XG5pbXBvcnQgcmVzb2x2ZUJveFN0eWxlIGZyb20gJy4vcmVzb2x2ZUJveFN0eWxlJztcbmltcG9ydCBpc0FycmF5IGZyb20gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvaXNBcnJheSc7XG5cbmltcG9ydCB0eXBlIHtCYWNrZW5kQnJpZGdlfSBmcm9tICdyZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JyaWRnZSc7XG5pbXBvcnQgdHlwZSB7UmVuZGVyZXJJRH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUge1N0eWxlQW5kTGF5b3V0fSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgUmVzb2x2ZU5hdGl2ZVN0eWxlID0gKHN0eWxlc2hlZXRJRDogYW55KSA9PiA/T2JqZWN0O1xuZXhwb3J0IHR5cGUgU2V0dXBOYXRpdmVTdHlsZUVkaXRvciA9IHR5cGVvZiBzZXR1cE5hdGl2ZVN0eWxlRWRpdG9yO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR1cE5hdGl2ZVN0eWxlRWRpdG9yKFxuICBicmlkZ2U6IEJhY2tlbmRCcmlkZ2UsXG4gIGFnZW50OiBBZ2VudCxcbiAgcmVzb2x2ZU5hdGl2ZVN0eWxlOiBSZXNvbHZlTmF0aXZlU3R5bGUsXG4gIHZhbGlkQXR0cmlidXRlcz86ICRSZWFkT25seUFycmF5PHN0cmluZz4gfCBudWxsLFxuKSB7XG4gIGJyaWRnZS5hZGRMaXN0ZW5lcihcbiAgICAnTmF0aXZlU3R5bGVFZGl0b3JfbWVhc3VyZScsXG4gICAgKHtpZCwgcmVuZGVyZXJJRH06IHtpZDogbnVtYmVyLCByZW5kZXJlcklEOiBSZW5kZXJlcklEfSkgPT4ge1xuICAgICAgbWVhc3VyZVN0eWxlKGFnZW50LCBicmlkZ2UsIHJlc29sdmVOYXRpdmVTdHlsZSwgaWQsIHJlbmRlcmVySUQpO1xuICAgIH0sXG4gICk7XG5cbiAgYnJpZGdlLmFkZExpc3RlbmVyKFxuICAgICdOYXRpdmVTdHlsZUVkaXRvcl9yZW5hbWVBdHRyaWJ1dGUnLFxuICAgICh7XG4gICAgICBpZCxcbiAgICAgIHJlbmRlcmVySUQsXG4gICAgICBvbGROYW1lLFxuICAgICAgbmV3TmFtZSxcbiAgICAgIHZhbHVlLFxuICAgIH06IHtcbiAgICAgIGlkOiBudW1iZXIsXG4gICAgICByZW5kZXJlcklEOiBSZW5kZXJlcklELFxuICAgICAgb2xkTmFtZTogc3RyaW5nLFxuICAgICAgbmV3TmFtZTogc3RyaW5nLFxuICAgICAgdmFsdWU6IHN0cmluZyxcbiAgICB9KSA9PiB7XG4gICAgICByZW5hbWVTdHlsZShhZ2VudCwgaWQsIHJlbmRlcmVySUQsIG9sZE5hbWUsIG5ld05hbWUsIHZhbHVlKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT5cbiAgICAgICAgbWVhc3VyZVN0eWxlKGFnZW50LCBicmlkZ2UsIHJlc29sdmVOYXRpdmVTdHlsZSwgaWQsIHJlbmRlcmVySUQpLFxuICAgICAgKTtcbiAgICB9LFxuICApO1xuXG4gIGJyaWRnZS5hZGRMaXN0ZW5lcihcbiAgICAnTmF0aXZlU3R5bGVFZGl0b3Jfc2V0VmFsdWUnLFxuICAgICh7XG4gICAgICBpZCxcbiAgICAgIHJlbmRlcmVySUQsXG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUsXG4gICAgfToge1xuICAgICAgaWQ6IG51bWJlcixcbiAgICAgIHJlbmRlcmVySUQ6IG51bWJlcixcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgfSkgPT4ge1xuICAgICAgc2V0U3R5bGUoYWdlbnQsIGlkLCByZW5kZXJlcklELCBuYW1lLCB2YWx1ZSk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+XG4gICAgICAgIG1lYXN1cmVTdHlsZShhZ2VudCwgYnJpZGdlLCByZXNvbHZlTmF0aXZlU3R5bGUsIGlkLCByZW5kZXJlcklEKSxcbiAgICAgICk7XG4gICAgfSxcbiAgKTtcblxuICBicmlkZ2Uuc2VuZCgnaXNOYXRpdmVTdHlsZUVkaXRvclN1cHBvcnRlZCcsIHtcbiAgICBpc1N1cHBvcnRlZDogdHJ1ZSxcbiAgICB2YWxpZEF0dHJpYnV0ZXMsXG4gIH0pO1xufVxuXG5jb25zdCBFTVBUWV9CT1hfU1RZTEUgPSB7XG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbn07XG5cbmNvbnN0IGNvbXBvbmVudElEVG9TdHlsZU92ZXJyaWRlczogTWFwPG51bWJlciwgT2JqZWN0PiA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gbWVhc3VyZVN0eWxlKFxuICBhZ2VudDogQWdlbnQsXG4gIGJyaWRnZTogQmFja2VuZEJyaWRnZSxcbiAgcmVzb2x2ZU5hdGl2ZVN0eWxlOiBSZXNvbHZlTmF0aXZlU3R5bGUsXG4gIGlkOiBudW1iZXIsXG4gIHJlbmRlcmVySUQ6IFJlbmRlcmVySUQsXG4pIHtcbiAgY29uc3QgZGF0YSA9IGFnZW50LmdldEluc3RhbmNlQW5kU3R5bGUoe2lkLCByZW5kZXJlcklEfSk7XG4gIGlmICghZGF0YSB8fCAhZGF0YS5zdHlsZSkge1xuICAgIGJyaWRnZS5zZW5kKFxuICAgICAgJ05hdGl2ZVN0eWxlRWRpdG9yX3N0eWxlQW5kTGF5b3V0JyxcbiAgICAgICh7XG4gICAgICAgIGlkLFxuICAgICAgICBsYXlvdXQ6IG51bGwsXG4gICAgICAgIHN0eWxlOiBudWxsLFxuICAgICAgfTogU3R5bGVBbmRMYXlvdXQpLFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qge2luc3RhbmNlLCBzdHlsZX0gPSBkYXRhO1xuXG4gIGxldCByZXNvbHZlZFN0eWxlID0gcmVzb2x2ZU5hdGl2ZVN0eWxlKHN0eWxlKTtcblxuICAvLyBJZiBpdCdzIGEgaG9zdCBjb21wb25lbnQgd2UgZWRpdGVkIGJlZm9yZSwgYW1lbmQgc3R5bGVzLlxuICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IGNvbXBvbmVudElEVG9TdHlsZU92ZXJyaWRlcy5nZXQoaWQpO1xuICBpZiAoc3R5bGVPdmVycmlkZXMgIT0gbnVsbCkge1xuICAgIHJlc29sdmVkU3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCByZXNvbHZlZFN0eWxlLCBzdHlsZU92ZXJyaWRlcyk7XG4gIH1cblxuICBpZiAoIWluc3RhbmNlIHx8IHR5cGVvZiBpbnN0YW5jZS5tZWFzdXJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgYnJpZGdlLnNlbmQoXG4gICAgICAnTmF0aXZlU3R5bGVFZGl0b3Jfc3R5bGVBbmRMYXlvdXQnLFxuICAgICAgKHtcbiAgICAgICAgaWQsXG4gICAgICAgIGxheW91dDogbnVsbCxcbiAgICAgICAgc3R5bGU6IHJlc29sdmVkU3R5bGUgfHwgbnVsbCxcbiAgICAgIH06IFN0eWxlQW5kTGF5b3V0KSxcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluc3RhbmNlLm1lYXN1cmUoKHgsIHksIHdpZHRoLCBoZWlnaHQsIGxlZnQsIHRvcCkgPT4ge1xuICAgIC8vIFJOIEFuZHJvaWQgc29tZXRpbWVzIHJldHVybnMgdW5kZWZpbmVkIGhlcmUuIERvbid0IHNlbmQgbWVhc3VyZW1lbnRzIGluIHRoaXMgY2FzZS5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vamhlbjA0MDkvcmVhY3QtbmF0aXZlLWRlYnVnZ2VyL2lzc3Vlcy84NCNpc3N1ZWNvbW1lbnQtMzA0NjExODE3XG4gICAgaWYgKHR5cGVvZiB4ICE9PSAnbnVtYmVyJykge1xuICAgICAgYnJpZGdlLnNlbmQoXG4gICAgICAgICdOYXRpdmVTdHlsZUVkaXRvcl9zdHlsZUFuZExheW91dCcsXG4gICAgICAgICh7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgbGF5b3V0OiBudWxsLFxuICAgICAgICAgIHN0eWxlOiByZXNvbHZlZFN0eWxlIHx8IG51bGwsXG4gICAgICAgIH06IFN0eWxlQW5kTGF5b3V0KSxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1hcmdpbiA9XG4gICAgICAocmVzb2x2ZWRTdHlsZSAhPSBudWxsICYmIHJlc29sdmVCb3hTdHlsZSgnbWFyZ2luJywgcmVzb2x2ZWRTdHlsZSkpIHx8XG4gICAgICBFTVBUWV9CT1hfU1RZTEU7XG4gICAgY29uc3QgcGFkZGluZyA9XG4gICAgICAocmVzb2x2ZWRTdHlsZSAhPSBudWxsICYmIHJlc29sdmVCb3hTdHlsZSgncGFkZGluZycsIHJlc29sdmVkU3R5bGUpKSB8fFxuICAgICAgRU1QVFlfQk9YX1NUWUxFO1xuICAgIGJyaWRnZS5zZW5kKFxuICAgICAgJ05hdGl2ZVN0eWxlRWRpdG9yX3N0eWxlQW5kTGF5b3V0JyxcbiAgICAgICh7XG4gICAgICAgIGlkLFxuICAgICAgICBsYXlvdXQ6IHtcbiAgICAgICAgICB4LFxuICAgICAgICAgIHksXG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgdG9wLFxuICAgICAgICAgIG1hcmdpbixcbiAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICB9LFxuICAgICAgICBzdHlsZTogcmVzb2x2ZWRTdHlsZSB8fCBudWxsLFxuICAgICAgfTogU3R5bGVBbmRMYXlvdXQpLFxuICAgICk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzaGFsbG93Q2xvbmUob2JqZWN0OiBPYmplY3QpOiBPYmplY3Qge1xuICBjb25zdCBjbG9uZWQ6IHtbc3RyaW5nXTogJEZsb3dGaXhNZX0gPSB7fTtcbiAgZm9yIChjb25zdCBuIGluIG9iamVjdCkge1xuICAgIGNsb25lZFtuXSA9IG9iamVjdFtuXTtcbiAgfVxuICByZXR1cm4gY2xvbmVkO1xufVxuXG5mdW5jdGlvbiByZW5hbWVTdHlsZShcbiAgYWdlbnQ6IEFnZW50LFxuICBpZDogbnVtYmVyLFxuICByZW5kZXJlcklEOiBSZW5kZXJlcklELFxuICBvbGROYW1lOiBzdHJpbmcsXG4gIG5ld05hbWU6IHN0cmluZyxcbiAgdmFsdWU6IHN0cmluZyxcbik6IHZvaWQge1xuICBjb25zdCBkYXRhID0gYWdlbnQuZ2V0SW5zdGFuY2VBbmRTdHlsZSh7aWQsIHJlbmRlcmVySUR9KTtcbiAgaWYgKCFkYXRhIHx8ICFkYXRhLnN0eWxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qge2luc3RhbmNlLCBzdHlsZX0gPSBkYXRhO1xuXG4gIGNvbnN0IG5ld1N0eWxlID0gbmV3TmFtZVxuICAgID8ge1tvbGROYW1lXTogdW5kZWZpbmVkLCBbbmV3TmFtZV06IHZhbHVlfVxuICAgIDoge1tvbGROYW1lXTogdW5kZWZpbmVkfTtcblxuICBsZXQgY3VzdG9tU3R5bGU7XG5cbiAgLy8gVE9ETyBJdCB3b3VsZCBiZSBuaWNlIGlmIHRoZSByZW5kZXJlciBpbnRlcmZhY2UgYWJzdHJhY3RlZCB0aGlzIGF3YXkgc29tZWhvdy5cbiAgaWYgKGluc3RhbmNlICE9PSBudWxsICYmIHR5cGVvZiBpbnN0YW5jZS5zZXROYXRpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIEluIHRoZSBjYXNlIG9mIGEgaG9zdCBjb21wb25lbnQsIHdlIG5lZWQgdG8gdXNlIHNldE5hdGl2ZVByb3BzKCkuXG4gICAgLy8gUmVtZW1iZXIgdG8gXCJjb3JyZWN0XCIgcmVzb2x2ZWQgc3R5bGVzIHdoZW4gd2UgcmVhZCB0aGVtIG5leHQgdGltZS5cbiAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IGNvbXBvbmVudElEVG9TdHlsZU92ZXJyaWRlcy5nZXQoaWQpO1xuICAgIGlmICghc3R5bGVPdmVycmlkZXMpIHtcbiAgICAgIGNvbXBvbmVudElEVG9TdHlsZU92ZXJyaWRlcy5zZXQoaWQsIG5ld1N0eWxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZU92ZXJyaWRlcywgbmV3U3R5bGUpO1xuICAgIH1cbiAgICAvLyBUT0RPIEZhYnJpYyBkb2VzIG5vdCBzdXBwb3J0IHNldE5hdGl2ZVByb3BzOyBjaGF0IHdpdGggU2ViYXN0aWFuIG9yIEVsaVxuICAgIGluc3RhbmNlLnNldE5hdGl2ZVByb3BzKHtzdHlsZTogbmV3U3R5bGV9KTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHN0eWxlKSkge1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IHN0eWxlLmxlbmd0aCAtIDE7XG4gICAgaWYgKHR5cGVvZiBzdHlsZVtsYXN0SW5kZXhdID09PSAnb2JqZWN0JyAmJiAhaXNBcnJheShzdHlsZVtsYXN0SW5kZXhdKSkge1xuICAgICAgY3VzdG9tU3R5bGUgPSBzaGFsbG93Q2xvbmUoc3R5bGVbbGFzdEluZGV4XSk7XG4gICAgICBkZWxldGUgY3VzdG9tU3R5bGVbb2xkTmFtZV07XG4gICAgICBpZiAobmV3TmFtZSkge1xuICAgICAgICBjdXN0b21TdHlsZVtuZXdOYW1lXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VzdG9tU3R5bGVbb2xkTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGFnZW50Lm92ZXJyaWRlVmFsdWVBdFBhdGgoe1xuICAgICAgICB0eXBlOiAncHJvcHMnLFxuICAgICAgICBpZCxcbiAgICAgICAgcmVuZGVyZXJJRCxcbiAgICAgICAgcGF0aDogWydzdHlsZScsIGxhc3RJbmRleF0sXG4gICAgICAgIHZhbHVlOiBjdXN0b21TdHlsZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZ2VudC5vdmVycmlkZVZhbHVlQXRQYXRoKHtcbiAgICAgICAgdHlwZTogJ3Byb3BzJyxcbiAgICAgICAgaWQsXG4gICAgICAgIHJlbmRlcmVySUQsXG4gICAgICAgIHBhdGg6IFsnc3R5bGUnXSxcbiAgICAgICAgdmFsdWU6IHN0eWxlLmNvbmNhdChbbmV3U3R5bGVdKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG4gICAgY3VzdG9tU3R5bGUgPSBzaGFsbG93Q2xvbmUoc3R5bGUpO1xuICAgIGRlbGV0ZSBjdXN0b21TdHlsZVtvbGROYW1lXTtcbiAgICBpZiAobmV3TmFtZSkge1xuICAgICAgY3VzdG9tU3R5bGVbbmV3TmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VzdG9tU3R5bGVbb2xkTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgYWdlbnQub3ZlcnJpZGVWYWx1ZUF0UGF0aCh7XG4gICAgICB0eXBlOiAncHJvcHMnLFxuICAgICAgaWQsXG4gICAgICByZW5kZXJlcklELFxuICAgICAgcGF0aDogWydzdHlsZSddLFxuICAgICAgdmFsdWU6IGN1c3RvbVN0eWxlLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGFnZW50Lm92ZXJyaWRlVmFsdWVBdFBhdGgoe1xuICAgICAgdHlwZTogJ3Byb3BzJyxcbiAgICAgIGlkLFxuICAgICAgcmVuZGVyZXJJRCxcbiAgICAgIHBhdGg6IFsnc3R5bGUnXSxcbiAgICAgIHZhbHVlOiBbc3R5bGUsIG5ld1N0eWxlXSxcbiAgICB9KTtcbiAgfVxuXG4gIGFnZW50LmVtaXQoJ2hpZGVOYXRpdmVIaWdobGlnaHQnKTtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGUoXG4gIGFnZW50OiBBZ2VudCxcbiAgaWQ6IG51bWJlcixcbiAgcmVuZGVyZXJJRDogUmVuZGVyZXJJRCxcbiAgbmFtZTogc3RyaW5nLFxuICB2YWx1ZTogc3RyaW5nLFxuKSB7XG4gIGNvbnN0IGRhdGEgPSBhZ2VudC5nZXRJbnN0YW5jZUFuZFN0eWxlKHtpZCwgcmVuZGVyZXJJRH0pO1xuICBpZiAoIWRhdGEgfHwgIWRhdGEuc3R5bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7aW5zdGFuY2UsIHN0eWxlfSA9IGRhdGE7XG4gIGNvbnN0IG5ld1N0eWxlID0ge1tuYW1lXTogdmFsdWV9O1xuXG4gIC8vIFRPRE8gSXQgd291bGQgYmUgbmljZSBpZiB0aGUgcmVuZGVyZXIgaW50ZXJmYWNlIGFic3RyYWN0ZWQgdGhpcyBhd2F5IHNvbWVob3cuXG4gIGlmIChpbnN0YW5jZSAhPT0gbnVsbCAmJiB0eXBlb2YgaW5zdGFuY2Uuc2V0TmF0aXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBJbiB0aGUgY2FzZSBvZiBhIGhvc3QgY29tcG9uZW50LCB3ZSBuZWVkIHRvIHVzZSBzZXROYXRpdmVQcm9wcygpLlxuICAgIC8vIFJlbWVtYmVyIHRvIFwiY29ycmVjdFwiIHJlc29sdmVkIHN0eWxlcyB3aGVuIHdlIHJlYWQgdGhlbSBuZXh0IHRpbWUuXG4gICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBjb21wb25lbnRJRFRvU3R5bGVPdmVycmlkZXMuZ2V0KGlkKTtcbiAgICBpZiAoIXN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICBjb21wb25lbnRJRFRvU3R5bGVPdmVycmlkZXMuc2V0KGlkLCBuZXdTdHlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGVPdmVycmlkZXMsIG5ld1N0eWxlKTtcbiAgICB9XG4gICAgLy8gVE9ETyBGYWJyaWMgZG9lcyBub3Qgc3VwcG9ydCBzZXROYXRpdmVQcm9wczsgY2hhdCB3aXRoIFNlYmFzdGlhbiBvciBFbGlcbiAgICBpbnN0YW5jZS5zZXROYXRpdmVQcm9wcyh7c3R5bGU6IG5ld1N0eWxlfSk7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShzdHlsZSkpIHtcbiAgICBjb25zdCBsYXN0TGVuZ3RoID0gc3R5bGUubGVuZ3RoIC0gMTtcbiAgICBpZiAodHlwZW9mIHN0eWxlW2xhc3RMZW5ndGhdID09PSAnb2JqZWN0JyAmJiAhaXNBcnJheShzdHlsZVtsYXN0TGVuZ3RoXSkpIHtcbiAgICAgIGFnZW50Lm92ZXJyaWRlVmFsdWVBdFBhdGgoe1xuICAgICAgICB0eXBlOiAncHJvcHMnLFxuICAgICAgICBpZCxcbiAgICAgICAgcmVuZGVyZXJJRCxcbiAgICAgICAgcGF0aDogWydzdHlsZScsIGxhc3RMZW5ndGgsIG5hbWVdLFxuICAgICAgICB2YWx1ZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZ2VudC5vdmVycmlkZVZhbHVlQXRQYXRoKHtcbiAgICAgICAgdHlwZTogJ3Byb3BzJyxcbiAgICAgICAgaWQsXG4gICAgICAgIHJlbmRlcmVySUQsXG4gICAgICAgIHBhdGg6IFsnc3R5bGUnXSxcbiAgICAgICAgdmFsdWU6IHN0eWxlLmNvbmNhdChbbmV3U3R5bGVdKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhZ2VudC5vdmVycmlkZVZhbHVlQXRQYXRoKHtcbiAgICAgIHR5cGU6ICdwcm9wcycsXG4gICAgICBpZCxcbiAgICAgIHJlbmRlcmVySUQsXG4gICAgICBwYXRoOiBbJ3N0eWxlJ10sXG4gICAgICB2YWx1ZTogW3N0eWxlLCBuZXdTdHlsZV0sXG4gICAgfSk7XG4gIH1cblxuICBhZ2VudC5lbWl0KCdoaWRlTmF0aXZlSGlnaGxpZ2h0Jyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/NativeStyleEditor/setupNativeStyleEditor.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/StyleX/utils.js":
/*!************************************************************!*\
  !*** ../react-devtools-shared/src/backend/StyleX/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"crawlData\": () => (/* binding */ crawlData),\n/* harmony export */   \"getStyleXData\": () => (/* binding */ getStyleXData)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/isArray */ \"../react-devtools-shared/src/isArray.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar cachedStyleNameToValueMap = new Map();\nfunction getStyleXData(data) {\n  var sources = new Set();\n  var resolvedStyles = {};\n  crawlData(data, sources, resolvedStyles);\n  return {\n    sources: Array.from(sources).sort(),\n    resolvedStyles: resolvedStyles\n  };\n}\nfunction crawlData(data, sources, resolvedStyles) {\n  if (data == null) {\n    return;\n  }\n\n  if ((0,react_devtools_shared_src_isArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data)) {\n    data.forEach(function (entry) {\n      if (entry == null) {\n        return;\n      }\n\n      if ((0,react_devtools_shared_src_isArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(entry)) {\n        crawlData(entry, sources, resolvedStyles);\n      } else {\n        crawlObjectProperties(entry, sources, resolvedStyles);\n      }\n    });\n  } else {\n    crawlObjectProperties(data, sources, resolvedStyles);\n  }\n\n  resolvedStyles = Object.fromEntries(Object.entries(resolvedStyles).sort());\n}\n\nfunction crawlObjectProperties(entry, sources, resolvedStyles) {\n  var keys = Object.keys(entry);\n  keys.forEach(function (key) {\n    var value = entry[key];\n\n    if (typeof value === 'string') {\n      if (key === value) {\n        // Special case; this key is the name of the style's source/file/module.\n        sources.add(key);\n      } else {\n        var propertyValue = getPropertyValueForStyleName(value);\n\n        if (propertyValue != null) {\n          resolvedStyles[key] = propertyValue;\n        }\n      }\n    } else {\n      var nestedStyle = {};\n      resolvedStyles[key] = nestedStyle;\n      crawlData([value], sources, nestedStyle);\n    }\n  });\n}\n\nfunction getPropertyValueForStyleName(styleName) {\n  if (cachedStyleNameToValueMap.has(styleName)) {\n    return cachedStyleNameToValueMap.get(styleName);\n  }\n\n  for (var styleSheetIndex = 0; styleSheetIndex < document.styleSheets.length; styleSheetIndex++) {\n    var styleSheet = document.styleSheets[styleSheetIndex];\n    var rules = null; // this might throw if CORS rules are enforced https://www.w3.org/TR/cssom-1/#the-cssstylesheet-interface\n\n    try {\n      rules = styleSheet.cssRules;\n    } catch (_e) {\n      continue;\n    }\n\n    for (var ruleIndex = 0; ruleIndex < rules.length; ruleIndex++) {\n      if (!(rules[ruleIndex] instanceof CSSStyleRule)) {\n        continue;\n      }\n\n      var rule = rules[ruleIndex];\n      var cssText = rule.cssText,\n          selectorText = rule.selectorText,\n          style = rule.style;\n\n      if (selectorText != null) {\n        if (selectorText.startsWith(\".\".concat(styleName))) {\n          var match = cssText.match(/{ *([a-z\\-]+):/);\n\n          if (match !== null) {\n            var property = match[1];\n            var value = style.getPropertyValue(property);\n            cachedStyleNameToValueMap.set(styleName, value);\n            return value;\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL1N0eWxlWC91dGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7Ozs7QUFVQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFHQTs7QUFFQTtBQUtBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUtBO0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUpBO0FBQUE7QUFBQTs7QUFPQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvU3R5bGVYL3V0aWxzLmpzPzQ4NjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge1N0eWxlWFBsdWdpbn0gZnJvbSAncmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9mcm9udGVuZC90eXBlcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICdyZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2lzQXJyYXknO1xuXG5jb25zdCBjYWNoZWRTdHlsZU5hbWVUb1ZhbHVlTWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVYRGF0YShkYXRhOiBhbnkpOiBTdHlsZVhQbHVnaW4ge1xuICBjb25zdCBzb3VyY2VzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIGNvbnN0IHJlc29sdmVkU3R5bGVzID0ge307XG5cbiAgY3Jhd2xEYXRhKGRhdGEsIHNvdXJjZXMsIHJlc29sdmVkU3R5bGVzKTtcblxuICByZXR1cm4ge1xuICAgIHNvdXJjZXM6IEFycmF5LmZyb20oc291cmNlcykuc29ydCgpLFxuICAgIHJlc29sdmVkU3R5bGVzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3Jhd2xEYXRhKFxuICBkYXRhOiBhbnksXG4gIHNvdXJjZXM6IFNldDxzdHJpbmc+LFxuICByZXNvbHZlZFN0eWxlczogT2JqZWN0LFxuKTogdm9pZCB7XG4gIGlmIChkYXRhID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIGRhdGEuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICBpZiAoZW50cnkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5KGVudHJ5KSkge1xuICAgICAgICBjcmF3bERhdGEoZW50cnksIHNvdXJjZXMsIHJlc29sdmVkU3R5bGVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyYXdsT2JqZWN0UHJvcGVydGllcyhlbnRyeSwgc291cmNlcywgcmVzb2x2ZWRTdHlsZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNyYXdsT2JqZWN0UHJvcGVydGllcyhkYXRhLCBzb3VyY2VzLCByZXNvbHZlZFN0eWxlcyk7XG4gIH1cblxuICByZXNvbHZlZFN0eWxlcyA9IE9iamVjdC5mcm9tRW50cmllczxzdHJpbmcsIGFueT4oXG4gICAgT2JqZWN0LmVudHJpZXMocmVzb2x2ZWRTdHlsZXMpLnNvcnQoKSxcbiAgKTtcbn1cblxuZnVuY3Rpb24gY3Jhd2xPYmplY3RQcm9wZXJ0aWVzKFxuICBlbnRyeTogT2JqZWN0LFxuICBzb3VyY2VzOiBTZXQ8c3RyaW5nPixcbiAgcmVzb2x2ZWRTdHlsZXM6IE9iamVjdCxcbik6IHZvaWQge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZW50cnkpO1xuICBrZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGVudHJ5W2tleV07XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChrZXkgPT09IHZhbHVlKSB7XG4gICAgICAgIC8vIFNwZWNpYWwgY2FzZTsgdGhpcyBrZXkgaXMgdGhlIG5hbWUgb2YgdGhlIHN0eWxlJ3Mgc291cmNlL2ZpbGUvbW9kdWxlLlxuICAgICAgICBzb3VyY2VzLmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZSA9IGdldFByb3BlcnR5VmFsdWVGb3JTdHlsZU5hbWUodmFsdWUpO1xuICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgcmVzb2x2ZWRTdHlsZXNba2V5XSA9IHByb3BlcnR5VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmVzdGVkU3R5bGUgPSB7fTtcbiAgICAgIHJlc29sdmVkU3R5bGVzW2tleV0gPSBuZXN0ZWRTdHlsZTtcbiAgICAgIGNyYXdsRGF0YShbdmFsdWVdLCBzb3VyY2VzLCBuZXN0ZWRTdHlsZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZUZvclN0eWxlTmFtZShzdHlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICBpZiAoY2FjaGVkU3R5bGVOYW1lVG9WYWx1ZU1hcC5oYXMoc3R5bGVOYW1lKSkge1xuICAgIHJldHVybiAoKGNhY2hlZFN0eWxlTmFtZVRvVmFsdWVNYXAuZ2V0KHN0eWxlTmFtZSk6IGFueSk6IHN0cmluZyk7XG4gIH1cblxuICBmb3IgKFxuICAgIGxldCBzdHlsZVNoZWV0SW5kZXggPSAwO1xuICAgIHN0eWxlU2hlZXRJbmRleCA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDtcbiAgICBzdHlsZVNoZWV0SW5kZXgrK1xuICApIHtcbiAgICBjb25zdCBzdHlsZVNoZWV0ID0gKChkb2N1bWVudC5zdHlsZVNoZWV0c1tcbiAgICAgIHN0eWxlU2hlZXRJbmRleFxuICAgIF06IGFueSk6IENTU1N0eWxlU2hlZXQpO1xuICAgIGxldCBydWxlczogQ1NTUnVsZUxpc3QgfCBudWxsID0gbnVsbDtcbiAgICAvLyB0aGlzIG1pZ2h0IHRocm93IGlmIENPUlMgcnVsZXMgYXJlIGVuZm9yY2VkIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3NvbS0xLyN0aGUtY3Nzc3R5bGVzaGVldC1pbnRlcmZhY2VcbiAgICB0cnkge1xuICAgICAgcnVsZXMgPSBzdHlsZVNoZWV0LmNzc1J1bGVzO1xuICAgIH0gY2F0Y2ggKF9lKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBydWxlSW5kZXggPSAwOyBydWxlSW5kZXggPCBydWxlcy5sZW5ndGg7IHJ1bGVJbmRleCsrKSB7XG4gICAgICBpZiAoIShydWxlc1tydWxlSW5kZXhdIGluc3RhbmNlb2YgQ1NTU3R5bGVSdWxlKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJ1bGUgPSAoKHJ1bGVzW3J1bGVJbmRleF06IGFueSk6IENTU1N0eWxlUnVsZSk7XG4gICAgICBjb25zdCB7Y3NzVGV4dCwgc2VsZWN0b3JUZXh0LCBzdHlsZX0gPSBydWxlO1xuXG4gICAgICBpZiAoc2VsZWN0b3JUZXh0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yVGV4dC5zdGFydHNXaXRoKGAuJHtzdHlsZU5hbWV9YCkpIHtcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IGNzc1RleHQubWF0Y2goL3sgKihbYS16XFwtXSspOi8pO1xuICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHkgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cbiAgICAgICAgICAgIGNhY2hlZFN0eWxlTmFtZVRvVmFsdWVNYXAuc2V0KHN0eWxlTmFtZSwgdmFsdWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/StyleX/utils.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/agent.js":
/*!*****************************************************!*\
  !*** ../react-devtools-shared/src/backend/agent.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Agent)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"../react-devtools-shared/src/events.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ \"../react-devtools-shared/src/constants.js\");\n/* harmony import */ var _views_Highlighter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./views/Highlighter */ \"../react-devtools-shared/src/backend/views/Highlighter/index.js\");\n/* harmony import */ var _views_TraceUpdates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./views/TraceUpdates */ \"../react-devtools-shared/src/backend/views/TraceUpdates/index.js\");\n/* harmony import */ var react_devtools_shared_src_bridge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-devtools-shared/src/bridge */ \"../react-devtools-shared/src/bridge.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"../react-devtools-shared/src/backend/utils/index.js\");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../storage */ \"../react-devtools-shared/src/storage.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\n\n\n\n\nvar debug = function debug(methodName) {\n  if (_constants__WEBPACK_IMPORTED_MODULE_1__.__DEBUG__) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_console = console).log.apply(_console, [\"%cAgent %c\".concat(methodName), 'color: purple; font-weight: bold;', 'font-weight: bold;'].concat(args));\n  }\n};\n\nvar Agent = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Agent, _EventEmitter);\n\n  var _super = _createSuper(Agent);\n\n  function Agent(bridge) {\n    var _this;\n\n    var isProfiling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var onReloadAndProfile = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Agent);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"_isProfiling\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rendererInterfaces\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_persistedSelection\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_persistedSelectionMatch\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_traceUpdatesEnabled\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"clearErrorsAndWarnings\", function (_ref) {\n      var rendererID = _ref.rendererID;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\"\"));\n      } else {\n        renderer.clearErrorsAndWarnings();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearErrorsForElementID\", function (_ref2) {\n      var id = _ref2.id,\n          rendererID = _ref2.rendererID;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\"\"));\n      } else {\n        renderer.clearErrorsForElementID(id);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearWarningsForElementID\", function (_ref3) {\n      var id = _ref3.id,\n          rendererID = _ref3.rendererID;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\"\"));\n      } else {\n        renderer.clearWarningsForElementID(id);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"copyElementPath\", function (_ref4) {\n      var id = _ref4.id,\n          path = _ref4.path,\n          rendererID = _ref4.rendererID;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        var value = renderer.getSerializedElementValueByPath(id, path);\n\n        if (value != null) {\n          _this._bridge.send('saveToClipboard', value);\n        } else {\n          console.warn(\"Unable to obtain serialized value for element \\\"\".concat(id, \"\\\"\"));\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deletePath\", function (_ref5) {\n      var hookID = _ref5.hookID,\n          id = _ref5.id,\n          path = _ref5.path,\n          rendererID = _ref5.rendererID,\n          type = _ref5.type;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        renderer.deletePath(type, id, hookID, path);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getBackendVersion\", function () {\n      var version = \"6.0.1-bcee8aaec5\";\n\n      if (version) {\n        _this._bridge.send('backendVersion', version);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getBridgeProtocol\", function () {\n      _this._bridge.send('bridgeProtocol', react_devtools_shared_src_bridge__WEBPACK_IMPORTED_MODULE_4__.currentBridgeProtocol);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getProfilingData\", function (_ref6) {\n      var rendererID = _ref6.rendererID;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\"\"));\n      }\n\n      _this._bridge.send('profilingData', renderer.getProfilingData());\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getProfilingStatus\", function () {\n      _this._bridge.send('profilingStatus', _this._isProfiling);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getOwnersList\", function (_ref7) {\n      var id = _ref7.id,\n          rendererID = _ref7.rendererID;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        var owners = renderer.getOwnersList(id);\n\n        _this._bridge.send('ownersList', {\n          id: id,\n          owners: owners\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"inspectElement\", function (_ref8) {\n      var forceFullData = _ref8.forceFullData,\n          id = _ref8.id,\n          path = _ref8.path,\n          rendererID = _ref8.rendererID,\n          requestID = _ref8.requestID;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        _this._bridge.send('inspectedElement', renderer.inspectElement(requestID, id, path, forceFullData)); // When user selects an element, stop trying to restore the selection,\n        // and instead remember the current selection for the next reload.\n\n\n        if (_this._persistedSelectionMatch === null || _this._persistedSelectionMatch.id !== id) {\n          _this._persistedSelection = null;\n          _this._persistedSelectionMatch = null;\n          renderer.setTrackedPath(null); // Throttle persisting the selection.\n\n          _this._lastSelectedElementID = id;\n          _this._lastSelectedRendererID = rendererID;\n\n          if (!_this._persistSelectionTimerScheduled) {\n            _this._persistSelectionTimerScheduled = true;\n            setTimeout(_this._persistSelection, 1000);\n          }\n        } // TODO: If there was a way to change the selected DOM element\n        // in built-in Elements tab without forcing a switch to it, we'd do it here.\n        // For now, it doesn't seem like there is a way to do that:\n        // https://github.com/bvaughn/react-devtools-experimental/issues/102\n        // (Setting $0 doesn't work, and calling inspect() switches the tab.)\n\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"logElementToConsole\", function (_ref9) {\n      var id = _ref9.id,\n          rendererID = _ref9.rendererID;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        renderer.logElementToConsole(id);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"overrideError\", function (_ref10) {\n      var id = _ref10.id,\n          rendererID = _ref10.rendererID,\n          forceError = _ref10.forceError;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        renderer.overrideError(id, forceError);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"overrideSuspense\", function (_ref11) {\n      var id = _ref11.id,\n          rendererID = _ref11.rendererID,\n          forceFallback = _ref11.forceFallback;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        renderer.overrideSuspense(id, forceFallback);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"overrideValueAtPath\", function (_ref12) {\n      var hookID = _ref12.hookID,\n          id = _ref12.id,\n          path = _ref12.path,\n          rendererID = _ref12.rendererID,\n          type = _ref12.type,\n          value = _ref12.value;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        renderer.overrideValueAtPath(type, id, hookID, path, value);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"overrideContext\", function (_ref13) {\n      var id = _ref13.id,\n          path = _ref13.path,\n          rendererID = _ref13.rendererID,\n          wasForwarded = _ref13.wasForwarded,\n          value = _ref13.value;\n\n      // Don't forward a message that's already been forwarded by the front-end Bridge.\n      // We only need to process the override command once!\n      if (!wasForwarded) {\n        _this.overrideValueAtPath({\n          id: id,\n          path: path,\n          rendererID: rendererID,\n          type: 'context',\n          value: value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"overrideHookState\", function (_ref14) {\n      var id = _ref14.id,\n          hookID = _ref14.hookID,\n          path = _ref14.path,\n          rendererID = _ref14.rendererID,\n          wasForwarded = _ref14.wasForwarded,\n          value = _ref14.value;\n\n      // Don't forward a message that's already been forwarded by the front-end Bridge.\n      // We only need to process the override command once!\n      if (!wasForwarded) {\n        _this.overrideValueAtPath({\n          id: id,\n          path: path,\n          rendererID: rendererID,\n          type: 'hooks',\n          value: value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"overrideProps\", function (_ref15) {\n      var id = _ref15.id,\n          path = _ref15.path,\n          rendererID = _ref15.rendererID,\n          wasForwarded = _ref15.wasForwarded,\n          value = _ref15.value;\n\n      // Don't forward a message that's already been forwarded by the front-end Bridge.\n      // We only need to process the override command once!\n      if (!wasForwarded) {\n        _this.overrideValueAtPath({\n          id: id,\n          path: path,\n          rendererID: rendererID,\n          type: 'props',\n          value: value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"overrideState\", function (_ref16) {\n      var id = _ref16.id,\n          path = _ref16.path,\n          rendererID = _ref16.rendererID,\n          wasForwarded = _ref16.wasForwarded,\n          value = _ref16.value;\n\n      // Don't forward a message that's already been forwarded by the front-end Bridge.\n      // We only need to process the override command once!\n      if (!wasForwarded) {\n        _this.overrideValueAtPath({\n          id: id,\n          path: path,\n          rendererID: rendererID,\n          type: 'state',\n          value: value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onReloadAndProfileSupportedByHost\", function () {\n      _this._bridge.send('isReloadAndProfileSupportedByBackend', true);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"reloadAndProfile\", function (_ref17) {\n      var recordChangeDescriptions = _ref17.recordChangeDescriptions,\n          recordTimeline = _ref17.recordTimeline;\n\n      if (typeof _this._onReloadAndProfile === 'function') {\n        _this._onReloadAndProfile(recordChangeDescriptions, recordTimeline);\n      } // This code path should only be hit if the shell has explicitly told the Store that it supports profiling.\n      // In that case, the shell must also listen for this specific message to know when it needs to reload the app.\n      // The agent can't do this in a way that is renderer agnostic.\n\n\n      _this._bridge.send('reloadAppForProfiling');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renamePath\", function (_ref18) {\n      var hookID = _ref18.hookID,\n          id = _ref18.id,\n          newPath = _ref18.newPath,\n          oldPath = _ref18.oldPath,\n          rendererID = _ref18.rendererID,\n          type = _ref18.type;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        renderer.renamePath(type, id, hookID, oldPath, newPath);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTraceUpdatesEnabled\", function (traceUpdatesEnabled) {\n      _this._traceUpdatesEnabled = traceUpdatesEnabled;\n      (0,_views_TraceUpdates__WEBPACK_IMPORTED_MODULE_3__.toggleEnabled)(traceUpdatesEnabled);\n\n      for (var rendererID in _this._rendererInterfaces) {\n        var renderer = _this._rendererInterfaces[rendererID];\n        renderer.setTraceUpdatesEnabled(traceUpdatesEnabled);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"syncSelectionFromBuiltinElementsPanel\", function () {\n      var target = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;\n\n      if (target == null) {\n        return;\n      }\n\n      _this.selectNode(target);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"shutdown\", function () {\n      // Clean up the overlay if visible, and associated events.\n      _this.emit('shutdown');\n\n      _this._bridge.removeAllListeners();\n\n      _this.removeAllListeners();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startProfiling\", function (_ref19) {\n      var recordChangeDescriptions = _ref19.recordChangeDescriptions,\n          recordTimeline = _ref19.recordTimeline;\n      _this._isProfiling = true;\n\n      for (var rendererID in _this._rendererInterfaces) {\n        var renderer = _this._rendererInterfaces[rendererID];\n        renderer.startProfiling(recordChangeDescriptions, recordTimeline);\n      }\n\n      _this._bridge.send('profilingStatus', _this._isProfiling);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopProfiling\", function () {\n      _this._isProfiling = false;\n\n      for (var rendererID in _this._rendererInterfaces) {\n        var renderer = _this._rendererInterfaces[rendererID];\n        renderer.stopProfiling();\n      }\n\n      _this._bridge.send('profilingStatus', _this._isProfiling);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopInspectingNative\", function (selected) {\n      _this._bridge.send('stopInspectingHost', selected);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"storeAsGlobal\", function (_ref20) {\n      var count = _ref20.count,\n          id = _ref20.id,\n          path = _ref20.path,\n          rendererID = _ref20.rendererID;\n      var renderer = _this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      } else {\n        renderer.storeAsGlobal(id, path, count);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateHookSettings\", function (settings) {\n      // Propagate the settings, so Backend can subscribe to it and modify hook\n      _this.emit('updateHookSettings', settings);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getHookSettings\", function () {\n      _this.emit('getHookSettings');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHookSettings\", function (settings) {\n      _this._bridge.send('hookSettings', settings);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateComponentFilters\", function (componentFilters) {\n      for (var rendererIDString in _this._rendererInterfaces) {\n        var rendererID = +rendererIDString;\n        var renderer = _this._rendererInterfaces[rendererID];\n\n        if (_this._lastSelectedRendererID === rendererID) {\n          // Changing component filters will unmount and remount the DevTools tree.\n          // Track the last selection's path so we can restore the selection.\n          var path = renderer.getPathForElement(_this._lastSelectedElementID);\n\n          if (path !== null) {\n            renderer.setTrackedPath(path);\n            _this._persistedSelection = {\n              rendererID: rendererID,\n              path: path\n            };\n          }\n        }\n\n        renderer.updateComponentFilters(componentFilters);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getEnvironmentNames\", function () {\n      var accumulatedNames = null;\n\n      for (var rendererID in _this._rendererInterfaces) {\n        var renderer = _this._rendererInterfaces[+rendererID];\n        var names = renderer.getEnvironmentNames();\n\n        if (accumulatedNames === null) {\n          accumulatedNames = names;\n        } else {\n          for (var i = 0; i < names.length; i++) {\n            if (accumulatedNames.indexOf(names[i]) === -1) {\n              accumulatedNames.push(names[i]);\n            }\n          }\n        }\n      }\n\n      _this._bridge.send('environmentNames', accumulatedNames || []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTraceUpdates\", function (nodes) {\n      _this.emit('traceUpdates', nodes);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFastRefreshScheduled\", function () {\n      if (_constants__WEBPACK_IMPORTED_MODULE_1__.__DEBUG__) {\n        debug('onFastRefreshScheduled');\n      }\n\n      _this._bridge.send('fastRefreshScheduled');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHookOperations\", function (operations) {\n      if (_constants__WEBPACK_IMPORTED_MODULE_1__.__DEBUG__) {\n        debug('onHookOperations', \"(\".concat(operations.length, \") [\").concat(operations.join(', '), \"]\"));\n      } // TODO:\n      // The chrome.runtime does not currently support transferables; it forces JSON serialization.\n      // See bug https://bugs.chromium.org/p/chromium/issues/detail?id=927134\n      //\n      // Regarding transferables, the postMessage doc states:\n      // If the ownership of an object is transferred, it becomes unusable (neutered)\n      // in the context it was sent from and becomes available only to the worker it was sent to.\n      //\n      // Even though Chrome is eventually JSON serializing the array buffer,\n      // using the transferable approach also sometimes causes it to throw:\n      //   DOMException: Failed to execute 'postMessage' on 'Window': ArrayBuffer at index 0 is already neutered.\n      //\n      // See bug https://github.com/bvaughn/react-devtools-experimental/issues/25\n      //\n      // The Store has a fallback in place that parses the message as JSON if the type isn't an array.\n      // For now the simplest fix seems to be to not transfer the array.\n      // This will negatively impact performance on Firefox so it's unfortunate,\n      // but until we're able to fix the Chrome error mentioned above, it seems necessary.\n      //\n      // this._bridge.send('operations', operations, [operations.buffer]);\n\n\n      _this._bridge.send('operations', operations);\n\n      if (_this._persistedSelection !== null) {\n        var rendererID = operations[0];\n\n        if (_this._persistedSelection.rendererID === rendererID) {\n          // Check if we can select a deeper match for the persisted selection.\n          var renderer = _this._rendererInterfaces[rendererID];\n\n          if (renderer == null) {\n            console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\"\"));\n          } else {\n            var prevMatch = _this._persistedSelectionMatch;\n            var nextMatch = renderer.getBestMatchForTrackedPath();\n            _this._persistedSelectionMatch = nextMatch;\n            var prevMatchID = prevMatch !== null ? prevMatch.id : null;\n            var nextMatchID = nextMatch !== null ? nextMatch.id : null;\n\n            if (prevMatchID !== nextMatchID) {\n              if (nextMatchID !== null) {\n                // We moved forward, unlocking a deeper node.\n                _this._bridge.send('selectElement', nextMatchID);\n              }\n            }\n\n            if (nextMatch !== null && nextMatch.isFullMatch) {\n              // We've just unlocked the innermost selected node.\n              // There's no point tracking it further.\n              _this._persistedSelection = null;\n              _this._persistedSelectionMatch = null;\n              renderer.setTrackedPath(null);\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getIfHasUnsupportedRendererVersion\", function () {\n      _this.emit('getIfHasUnsupportedRendererVersion');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_persistSelectionTimerScheduled\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_lastSelectedRendererID\", -1);\n\n    _defineProperty(_assertThisInitialized(_this), \"_lastSelectedElementID\", -1);\n\n    _defineProperty(_assertThisInitialized(_this), \"_persistSelection\", function () {\n      _this._persistSelectionTimerScheduled = false;\n      var rendererID = _this._lastSelectedRendererID;\n      var id = _this._lastSelectedElementID; // This is throttled, so both renderer and selected ID\n      // might not be available by the time we read them.\n      // This is why we need the defensive checks here.\n\n      var renderer = _this._rendererInterfaces[rendererID];\n      var path = renderer != null ? renderer.getPathForElement(id) : null;\n\n      if (path !== null) {\n        (0,_storage__WEBPACK_IMPORTED_MODULE_6__.sessionStorageSetItem)(_constants__WEBPACK_IMPORTED_MODULE_1__.SESSION_STORAGE_LAST_SELECTION_KEY, JSON.stringify({\n          rendererID: rendererID,\n          path: path\n        }));\n      } else {\n        (0,_storage__WEBPACK_IMPORTED_MODULE_6__.sessionStorageRemoveItem)(_constants__WEBPACK_IMPORTED_MODULE_1__.SESSION_STORAGE_LAST_SELECTION_KEY);\n      }\n    });\n\n    _this._isProfiling = isProfiling;\n    _this._onReloadAndProfile = onReloadAndProfile;\n    var persistedSelectionString = (0,_storage__WEBPACK_IMPORTED_MODULE_6__.sessionStorageGetItem)(_constants__WEBPACK_IMPORTED_MODULE_1__.SESSION_STORAGE_LAST_SELECTION_KEY);\n\n    if (persistedSelectionString != null) {\n      _this._persistedSelection = JSON.parse(persistedSelectionString);\n    }\n\n    _this._bridge = bridge;\n    bridge.addListener('clearErrorsAndWarnings', _this.clearErrorsAndWarnings);\n    bridge.addListener('clearErrorsForElementID', _this.clearErrorsForElementID);\n    bridge.addListener('clearWarningsForElementID', _this.clearWarningsForElementID);\n    bridge.addListener('copyElementPath', _this.copyElementPath);\n    bridge.addListener('deletePath', _this.deletePath);\n    bridge.addListener('getBackendVersion', _this.getBackendVersion);\n    bridge.addListener('getBridgeProtocol', _this.getBridgeProtocol);\n    bridge.addListener('getProfilingData', _this.getProfilingData);\n    bridge.addListener('getProfilingStatus', _this.getProfilingStatus);\n    bridge.addListener('getOwnersList', _this.getOwnersList);\n    bridge.addListener('inspectElement', _this.inspectElement);\n    bridge.addListener('logElementToConsole', _this.logElementToConsole);\n    bridge.addListener('overrideError', _this.overrideError);\n    bridge.addListener('overrideSuspense', _this.overrideSuspense);\n    bridge.addListener('overrideValueAtPath', _this.overrideValueAtPath);\n    bridge.addListener('reloadAndProfile', _this.reloadAndProfile);\n    bridge.addListener('renamePath', _this.renamePath);\n    bridge.addListener('setTraceUpdatesEnabled', _this.setTraceUpdatesEnabled);\n    bridge.addListener('startProfiling', _this.startProfiling);\n    bridge.addListener('stopProfiling', _this.stopProfiling);\n    bridge.addListener('storeAsGlobal', _this.storeAsGlobal);\n    bridge.addListener('syncSelectionFromBuiltinElementsPanel', _this.syncSelectionFromBuiltinElementsPanel);\n    bridge.addListener('shutdown', _this.shutdown);\n    bridge.addListener('updateHookSettings', _this.updateHookSettings);\n    bridge.addListener('getHookSettings', _this.getHookSettings);\n    bridge.addListener('updateComponentFilters', _this.updateComponentFilters);\n    bridge.addListener('getEnvironmentNames', _this.getEnvironmentNames);\n    bridge.addListener('getIfHasUnsupportedRendererVersion', _this.getIfHasUnsupportedRendererVersion); // Temporarily support older standalone front-ends sending commands to newer embedded backends.\n    // We do this because React Native embeds the React DevTools backend,\n    // but cannot control which version of the frontend users use.\n\n    bridge.addListener('overrideContext', _this.overrideContext);\n    bridge.addListener('overrideHookState', _this.overrideHookState);\n    bridge.addListener('overrideProps', _this.overrideProps);\n    bridge.addListener('overrideState', _this.overrideState);\n    (0,_views_Highlighter__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(bridge, _assertThisInitialized(_this));\n    (0,_views_TraceUpdates__WEBPACK_IMPORTED_MODULE_3__.initialize)(_assertThisInitialized(_this)); // By this time, Store should already be initialized and intercept events\n\n    bridge.send('backendInitialized');\n\n    if (_this._isProfiling) {\n      bridge.send('profilingStatus', true);\n    }\n\n    return _this;\n  }\n\n  _createClass(Agent, [{\n    key: \"getInstanceAndStyle\",\n    value: function getInstanceAndStyle(_ref21) {\n      var id = _ref21.id,\n          rendererID = _ref21.rendererID;\n      var renderer = this._rendererInterfaces[rendererID];\n\n      if (renderer == null) {\n        console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\"\"));\n        return null;\n      }\n\n      return renderer.getInstanceAndStyle(id);\n    }\n  }, {\n    key: \"getIDForHostInstance\",\n    value: function getIDForHostInstance(target) {\n      if ((0,_utils__WEBPACK_IMPORTED_MODULE_5__.isReactNativeEnvironment)() || typeof target.nodeType !== 'number') {\n        // In React Native or non-DOM we simply pick any renderer that has a match.\n        for (var rendererID in this._rendererInterfaces) {\n          var renderer = this._rendererInterfaces[rendererID];\n\n          try {\n            var match = renderer.getElementIDForHostInstance(target);\n\n            if (match != null) {\n              return match;\n            }\n          } catch (error) {// Some old React versions might throw if they can't find a match.\n            // If so we should ignore it...\n          }\n        }\n\n        return null;\n      } else {\n        // In the DOM we use a smarter mechanism to find the deepest a DOM node\n        // that is registered if there isn't an exact match.\n        var bestMatch = null;\n        var bestRenderer = null; // Find the nearest ancestor which is mounted by a React.\n\n        for (var _rendererID in this._rendererInterfaces) {\n          var _renderer = this._rendererInterfaces[_rendererID];\n\n          var nearestNode = _renderer.getNearestMountedDOMNode(target);\n\n          if (nearestNode !== null) {\n            if (nearestNode === target) {\n              // Exact match we can exit early.\n              bestMatch = nearestNode;\n              bestRenderer = _renderer;\n              break;\n            }\n\n            if (bestMatch === null || bestMatch.contains(nearestNode)) {\n              // If this is the first match or the previous match contains the new match,\n              // so the new match is a deeper and therefore better match.\n              bestMatch = nearestNode;\n              bestRenderer = _renderer;\n            }\n          }\n        }\n\n        if (bestRenderer != null && bestMatch != null) {\n          try {\n            return bestRenderer.getElementIDForHostInstance(bestMatch);\n          } catch (error) {// Some old React versions might throw if they can't find a match.\n            // If so we should ignore it...\n          }\n        }\n\n        return null;\n      }\n    }\n  }, {\n    key: \"getComponentNameForHostInstance\",\n    value: function getComponentNameForHostInstance(target) {\n      // We duplicate this code from getIDForHostInstance to avoid an object allocation.\n      if ((0,_utils__WEBPACK_IMPORTED_MODULE_5__.isReactNativeEnvironment)() || typeof target.nodeType !== 'number') {\n        // In React Native or non-DOM we simply pick any renderer that has a match.\n        for (var rendererID in this._rendererInterfaces) {\n          var renderer = this._rendererInterfaces[rendererID];\n\n          try {\n            var id = renderer.getElementIDForHostInstance(target);\n\n            if (id) {\n              return renderer.getDisplayNameForElementID(id);\n            }\n          } catch (error) {// Some old React versions might throw if they can't find a match.\n            // If so we should ignore it...\n          }\n        }\n\n        return null;\n      } else {\n        // In the DOM we use a smarter mechanism to find the deepest a DOM node\n        // that is registered if there isn't an exact match.\n        var bestMatch = null;\n        var bestRenderer = null; // Find the nearest ancestor which is mounted by a React.\n\n        for (var _rendererID2 in this._rendererInterfaces) {\n          var _renderer2 = this._rendererInterfaces[_rendererID2];\n\n          var nearestNode = _renderer2.getNearestMountedDOMNode(target);\n\n          if (nearestNode !== null) {\n            if (nearestNode === target) {\n              // Exact match we can exit early.\n              bestMatch = nearestNode;\n              bestRenderer = _renderer2;\n              break;\n            }\n\n            if (bestMatch === null || bestMatch.contains(nearestNode)) {\n              // If this is the first match or the previous match contains the new match,\n              // so the new match is a deeper and therefore better match.\n              bestMatch = nearestNode;\n              bestRenderer = _renderer2;\n            }\n          }\n        }\n\n        if (bestRenderer != null && bestMatch != null) {\n          try {\n            var _id = bestRenderer.getElementIDForHostInstance(bestMatch);\n\n            if (_id) {\n              return bestRenderer.getDisplayNameForElementID(_id);\n            }\n          } catch (error) {// Some old React versions might throw if they can't find a match.\n            // If so we should ignore it...\n          }\n        }\n\n        return null;\n      }\n    }\n  }, {\n    key: \"selectNode\",\n    value: function selectNode(target) {\n      var id = this.getIDForHostInstance(target);\n\n      if (id !== null) {\n        this._bridge.send('selectElement', id);\n      }\n    }\n  }, {\n    key: \"registerRendererInterface\",\n    value: function registerRendererInterface(rendererID, rendererInterface) {\n      this._rendererInterfaces[rendererID] = rendererInterface;\n      rendererInterface.setTraceUpdatesEnabled(this._traceUpdatesEnabled); // When the renderer is attached, we need to tell it whether\n      // we remember the previous selection that we'd like to restore.\n      // It'll start tracking mounts for matches to the last selection path.\n\n      var selection = this._persistedSelection;\n\n      if (selection !== null && selection.rendererID === rendererID) {\n        rendererInterface.setTrackedPath(selection.path);\n      }\n    }\n  }, {\n    key: \"onUnsupportedRenderer\",\n    value: function onUnsupportedRenderer() {\n      this._bridge.send('unsupportedRendererVersion');\n    }\n  }, {\n    key: \"rendererInterfaces\",\n    get: function get() {\n      return this._rendererInterfaces;\n    }\n  }]);\n\n  return Agent;\n}(_events__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/agent.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js":
/*!*********************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"describeFiber\": () => (/* binding */ describeFiber),\n/* harmony export */   \"getOwnerStackByFiberInDev\": () => (/* binding */ getOwnerStackByFiberInDev),\n/* harmony export */   \"getSourceLocationByFiber\": () => (/* binding */ getSourceLocationByFiber),\n/* harmony export */   \"getStackByFiberInDevAndProd\": () => (/* binding */ getStackByFiberInDevAndProd),\n/* harmony export */   \"supportsConsoleTasks\": () => (/* binding */ supportsConsoleTasks),\n/* harmony export */   \"supportsOwnerStacks\": () => (/* binding */ supportsOwnerStacks)\n/* harmony export */ });\n/* harmony import */ var _shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/DevToolsComponentStackFrame */ \"../react-devtools-shared/src/backend/shared/DevToolsComponentStackFrame.js\");\n/* harmony import */ var _shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/DevToolsOwnerStack */ \"../react-devtools-shared/src/backend/shared/DevToolsOwnerStack.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This is a DevTools fork of ReactFiberComponentStack.\n// This fork enables DevTools to use the same \"native\" component stack format,\n// while still maintaining support for multiple renderer versions\n// (which use different values for ReactTypeOfWork).\n\n\nfunction describeFiber(workTagMap, workInProgress, currentDispatcherRef) {\n  var HostHoistable = workTagMap.HostHoistable,\n      HostSingleton = workTagMap.HostSingleton,\n      HostComponent = workTagMap.HostComponent,\n      LazyComponent = workTagMap.LazyComponent,\n      SuspenseComponent = workTagMap.SuspenseComponent,\n      SuspenseListComponent = workTagMap.SuspenseListComponent,\n      FunctionComponent = workTagMap.FunctionComponent,\n      IndeterminateComponent = workTagMap.IndeterminateComponent,\n      SimpleMemoComponent = workTagMap.SimpleMemoComponent,\n      ForwardRef = workTagMap.ForwardRef,\n      ClassComponent = workTagMap.ClassComponent,\n      ViewTransitionComponent = workTagMap.ViewTransitionComponent;\n\n  switch (workInProgress.tag) {\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      return (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)(workInProgress.type);\n\n    case LazyComponent:\n      // TODO: When we support Thenables as component types we should rename this.\n      return (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)('Lazy');\n\n    case SuspenseComponent:\n      return (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)('Suspense');\n\n    case SuspenseListComponent:\n      return (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)('SuspenseList');\n\n    case ViewTransitionComponent:\n      return (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)('ViewTransition');\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeFunctionComponentFrame)(workInProgress.type, currentDispatcherRef);\n\n    case ForwardRef:\n      return (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeFunctionComponentFrame)(workInProgress.type.render, currentDispatcherRef);\n\n    case ClassComponent:\n      return (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeClassComponentFrame)(workInProgress.type, currentDispatcherRef);\n\n    default:\n      return '';\n  }\n}\nfunction getStackByFiberInDevAndProd(workTagMap, workInProgress, currentDispatcherRef) {\n  try {\n    var info = '';\n    var node = workInProgress;\n\n    do {\n      info += describeFiber(workTagMap, node, currentDispatcherRef); // Add any Server Component stack frames in reverse order.\n\n      var debugInfo = node._debugInfo;\n\n      if (debugInfo) {\n        for (var i = debugInfo.length - 1; i >= 0; i--) {\n          var entry = debugInfo[i];\n\n          if (typeof entry.name === 'string') {\n            info += (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeDebugInfoFrame)(entry.name, entry.env);\n          }\n        }\n      } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\nfunction getSourceLocationByFiber(workTagMap, fiber, currentDispatcherRef) {\n  // This is like getStackByFiberInDevAndProd but just the first stack frame.\n  try {\n    var info = describeFiber(workTagMap, fiber, currentDispatcherRef);\n\n    if (info !== '') {\n      return info.slice(1); // skip the leading newline\n    }\n  } catch (x) {\n    console.error(x);\n  }\n\n  return null;\n}\nfunction supportsConsoleTasks(fiber) {\n  // If this Fiber supports native console.createTask then we are already running\n  // inside a native async stack trace if it's active - meaning the DevTools is open.\n  // Ideally we'd detect if this task was created while the DevTools was open or not.\n  return !!fiber._debugTask;\n}\nfunction supportsOwnerStacks(fiber) {\n  // If this Fiber supports owner stacks then it'll have the _debugStack field.\n  // It might be null but that still means we should use the owner stack logic.\n  return fiber._debugStack !== undefined;\n}\nfunction getOwnerStackByFiberInDev(workTagMap, workInProgress, currentDispatcherRef) {\n  var HostHoistable = workTagMap.HostHoistable,\n      HostSingleton = workTagMap.HostSingleton,\n      HostText = workTagMap.HostText,\n      HostComponent = workTagMap.HostComponent,\n      SuspenseComponent = workTagMap.SuspenseComponent,\n      SuspenseListComponent = workTagMap.SuspenseListComponent,\n      ViewTransitionComponent = workTagMap.ViewTransitionComponent;\n\n  try {\n    var info = '';\n\n    if (workInProgress.tag === HostText) {\n      // Text nodes never have an owner/stack because they're not created through JSX.\n      // We use the parent since text nodes are always created through a host parent.\n      workInProgress = workInProgress.return;\n    } // The owner stack of the current fiber will be where it was created, i.e. inside its owner.\n    // There's no actual name of the currently executing component. Instead, that is available\n    // on the regular stack that's currently executing. However, for built-ins there is no such\n    // named stack frame and it would be ignored as being internal anyway. Therefore we add\n    // add one extra frame just to describe the \"current\" built-in component by name.\n\n\n    switch (workInProgress.tag) {\n      case HostHoistable:\n      case HostSingleton:\n      case HostComponent:\n        info += (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)(workInProgress.type);\n        break;\n\n      case SuspenseComponent:\n        info += (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)('Suspense');\n        break;\n\n      case SuspenseListComponent:\n        info += (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)('SuspenseList');\n        break;\n\n      case ViewTransitionComponent:\n        info += (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)('ViewTransition');\n        break;\n    }\n\n    var owner = workInProgress;\n\n    while (owner) {\n      if (typeof owner.tag === 'number') {\n        var fiber = owner;\n        owner = fiber._debugOwner;\n        var debugStack = fiber._debugStack; // If we don't actually print the stack if there is no owner of this JSX element.\n        // In a real app it's typically not useful since the root app is always controlled\n        // by the framework. These also tend to have noisy stacks because they're not rooted\n        // in a React render but in some imperative bootstrapping code. It could be useful\n        // if the element was created in module scope. E.g. hoisted. We could add a a single\n        // stack frame for context for example but it doesn't say much if that's a wrapper.\n\n        if (owner && debugStack) {\n          if (typeof debugStack !== 'string') {\n            debugStack = (0,_shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_1__.formatOwnerStack)(debugStack);\n          }\n\n          if (debugStack !== '') {\n            info += '\\n' + debugStack;\n          }\n        }\n      } else if (owner.debugStack != null) {\n        // Server Component\n        var ownerStack = owner.debugStack;\n        owner = owner.owner;\n\n        if (owner && ownerStack) {\n          info += '\\n' + (0,_shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_1__.formatOwnerStack)(ownerStack);\n        }\n      } else {\n        break;\n      }\n    }\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/fiber/renderer.js":
/*!**************************************************************!*\
  !*** ../react-devtools-shared/src/backend/fiber/renderer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"attach\": () => (/* binding */ attach),\n/* harmony export */   \"getDispatcherRef\": () => (/* binding */ getDispatcherRef),\n/* harmony export */   \"getInternalReactConstants\": () => (/* binding */ getInternalReactConstants)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/frontend/types */ \"../react-devtools-shared/src/frontend/types.js\");\n/* harmony import */ var react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-devtools-shared/src/utils */ \"../react-devtools-shared/src/utils.js\");\n/* harmony import */ var react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"../react-devtools-shared/src/backend/utils/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../constants */ \"../react-devtools-shared/src/constants.js\");\n/* harmony import */ var react_debug_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-debug-tools */ \"../../build/oss-experimental/react-debug-tools/index.js\");\n/* harmony import */ var _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/ReactSymbols */ \"../react-devtools-shared/src/backend/shared/ReactSymbols.js\");\n/* harmony import */ var react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-devtools-feature-flags */ \"../react-devtools-shared/src/config/DevToolsFeatureFlags.core-oss.js\");\n/* harmony import */ var _shared_DevToolsServerComponentLogs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/DevToolsServerComponentLogs */ \"../react-devtools-shared/src/backend/shared/DevToolsServerComponentLogs.js\");\n/* harmony import */ var shared_objectIs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! shared/objectIs */ \"../shared/objectIs.js\");\n/* harmony import */ var shared_hasOwnProperty__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! shared/hasOwnProperty */ \"../shared/hasOwnProperty.js\");\n/* harmony import */ var _DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DevToolsFiberComponentStack */ \"../react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js\");\n/* harmony import */ var _StyleX_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../StyleX/utils */ \"../react-devtools-shared/src/backend/StyleX/utils.js\");\n/* harmony import */ var _profilingHooks__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../profilingHooks */ \"../react-devtools-shared/src/backend/profilingHooks.js\");\n/* harmony import */ var _shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../shared/DevToolsOwnerStack */ \"../react-devtools-shared/src/backend/shared/DevToolsOwnerStack.js\");\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\n\n\n\n\n\n\n\n // $FlowFixMe[method-unbinding]\n\nvar toString = Object.prototype.toString;\n\nfunction isError(object) {\n  return toString.call(object) === '[object Error]';\n}\n\n\n\n\n // Kinds\n\nvar FIBER_INSTANCE = 0;\nvar VIRTUAL_INSTANCE = 1;\nvar FILTERED_FIBER_INSTANCE = 2; // This type represents a stateful instance of a Client Component i.e. a Fiber pair.\n// These instances also let us track stateful DevTools meta data like id and warnings.\n\nfunction createFiberInstance(fiber) {\n  return {\n    kind: FIBER_INSTANCE,\n    id: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getUID)(),\n    parent: null,\n    firstChild: null,\n    nextSibling: null,\n    source: null,\n    logCount: 0,\n    treeBaseDuration: 0,\n    data: fiber\n  };\n}\n\n// This is used to represent a filtered Fiber but still lets us find its host instance.\nfunction createFilteredFiberInstance(fiber) {\n  return {\n    kind: FILTERED_FIBER_INSTANCE,\n    id: 0,\n    parent: null,\n    firstChild: null,\n    nextSibling: null,\n    source: null,\n    logCount: 0,\n    treeBaseDuration: 0,\n    data: fiber\n  };\n} // This type represents a stateful instance of a Server Component or a Component\n// that gets optimized away - e.g. call-through without creating a Fiber.\n// It's basically a virtual Fiber. This is not a semantic concept in React.\n// It only exists as a virtual concept to let the same Element in the DevTools\n// persist. To be selectable separately from all ReactComponentInfo and overtime.\n\n\nfunction createVirtualInstance(debugEntry) {\n  return {\n    kind: VIRTUAL_INSTANCE,\n    id: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getUID)(),\n    parent: null,\n    firstChild: null,\n    nextSibling: null,\n    source: null,\n    logCount: 0,\n    treeBaseDuration: 0,\n    data: debugEntry\n  };\n}\n\nfunction getDispatcherRef(renderer) {\n  if (renderer.currentDispatcherRef === undefined) {\n    return undefined;\n  }\n\n  var injectedRef = renderer.currentDispatcherRef;\n\n  if (typeof injectedRef.H === 'undefined' && typeof injectedRef.current !== 'undefined') {\n    // We got a legacy dispatcher injected, let's create a wrapper proxy to translate.\n    return {\n      get H() {\n        return injectedRef.current;\n      },\n\n      set H(value) {\n        injectedRef.current = value;\n      }\n\n    };\n  }\n\n  return injectedRef;\n}\n\nfunction getFiberFlags(fiber) {\n  // The name of this field changed from \"effectTag\" to \"flags\"\n  return fiber.flags !== undefined ? fiber.flags : fiber.effectTag;\n} // Some environments (e.g. React Native / Hermes) don't support the performance API yet.\n\n\nvar getCurrentTime = // $FlowFixMe[method-unbinding]\n(typeof performance === \"undefined\" ? \"undefined\" : _typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nfunction getInternalReactConstants(version) {\n  // **********************************************************\n  // The section below is copied from files in React repo.\n  // Keep it in sync, and add version guards if it changes.\n  //\n  // Technically these priority levels are invalid for versions before 16.9,\n  // but 16.9 is the first version to report priority level to DevTools,\n  // so we can avoid checking for earlier versions and support pre-16.9 canary releases in the process.\n  var ReactPriorityLevels = {\n    ImmediatePriority: 99,\n    UserBlockingPriority: 98,\n    NormalPriority: 97,\n    LowPriority: 96,\n    IdlePriority: 95,\n    NoPriority: 90\n  };\n\n  if ((0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.gt)(version, '17.0.2')) {\n    ReactPriorityLevels = {\n      ImmediatePriority: 1,\n      UserBlockingPriority: 2,\n      NormalPriority: 3,\n      LowPriority: 4,\n      IdlePriority: 5,\n      NoPriority: 0\n    };\n  }\n\n  var StrictModeBits = 0;\n\n  if ((0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.gte)(version, '18.0.0-alpha')) {\n    // 18+\n    StrictModeBits = 24;\n  } else if ((0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.gte)(version, '16.9.0')) {\n    // 16.9 - 17\n    StrictModeBits = 1;\n  } else if ((0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.gte)(version, '16.3.0')) {\n    // 16.3 - 16.8\n    StrictModeBits = 2;\n  }\n\n  var ReactTypeOfWork = null; // **********************************************************\n  // The section below is copied from files in React repo.\n  // Keep it in sync, and add version guards if it changes.\n  //\n  // TODO Update the gt() check below to be gte() whichever the next version number is.\n  // Currently the version in Git is 17.0.2 (but that version has not been/may not end up being released).\n\n  if ((0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.gt)(version, '17.0.1')) {\n    ReactTypeOfWork = {\n      CacheComponent: 24,\n      // Experimental\n      ClassComponent: 1,\n      ContextConsumer: 9,\n      ContextProvider: 10,\n      CoroutineComponent: -1,\n      // Removed\n      CoroutineHandlerPhase: -1,\n      // Removed\n      DehydratedSuspenseComponent: 18,\n      // Behind a flag\n      ForwardRef: 11,\n      Fragment: 7,\n      FunctionComponent: 0,\n      HostComponent: 5,\n      HostPortal: 4,\n      HostRoot: 3,\n      HostHoistable: 26,\n      // In reality, 18.2+. But doesn't hurt to include it here\n      HostSingleton: 27,\n      // Same as above\n      HostText: 6,\n      IncompleteClassComponent: 17,\n      IncompleteFunctionComponent: 28,\n      IndeterminateComponent: 2,\n      // removed in 19.0.0\n      LazyComponent: 16,\n      LegacyHiddenComponent: 23,\n      MemoComponent: 14,\n      Mode: 8,\n      OffscreenComponent: 22,\n      // Experimental\n      Profiler: 12,\n      ScopeComponent: 21,\n      // Experimental\n      SimpleMemoComponent: 15,\n      SuspenseComponent: 13,\n      SuspenseListComponent: 19,\n      // Experimental\n      TracingMarkerComponent: 25,\n      // Experimental - This is technically in 18 but we don't\n      // want to fork again so we're adding it here instead\n      YieldComponent: -1,\n      // Removed\n      Throw: 29,\n      ViewTransitionComponent: 30 // Experimental\n\n    };\n  } else if ((0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.gte)(version, '17.0.0-alpha')) {\n    ReactTypeOfWork = {\n      CacheComponent: -1,\n      // Doesn't exist yet\n      ClassComponent: 1,\n      ContextConsumer: 9,\n      ContextProvider: 10,\n      CoroutineComponent: -1,\n      // Removed\n      CoroutineHandlerPhase: -1,\n      // Removed\n      DehydratedSuspenseComponent: 18,\n      // Behind a flag\n      ForwardRef: 11,\n      Fragment: 7,\n      FunctionComponent: 0,\n      HostComponent: 5,\n      HostPortal: 4,\n      HostRoot: 3,\n      HostHoistable: -1,\n      // Doesn't exist yet\n      HostSingleton: -1,\n      // Doesn't exist yet\n      HostText: 6,\n      IncompleteClassComponent: 17,\n      IncompleteFunctionComponent: -1,\n      // Doesn't exist yet\n      IndeterminateComponent: 2,\n      LazyComponent: 16,\n      LegacyHiddenComponent: 24,\n      MemoComponent: 14,\n      Mode: 8,\n      OffscreenComponent: 23,\n      // Experimental\n      Profiler: 12,\n      ScopeComponent: 21,\n      // Experimental\n      SimpleMemoComponent: 15,\n      SuspenseComponent: 13,\n      SuspenseListComponent: 19,\n      // Experimental\n      TracingMarkerComponent: -1,\n      // Doesn't exist yet\n      YieldComponent: -1,\n      // Removed\n      Throw: -1,\n      // Doesn't exist yet\n      ViewTransitionComponent: -1 // Doesn't exist yet\n\n    };\n  } else if ((0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.gte)(version, '16.6.0-beta.0')) {\n    ReactTypeOfWork = {\n      CacheComponent: -1,\n      // Doesn't exist yet\n      ClassComponent: 1,\n      ContextConsumer: 9,\n      ContextProvider: 10,\n      CoroutineComponent: -1,\n      // Removed\n      CoroutineHandlerPhase: -1,\n      // Removed\n      DehydratedSuspenseComponent: 18,\n      // Behind a flag\n      ForwardRef: 11,\n      Fragment: 7,\n      FunctionComponent: 0,\n      HostComponent: 5,\n      HostPortal: 4,\n      HostRoot: 3,\n      HostHoistable: -1,\n      // Doesn't exist yet\n      HostSingleton: -1,\n      // Doesn't exist yet\n      HostText: 6,\n      IncompleteClassComponent: 17,\n      IncompleteFunctionComponent: -1,\n      // Doesn't exist yet\n      IndeterminateComponent: 2,\n      LazyComponent: 16,\n      LegacyHiddenComponent: -1,\n      MemoComponent: 14,\n      Mode: 8,\n      OffscreenComponent: -1,\n      // Experimental\n      Profiler: 12,\n      ScopeComponent: -1,\n      // Experimental\n      SimpleMemoComponent: 15,\n      SuspenseComponent: 13,\n      SuspenseListComponent: 19,\n      // Experimental\n      TracingMarkerComponent: -1,\n      // Doesn't exist yet\n      YieldComponent: -1,\n      // Removed\n      Throw: -1,\n      // Doesn't exist yet\n      ViewTransitionComponent: -1 // Doesn't exist yet\n\n    };\n  } else if ((0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.gte)(version, '16.4.3-alpha')) {\n    ReactTypeOfWork = {\n      CacheComponent: -1,\n      // Doesn't exist yet\n      ClassComponent: 2,\n      ContextConsumer: 11,\n      ContextProvider: 12,\n      CoroutineComponent: -1,\n      // Removed\n      CoroutineHandlerPhase: -1,\n      // Removed\n      DehydratedSuspenseComponent: -1,\n      // Doesn't exist yet\n      ForwardRef: 13,\n      Fragment: 9,\n      FunctionComponent: 0,\n      HostComponent: 7,\n      HostPortal: 6,\n      HostRoot: 5,\n      HostHoistable: -1,\n      // Doesn't exist yet\n      HostSingleton: -1,\n      // Doesn't exist yet\n      HostText: 8,\n      IncompleteClassComponent: -1,\n      // Doesn't exist yet\n      IncompleteFunctionComponent: -1,\n      // Doesn't exist yet\n      IndeterminateComponent: 4,\n      LazyComponent: -1,\n      // Doesn't exist yet\n      LegacyHiddenComponent: -1,\n      MemoComponent: -1,\n      // Doesn't exist yet\n      Mode: 10,\n      OffscreenComponent: -1,\n      // Experimental\n      Profiler: 15,\n      ScopeComponent: -1,\n      // Experimental\n      SimpleMemoComponent: -1,\n      // Doesn't exist yet\n      SuspenseComponent: 16,\n      SuspenseListComponent: -1,\n      // Doesn't exist yet\n      TracingMarkerComponent: -1,\n      // Doesn't exist yet\n      YieldComponent: -1,\n      // Removed\n      Throw: -1,\n      // Doesn't exist yet\n      ViewTransitionComponent: -1 // Doesn't exist yet\n\n    };\n  } else {\n    ReactTypeOfWork = {\n      CacheComponent: -1,\n      // Doesn't exist yet\n      ClassComponent: 2,\n      ContextConsumer: 12,\n      ContextProvider: 13,\n      CoroutineComponent: 7,\n      CoroutineHandlerPhase: 8,\n      DehydratedSuspenseComponent: -1,\n      // Doesn't exist yet\n      ForwardRef: 14,\n      Fragment: 10,\n      FunctionComponent: 1,\n      HostComponent: 5,\n      HostPortal: 4,\n      HostRoot: 3,\n      HostHoistable: -1,\n      // Doesn't exist yet\n      HostSingleton: -1,\n      // Doesn't exist yet\n      HostText: 6,\n      IncompleteClassComponent: -1,\n      // Doesn't exist yet\n      IncompleteFunctionComponent: -1,\n      // Doesn't exist yet\n      IndeterminateComponent: 0,\n      LazyComponent: -1,\n      // Doesn't exist yet\n      LegacyHiddenComponent: -1,\n      MemoComponent: -1,\n      // Doesn't exist yet\n      Mode: 11,\n      OffscreenComponent: -1,\n      // Experimental\n      Profiler: 15,\n      ScopeComponent: -1,\n      // Experimental\n      SimpleMemoComponent: -1,\n      // Doesn't exist yet\n      SuspenseComponent: 16,\n      SuspenseListComponent: -1,\n      // Doesn't exist yet\n      TracingMarkerComponent: -1,\n      // Doesn't exist yet\n      YieldComponent: 9,\n      Throw: -1,\n      // Doesn't exist yet\n      ViewTransitionComponent: -1 // Doesn't exist yet\n\n    };\n  } // **********************************************************\n  // End of copied code.\n  // **********************************************************\n\n\n  function getTypeSymbol(type) {\n    var symbolOrNumber = _typeof(type) === 'object' && type !== null ? type.$$typeof : type;\n    return _typeof(symbolOrNumber) === 'symbol' ? // $FlowFixMe[incompatible-return] `toString()` doesn't match the type signature?\n    symbolOrNumber.toString() : symbolOrNumber;\n  }\n\n  var _ReactTypeOfWork = ReactTypeOfWork,\n      CacheComponent = _ReactTypeOfWork.CacheComponent,\n      ClassComponent = _ReactTypeOfWork.ClassComponent,\n      IncompleteClassComponent = _ReactTypeOfWork.IncompleteClassComponent,\n      IncompleteFunctionComponent = _ReactTypeOfWork.IncompleteFunctionComponent,\n      FunctionComponent = _ReactTypeOfWork.FunctionComponent,\n      IndeterminateComponent = _ReactTypeOfWork.IndeterminateComponent,\n      ForwardRef = _ReactTypeOfWork.ForwardRef,\n      HostRoot = _ReactTypeOfWork.HostRoot,\n      HostHoistable = _ReactTypeOfWork.HostHoistable,\n      HostSingleton = _ReactTypeOfWork.HostSingleton,\n      HostComponent = _ReactTypeOfWork.HostComponent,\n      HostPortal = _ReactTypeOfWork.HostPortal,\n      HostText = _ReactTypeOfWork.HostText,\n      Fragment = _ReactTypeOfWork.Fragment,\n      LazyComponent = _ReactTypeOfWork.LazyComponent,\n      LegacyHiddenComponent = _ReactTypeOfWork.LegacyHiddenComponent,\n      MemoComponent = _ReactTypeOfWork.MemoComponent,\n      OffscreenComponent = _ReactTypeOfWork.OffscreenComponent,\n      Profiler = _ReactTypeOfWork.Profiler,\n      ScopeComponent = _ReactTypeOfWork.ScopeComponent,\n      SimpleMemoComponent = _ReactTypeOfWork.SimpleMemoComponent,\n      SuspenseComponent = _ReactTypeOfWork.SuspenseComponent,\n      SuspenseListComponent = _ReactTypeOfWork.SuspenseListComponent,\n      TracingMarkerComponent = _ReactTypeOfWork.TracingMarkerComponent,\n      Throw = _ReactTypeOfWork.Throw,\n      ViewTransitionComponent = _ReactTypeOfWork.ViewTransitionComponent;\n\n  function resolveFiberType(type) {\n    var typeSymbol = getTypeSymbol(type);\n\n    switch (typeSymbol) {\n      case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.MEMO_NUMBER:\n      case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.MEMO_SYMBOL_STRING:\n        // recursively resolving memo type in case of memo(forwardRef(Component))\n        return resolveFiberType(type.type);\n\n      case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.FORWARD_REF_NUMBER:\n      case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.FORWARD_REF_SYMBOL_STRING:\n        return type.render;\n\n      default:\n        return type;\n    }\n  } // NOTICE Keep in sync with shouldFilterFiber() and other get*ForFiber methods\n\n\n  function getDisplayNameForFiber(fiber) {\n    var _fiber$updateQueue, _fiber$memoizedState, _fiber$memoizedState$, _fiber$memoizedState2, _fiber$memoizedState3;\n\n    var shouldSkipForgetCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var elementType = fiber.elementType,\n        type = fiber.type,\n        tag = fiber.tag;\n    var resolvedType = type;\n\n    if (_typeof(type) === 'object' && type !== null) {\n      resolvedType = resolveFiberType(type);\n    }\n\n    var resolvedContext = null;\n\n    if (!shouldSkipForgetCheck && ( // $FlowFixMe[incompatible-type] fiber.updateQueue is mixed\n    ((_fiber$updateQueue = fiber.updateQueue) === null || _fiber$updateQueue === void 0 ? void 0 : _fiber$updateQueue.memoCache) != null || Array.isArray((_fiber$memoizedState = fiber.memoizedState) === null || _fiber$memoizedState === void 0 ? void 0 : _fiber$memoizedState.memoizedState) && ((_fiber$memoizedState$ = fiber.memoizedState.memoizedState[0]) === null || _fiber$memoizedState$ === void 0 ? void 0 : _fiber$memoizedState$[_shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.REACT_MEMO_CACHE_SENTINEL]) || ((_fiber$memoizedState2 = fiber.memoizedState) === null || _fiber$memoizedState2 === void 0 ? void 0 : (_fiber$memoizedState3 = _fiber$memoizedState2.memoizedState) === null || _fiber$memoizedState3 === void 0 ? void 0 : _fiber$memoizedState3[_shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.REACT_MEMO_CACHE_SENTINEL]))) {\n      var displayNameWithoutForgetWrapper = getDisplayNameForFiber(fiber, true);\n\n      if (displayNameWithoutForgetWrapper == null) {\n        return null;\n      }\n\n      return \"Forget(\".concat(displayNameWithoutForgetWrapper, \")\");\n    }\n\n    switch (tag) {\n      case CacheComponent:\n        return 'Cache';\n\n      case ClassComponent:\n      case IncompleteClassComponent:\n      case IncompleteFunctionComponent:\n      case FunctionComponent:\n      case IndeterminateComponent:\n        return (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getDisplayName)(resolvedType);\n\n      case ForwardRef:\n        return (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getWrappedDisplayName)(elementType, resolvedType, 'ForwardRef', 'Anonymous');\n\n      case HostRoot:\n        var fiberRoot = fiber.stateNode;\n\n        if (fiberRoot != null && fiberRoot._debugRootType !== null) {\n          return fiberRoot._debugRootType;\n        }\n\n        return null;\n\n      case HostComponent:\n      case HostSingleton:\n      case HostHoistable:\n        return type;\n\n      case HostPortal:\n      case HostText:\n        return null;\n\n      case Fragment:\n        return 'Fragment';\n\n      case LazyComponent:\n        // This display name will not be user visible.\n        // Once a Lazy component loads its inner component, React replaces the tag and type.\n        // This display name will only show up in console logs when DevTools DEBUG mode is on.\n        return 'Lazy';\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        // Display name in React does not use `Memo` as a wrapper but fallback name.\n        return (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getWrappedDisplayName)(elementType, resolvedType, 'Memo', 'Anonymous');\n\n      case SuspenseComponent:\n        return 'Suspense';\n\n      case LegacyHiddenComponent:\n        return 'LegacyHidden';\n\n      case OffscreenComponent:\n        return 'Offscreen';\n\n      case ScopeComponent:\n        return 'Scope';\n\n      case SuspenseListComponent:\n        return 'SuspenseList';\n\n      case Profiler:\n        return 'Profiler';\n\n      case TracingMarkerComponent:\n        return 'TracingMarker';\n\n      case ViewTransitionComponent:\n        return 'ViewTransition';\n\n      case Throw:\n        // This should really never be visible.\n        return 'Error';\n\n      default:\n        var typeSymbol = getTypeSymbol(type);\n\n        switch (typeSymbol) {\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONCURRENT_MODE_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONCURRENT_MODE_SYMBOL_STRING:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.DEPRECATED_ASYNC_MODE_SYMBOL_STRING:\n            return null;\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROVIDER_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROVIDER_SYMBOL_STRING:\n            // 16.3.0 exposed the context object as \"context\"\n            // PR #12501 changed it to \"_context\" for 16.3.1+\n            // NOTE Keep in sync with inspectElementRaw()\n            resolvedContext = fiber.type._context || fiber.type.context;\n            return \"\".concat(resolvedContext.displayName || 'Context', \".Provider\");\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONTEXT_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONTEXT_SYMBOL_STRING:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.SERVER_CONTEXT_SYMBOL_STRING:\n            if (fiber.type._context === undefined && fiber.type.Provider === fiber.type) {\n              // In 19+, Context.Provider === Context, so this is a provider.\n              resolvedContext = fiber.type;\n              return \"\".concat(resolvedContext.displayName || 'Context', \".Provider\");\n            } // 16.3-16.5 read from \"type\" because the Consumer is the actual context object.\n            // 16.6+ should read from \"type._context\" because Consumer can be different (in DEV).\n            // NOTE Keep in sync with inspectElementRaw()\n\n\n            resolvedContext = fiber.type._context || fiber.type; // NOTE: TraceUpdatesBackendManager depends on the name ending in '.Consumer'\n            // If you change the name, figure out a more resilient way to detect it.\n\n            return \"\".concat(resolvedContext.displayName || 'Context', \".Consumer\");\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONSUMER_SYMBOL_STRING:\n            // 19+\n            resolvedContext = fiber.type._context;\n            return \"\".concat(resolvedContext.displayName || 'Context', \".Consumer\");\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.STRICT_MODE_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.STRICT_MODE_SYMBOL_STRING:\n            return null;\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROFILER_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROFILER_SYMBOL_STRING:\n            return \"Profiler(\".concat(fiber.memoizedProps.id, \")\");\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.SCOPE_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.SCOPE_SYMBOL_STRING:\n            return 'Scope';\n\n          default:\n            // Unknown element type.\n            // This may mean a new element type that has not yet been added to DevTools.\n            return null;\n        }\n\n    }\n  }\n\n  return {\n    getDisplayNameForFiber: getDisplayNameForFiber,\n    getTypeSymbol: getTypeSymbol,\n    ReactPriorityLevels: ReactPriorityLevels,\n    ReactTypeOfWork: ReactTypeOfWork,\n    StrictModeBits: StrictModeBits\n  };\n} // All environment names we've seen so far. This lets us create a list of filters to apply.\n// This should ideally include env of filtered Components too so that you can add those as\n// filters at the same time as removing some other filter.\n\nvar knownEnvironmentNames = new Set(); // Map of FiberRoot to their root FiberInstance.\n\nvar rootToFiberInstanceMap = new Map(); // Map of id to FiberInstance or VirtualInstance.\n// This Map is used to e.g. get the display name for a Fiber or schedule an update,\n// operations that should be the same whether the current and work-in-progress Fiber is used.\n\nvar idToDevToolsInstanceMap = new Map(); // Map of canonical HostInstances to the nearest parent DevToolsInstance.\n\nvar publicInstanceToDevToolsInstanceMap = new Map(); // Map of resource DOM nodes to all the nearest DevToolsInstances that depend on it.\n\nvar hostResourceToDevToolsInstanceMap = new Map(); // Ideally, this should be injected from Reconciler config\n\nfunction getPublicInstance(instance) {\n  // Typically the PublicInstance and HostInstance is the same thing but not in Fabric.\n  // So we need to detect this and use that as the public instance.\n  // React Native. Modern. Fabric.\n  if (_typeof(instance) === 'object' && instance !== null) {\n    if (_typeof(instance.canonical) === 'object' && instance.canonical !== null) {\n      if (_typeof(instance.canonical.publicInstance) === 'object' && instance.canonical.publicInstance !== null) {\n        return instance.canonical.publicInstance;\n      }\n    } // React Native. Legacy. Paper.\n\n\n    if (typeof instance._nativeTag === 'number') {\n      return instance._nativeTag;\n    }\n  } // React Web. Usually a DOM element.\n\n\n  return instance;\n}\n\nfunction aquireHostInstance(nearestInstance, hostInstance) {\n  var publicInstance = getPublicInstance(hostInstance);\n  publicInstanceToDevToolsInstanceMap.set(publicInstance, nearestInstance);\n}\n\nfunction releaseHostInstance(nearestInstance, hostInstance) {\n  var publicInstance = getPublicInstance(hostInstance);\n\n  if (publicInstanceToDevToolsInstanceMap.get(publicInstance) === nearestInstance) {\n    publicInstanceToDevToolsInstanceMap.delete(publicInstance);\n  }\n}\n\nfunction aquireHostResource(nearestInstance, resource) {\n  var hostInstance = resource && resource.instance;\n\n  if (hostInstance) {\n    var publicInstance = getPublicInstance(hostInstance);\n    var resourceInstances = hostResourceToDevToolsInstanceMap.get(publicInstance);\n\n    if (resourceInstances === undefined) {\n      resourceInstances = new Set();\n      hostResourceToDevToolsInstanceMap.set(publicInstance, resourceInstances); // Store the first match in the main map for quick access when selecting DOM node.\n\n      publicInstanceToDevToolsInstanceMap.set(publicInstance, nearestInstance);\n    }\n\n    resourceInstances.add(nearestInstance);\n  }\n}\n\nfunction releaseHostResource(nearestInstance, resource) {\n  var hostInstance = resource && resource.instance;\n\n  if (hostInstance) {\n    var publicInstance = getPublicInstance(hostInstance);\n    var resourceInstances = hostResourceToDevToolsInstanceMap.get(publicInstance);\n\n    if (resourceInstances !== undefined) {\n      resourceInstances.delete(nearestInstance);\n\n      if (resourceInstances.size === 0) {\n        hostResourceToDevToolsInstanceMap.delete(publicInstance);\n        publicInstanceToDevToolsInstanceMap.delete(publicInstance);\n      } else if (publicInstanceToDevToolsInstanceMap.get(publicInstance) === nearestInstance) {\n        // This was the first one. Store the next first one in the main map for easy access.\n        // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n        var _iterator = _createForOfIteratorHelper(resourceInstances),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var firstInstance = _step.value;\n            publicInstanceToDevToolsInstanceMap.set(firstInstance, nearestInstance);\n            break;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }\n}\n\nfunction attach(hook, rendererID, renderer, global, shouldStartProfilingNow, profilingSettings) {\n  // Newer versions of the reconciler package also specific reconciler version.\n  // If that version number is present, use it.\n  // Third party renderer versions may not match the reconciler version,\n  // and the latter is what's important in terms of tags and symbols.\n  var version = renderer.reconcilerVersion || renderer.version;\n\n  var _getInternalReactCons = getInternalReactConstants(version),\n      getDisplayNameForFiber = _getInternalReactCons.getDisplayNameForFiber,\n      getTypeSymbol = _getInternalReactCons.getTypeSymbol,\n      ReactPriorityLevels = _getInternalReactCons.ReactPriorityLevels,\n      ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork,\n      StrictModeBits = _getInternalReactCons.StrictModeBits;\n\n  var CacheComponent = ReactTypeOfWork.CacheComponent,\n      ClassComponent = ReactTypeOfWork.ClassComponent,\n      ContextConsumer = ReactTypeOfWork.ContextConsumer,\n      DehydratedSuspenseComponent = ReactTypeOfWork.DehydratedSuspenseComponent,\n      ForwardRef = ReactTypeOfWork.ForwardRef,\n      Fragment = ReactTypeOfWork.Fragment,\n      FunctionComponent = ReactTypeOfWork.FunctionComponent,\n      HostRoot = ReactTypeOfWork.HostRoot,\n      HostHoistable = ReactTypeOfWork.HostHoistable,\n      HostSingleton = ReactTypeOfWork.HostSingleton,\n      HostPortal = ReactTypeOfWork.HostPortal,\n      HostComponent = ReactTypeOfWork.HostComponent,\n      HostText = ReactTypeOfWork.HostText,\n      IncompleteClassComponent = ReactTypeOfWork.IncompleteClassComponent,\n      IncompleteFunctionComponent = ReactTypeOfWork.IncompleteFunctionComponent,\n      IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent,\n      LegacyHiddenComponent = ReactTypeOfWork.LegacyHiddenComponent,\n      MemoComponent = ReactTypeOfWork.MemoComponent,\n      OffscreenComponent = ReactTypeOfWork.OffscreenComponent,\n      SimpleMemoComponent = ReactTypeOfWork.SimpleMemoComponent,\n      SuspenseComponent = ReactTypeOfWork.SuspenseComponent,\n      SuspenseListComponent = ReactTypeOfWork.SuspenseListComponent,\n      TracingMarkerComponent = ReactTypeOfWork.TracingMarkerComponent,\n      Throw = ReactTypeOfWork.Throw,\n      ViewTransitionComponent = ReactTypeOfWork.ViewTransitionComponent;\n  var ImmediatePriority = ReactPriorityLevels.ImmediatePriority,\n      UserBlockingPriority = ReactPriorityLevels.UserBlockingPriority,\n      NormalPriority = ReactPriorityLevels.NormalPriority,\n      LowPriority = ReactPriorityLevels.LowPriority,\n      IdlePriority = ReactPriorityLevels.IdlePriority,\n      NoPriority = ReactPriorityLevels.NoPriority;\n  var getLaneLabelMap = renderer.getLaneLabelMap,\n      injectProfilingHooks = renderer.injectProfilingHooks,\n      overrideHookState = renderer.overrideHookState,\n      overrideHookStateDeletePath = renderer.overrideHookStateDeletePath,\n      overrideHookStateRenamePath = renderer.overrideHookStateRenamePath,\n      overrideProps = renderer.overrideProps,\n      overridePropsDeletePath = renderer.overridePropsDeletePath,\n      overridePropsRenamePath = renderer.overridePropsRenamePath,\n      scheduleRefresh = renderer.scheduleRefresh,\n      setErrorHandler = renderer.setErrorHandler,\n      setSuspenseHandler = renderer.setSuspenseHandler,\n      scheduleUpdate = renderer.scheduleUpdate,\n      getCurrentFiber = renderer.getCurrentFiber;\n  var supportsTogglingError = typeof setErrorHandler === 'function' && typeof scheduleUpdate === 'function';\n  var supportsTogglingSuspense = typeof setSuspenseHandler === 'function' && typeof scheduleUpdate === 'function';\n\n  if (typeof scheduleRefresh === 'function') {\n    // When Fast Refresh updates a component, the frontend may need to purge cached information.\n    // For example, ASTs cached for the component (for named hooks) may no longer be valid.\n    // Send a signal to the frontend to purge this cached information.\n    // The \"fastRefreshScheduled\" dispatched is global (not Fiber or even Renderer specific).\n    // This is less effecient since it means the front-end will need to purge the entire cache,\n    // but this is probably an okay trade off in order to reduce coupling between the DevTools and Fast Refresh.\n    renderer.scheduleRefresh = function () {\n      try {\n        hook.emit('fastRefreshScheduled');\n      } finally {\n        return scheduleRefresh.apply(void 0, arguments);\n      }\n    };\n  }\n\n  var getTimelineData = null;\n  var toggleProfilingStatus = null;\n\n  if (typeof injectProfilingHooks === 'function') {\n    var response = (0,_profilingHooks__WEBPACK_IMPORTED_MODULE_12__.createProfilingHooks)({\n      getDisplayNameForFiber: getDisplayNameForFiber,\n      getIsProfiling: function getIsProfiling() {\n        return isProfiling;\n      },\n      getLaneLabelMap: getLaneLabelMap,\n      currentDispatcherRef: getDispatcherRef(renderer),\n      workTagMap: ReactTypeOfWork,\n      reactVersion: version\n    }); // Pass the Profiling hooks to the reconciler for it to call during render.\n\n    injectProfilingHooks(response.profilingHooks); // Hang onto this toggle so we can notify the external methods of profiling status changes.\n\n    getTimelineData = response.getTimelineData;\n    toggleProfilingStatus = response.toggleProfilingStatus;\n  }\n\n  // Tracks Errors/Warnings logs added to a Fiber. They are added before the commit and get\n  // picked up a FiberInstance. This keeps it around as long as the Fiber is alive which\n  // lets the Fiber get reparented/remounted and still observe the previous errors/warnings.\n  // Unless we explicitly clear the logs from a Fiber.\n  var fiberToComponentLogsMap = new WeakMap(); // Tracks whether we've performed a commit since the last log. This is used to know\n  // whether we received any new logs between the commit and post commit phases. I.e.\n  // if any passive effects called console.warn / console.error.\n\n  var needsToFlushComponentLogs = false;\n\n  function bruteForceFlushErrorsAndWarnings() {\n    // Refresh error/warning count for all mounted unfiltered Fibers.\n    var hasChanges = false; // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n    var _iterator2 = _createForOfIteratorHelper(idToDevToolsInstanceMap.values()),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var devtoolsInstance = _step2.value;\n\n        if (devtoolsInstance.kind === FIBER_INSTANCE) {\n          var _fiber = devtoolsInstance.data;\n          var componentLogsEntry = fiberToComponentLogsMap.get(_fiber);\n          var changed = recordConsoleLogs(devtoolsInstance, componentLogsEntry);\n\n          if (changed) {\n            hasChanges = true;\n            updateMostRecentlyInspectedElementIfNecessary(devtoolsInstance.id);\n          }\n        } else {// Virtual Instances cannot log in passive effects and so never appear here.\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    if (hasChanges) {\n      flushPendingEvents();\n    }\n  }\n\n  function clearErrorsAndWarnings() {\n    // Note, this only clears logs for Fibers that have instances. If they're filtered\n    // and then mount, the logs are there. Ensuring we only clear what you've seen.\n    // If we wanted to clear the whole set, we'd replace fiberToComponentLogsMap with a\n    // new WeakMap. It's unclear whether we should clear componentInfoToComponentLogsMap\n    // since it's shared by other renderers but presumably it would.\n    // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n    var _iterator3 = _createForOfIteratorHelper(idToDevToolsInstanceMap.values()),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var devtoolsInstance = _step3.value;\n\n        if (devtoolsInstance.kind === FIBER_INSTANCE) {\n          var _fiber2 = devtoolsInstance.data;\n          fiberToComponentLogsMap.delete(_fiber2);\n\n          if (_fiber2.alternate) {\n            fiberToComponentLogsMap.delete(_fiber2.alternate);\n          }\n        } else {\n          _shared_DevToolsServerComponentLogs__WEBPACK_IMPORTED_MODULE_7__.componentInfoToComponentLogsMap[\"delete\"](devtoolsInstance.data);\n        }\n\n        var changed = recordConsoleLogs(devtoolsInstance, undefined);\n\n        if (changed) {\n          updateMostRecentlyInspectedElementIfNecessary(devtoolsInstance.id);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    flushPendingEvents();\n  }\n\n  function clearConsoleLogsHelper(instanceID, type) {\n    var devtoolsInstance = idToDevToolsInstanceMap.get(instanceID);\n\n    if (devtoolsInstance !== undefined) {\n      var componentLogsEntry;\n\n      if (devtoolsInstance.kind === FIBER_INSTANCE) {\n        var _fiber3 = devtoolsInstance.data;\n        componentLogsEntry = fiberToComponentLogsMap.get(_fiber3);\n\n        if (componentLogsEntry === undefined && _fiber3.alternate !== null) {\n          componentLogsEntry = fiberToComponentLogsMap.get(_fiber3.alternate);\n        }\n      } else {\n        var componentInfo = devtoolsInstance.data;\n        componentLogsEntry = _shared_DevToolsServerComponentLogs__WEBPACK_IMPORTED_MODULE_7__.componentInfoToComponentLogsMap.get(componentInfo);\n      }\n\n      if (componentLogsEntry !== undefined) {\n        if (type === 'error') {\n          componentLogsEntry.errors.clear();\n          componentLogsEntry.errorsCount = 0;\n        } else {\n          componentLogsEntry.warnings.clear();\n          componentLogsEntry.warningsCount = 0;\n        }\n\n        var changed = recordConsoleLogs(devtoolsInstance, componentLogsEntry);\n\n        if (changed) {\n          flushPendingEvents();\n          updateMostRecentlyInspectedElementIfNecessary(devtoolsInstance.id);\n        }\n      }\n    }\n  }\n\n  function clearErrorsForElementID(instanceID) {\n    clearConsoleLogsHelper(instanceID, 'error');\n  }\n\n  function clearWarningsForElementID(instanceID) {\n    clearConsoleLogsHelper(instanceID, 'warn');\n  }\n\n  function updateMostRecentlyInspectedElementIfNecessary(fiberID) {\n    if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === fiberID) {\n      hasElementUpdatedSinceLastInspected = true;\n    }\n  }\n\n  function getComponentStack(topFrame) {\n    if (getCurrentFiber == null) {\n      // Expected this to be part of the renderer. Ignore.\n      return null;\n    }\n\n    var current = getCurrentFiber();\n\n    if (current === null) {\n      // Outside of our render scope.\n      return null;\n    }\n\n    if ((0,_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_10__.supportsConsoleTasks)(current)) {\n      // This will be handled natively by console.createTask. No need for\n      // DevTools to add it.\n      return null;\n    }\n\n    var dispatcherRef = getDispatcherRef(renderer);\n\n    if (dispatcherRef === undefined) {\n      return null;\n    }\n\n    var enableOwnerStacks = (0,_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_10__.supportsOwnerStacks)(current);\n    var componentStack = '';\n\n    if (enableOwnerStacks) {\n      // Prefix the owner stack with the current stack. I.e. what called\n      // console.error. While this will also be part of the native stack,\n      // it is hidden and not presented alongside this argument so we print\n      // them all together.\n      var topStackFrames = (0,_shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_13__.formatOwnerStack)(topFrame);\n\n      if (topStackFrames) {\n        componentStack += '\\n' + topStackFrames;\n      }\n\n      componentStack += (0,_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_10__.getOwnerStackByFiberInDev)(ReactTypeOfWork, current, dispatcherRef);\n    } else {\n      componentStack = (0,_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_10__.getStackByFiberInDevAndProd)(ReactTypeOfWork, current, dispatcherRef);\n    }\n\n    return {\n      enableOwnerStacks: enableOwnerStacks,\n      componentStack: componentStack\n    };\n  } // Called when an error or warning is logged during render, commit, or passive (including unmount functions).\n\n\n  function onErrorOrWarning(type, args) {\n    if (getCurrentFiber == null) {\n      // Expected this to be part of the renderer. Ignore.\n      return;\n    }\n\n    var fiber = getCurrentFiber();\n\n    if (fiber === null) {\n      // Outside of our render scope.\n      return;\n    }\n\n    if (type === 'error') {\n      // if this is an error simulated by us to trigger error boundary, ignore\n      if (forceErrorForFibers.get(fiber) === true || fiber.alternate !== null && forceErrorForFibers.get(fiber.alternate) === true) {\n        return;\n      }\n    } // We can't really use this message as a unique key, since we can't distinguish\n    // different objects in this implementation. We have to delegate displaying of the objects\n    // to the environment, the browser console, for example, so this is why this should be kept\n    // as an array of arguments, instead of the plain string.\n    // [Warning: %o, {...}] and [Warning: %o, {...}] will be considered as the same message,\n    // even if objects are different\n\n\n    var message = react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.formatConsoleArgumentsToSingleString.apply(void 0, _toConsumableArray(args)); // Track the warning/error for later.\n\n    var componentLogsEntry = fiberToComponentLogsMap.get(fiber);\n\n    if (componentLogsEntry === undefined && fiber.alternate !== null) {\n      componentLogsEntry = fiberToComponentLogsMap.get(fiber.alternate);\n\n      if (componentLogsEntry !== undefined) {\n        // Use the same set for both Fibers.\n        fiberToComponentLogsMap.set(fiber, componentLogsEntry);\n      }\n    }\n\n    if (componentLogsEntry === undefined) {\n      componentLogsEntry = {\n        errors: new Map(),\n        errorsCount: 0,\n        warnings: new Map(),\n        warningsCount: 0\n      };\n      fiberToComponentLogsMap.set(fiber, componentLogsEntry);\n    }\n\n    var messageMap = type === 'error' ? componentLogsEntry.errors : componentLogsEntry.warnings;\n    var count = messageMap.get(message) || 0;\n    messageMap.set(message, count + 1);\n\n    if (type === 'error') {\n      componentLogsEntry.errorsCount++;\n    } else {\n      componentLogsEntry.warningsCount++;\n    } // The changes will be flushed later when we commit.\n    // If the log happened in a passive effect, then this happens after we've\n    // already committed the new tree so the change won't show up until we rerender\n    // that component again. We need to visit a Component with passive effects in\n    // handlePostCommitFiberRoot again to ensure that we flush the changes after passive.\n\n\n    needsToFlushComponentLogs = true;\n  }\n\n  function debug(name, instance, parentInstance) {\n    var extraString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      var displayName = instance.kind === VIRTUAL_INSTANCE ? instance.data.name || 'null' : instance.data.tag + ':' + (getDisplayNameForFiber(instance.data) || 'null');\n      var maybeID = instance.kind === FILTERED_FIBER_INSTANCE ? '<no id>' : instance.id;\n      var parentDisplayName = parentInstance === null ? '' : parentInstance.kind === VIRTUAL_INSTANCE ? parentInstance.data.name || 'null' : parentInstance.data.tag + ':' + (getDisplayNameForFiber(parentInstance.data) || 'null');\n      var maybeParentID = parentInstance === null || parentInstance.kind === FILTERED_FIBER_INSTANCE ? '<no id>' : parentInstance.id;\n      console.groupCollapsed(\"[renderer] %c\".concat(name, \" %c\").concat(displayName, \" (\").concat(maybeID, \") %c\").concat(parentInstance ? \"\".concat(parentDisplayName, \" (\").concat(maybeParentID, \")\") : '', \" %c\").concat(extraString), 'color: red; font-weight: bold;', 'color: blue;', 'color: purple;', 'color: black;');\n      console.log(new Error().stack.split('\\n').slice(1).join('\\n'));\n      console.groupEnd();\n    }\n  } // eslint-disable-next-line no-unused-vars\n\n\n  function debugTree(instance) {\n    var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      var name = (instance.kind !== VIRTUAL_INSTANCE ? getDisplayNameForFiber(instance.data) : instance.data.name) || '';\n      console.log('  '.repeat(indent) + '- ' + (instance.kind === FILTERED_FIBER_INSTANCE ? 0 : instance.id) + ' (' + name + ')', 'parent', instance.parent === null ? ' ' : instance.parent.kind === FILTERED_FIBER_INSTANCE ? 0 : instance.parent.id, 'next', instance.nextSibling === null ? ' ' : instance.nextSibling.id);\n      var child = instance.firstChild;\n\n      while (child !== null) {\n        debugTree(child, indent + 1);\n        child = child.nextSibling;\n      }\n    }\n  } // Configurable Components tree filters.\n\n\n  var hideElementsWithDisplayNames = new Set();\n  var hideElementsWithPaths = new Set();\n  var hideElementsWithTypes = new Set();\n  var hideElementsWithEnvs = new Set(); // Highlight updates\n\n  var traceUpdatesEnabled = false;\n  var traceUpdatesForNodes = new Set();\n\n  function applyComponentFilters(componentFilters) {\n    hideElementsWithTypes.clear();\n    hideElementsWithDisplayNames.clear();\n    hideElementsWithPaths.clear();\n    hideElementsWithEnvs.clear();\n    componentFilters.forEach(function (componentFilter) {\n      if (!componentFilter.isEnabled) {\n        return;\n      }\n\n      switch (componentFilter.type) {\n        case react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ComponentFilterDisplayName:\n          if (componentFilter.isValid && componentFilter.value !== '') {\n            hideElementsWithDisplayNames.add(new RegExp(componentFilter.value, 'i'));\n          }\n\n          break;\n\n        case react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ComponentFilterElementType:\n          hideElementsWithTypes.add(componentFilter.value);\n          break;\n\n        case react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ComponentFilterLocation:\n          if (componentFilter.isValid && componentFilter.value !== '') {\n            hideElementsWithPaths.add(new RegExp(componentFilter.value, 'i'));\n          }\n\n          break;\n\n        case react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ComponentFilterHOC:\n          hideElementsWithDisplayNames.add(new RegExp('\\\\('));\n          break;\n\n        case react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ComponentFilterEnvironmentName:\n          hideElementsWithEnvs.add(componentFilter.value);\n          break;\n\n        default:\n          console.warn(\"Invalid component filter type \\\"\".concat(componentFilter.type, \"\\\"\"));\n          break;\n      }\n    });\n  } // The renderer interface can't read saved component filters directly,\n  // because they are stored in localStorage within the context of the extension.\n  // Instead it relies on the extension to pass filters through.\n\n\n  if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ != null) {\n    var componentFiltersWithoutLocationBasedOnes = (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.filterOutLocationComponentFilters)(window.__REACT_DEVTOOLS_COMPONENT_FILTERS__);\n    applyComponentFilters(componentFiltersWithoutLocationBasedOnes);\n  } else {\n    // Unfortunately this feature is not expected to work for React Native for now.\n    // It would be annoying for us to spam YellowBox warnings with unactionable stuff,\n    // so for now just skip this message...\n    //console.warn('⚛ DevTools: Could not locate saved component filters');\n    // Fallback to assuming the default filters in this case.\n    applyComponentFilters((0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getDefaultComponentFilters)());\n  } // If necessary, we can revisit optimizing this operation.\n  // For example, we could add a new recursive unmount tree operation.\n  // The unmount operations are already significantly smaller than mount operations though.\n  // This is something to keep in mind for later.\n\n\n  function updateComponentFilters(componentFilters) {\n    if (isProfiling) {\n      // Re-mounting a tree while profiling is in progress might break a lot of assumptions.\n      // If necessary, we could support this- but it doesn't seem like a necessary use case.\n      throw Error('Cannot modify filter preferences while profiling');\n    } // Recursively unmount all roots.\n\n\n    hook.getFiberRoots(rendererID).forEach(function (root) {\n      var rootInstance = rootToFiberInstanceMap.get(root);\n\n      if (rootInstance === undefined) {\n        throw new Error('Expected the root instance to already exist when applying filters');\n      }\n\n      currentRoot = rootInstance;\n      unmountInstanceRecursively(rootInstance);\n      rootToFiberInstanceMap.delete(root);\n      flushPendingEvents(root);\n      currentRoot = null;\n    });\n    applyComponentFilters(componentFilters); // Reset pseudo counters so that new path selections will be persisted.\n\n    rootDisplayNameCounter.clear(); // Recursively re-mount all roots with new filter criteria applied.\n\n    hook.getFiberRoots(rendererID).forEach(function (root) {\n      var current = root.current;\n      var newRoot = createFiberInstance(current);\n      rootToFiberInstanceMap.set(root, newRoot);\n      idToDevToolsInstanceMap.set(newRoot.id, newRoot); // Before the traversals, remember to start tracking\n      // our path in case we have selection to restore.\n\n      if (trackedPath !== null) {\n        mightBeOnTrackedPath = true;\n      }\n\n      currentRoot = newRoot;\n      setRootPseudoKey(currentRoot.id, root.current);\n      mountFiberRecursively(root.current, false);\n      flushPendingEvents(root);\n      currentRoot = null;\n    });\n    flushPendingEvents();\n    needsToFlushComponentLogs = false;\n  }\n\n  function getEnvironmentNames() {\n    return Array.from(knownEnvironmentNames);\n  }\n\n  function shouldFilterVirtual(data, secondaryEnv) {\n    // For purposes of filtering Server Components are always Function Components.\n    // Environment will be used to filter Server vs Client.\n    // Technically they can be forwardRef and memo too but those filters will go away\n    // as those become just plain user space function components like any HoC.\n    if (hideElementsWithTypes.has(react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeFunction)) {\n      return true;\n    }\n\n    if (hideElementsWithDisplayNames.size > 0) {\n      var displayName = data.name;\n\n      if (displayName != null) {\n        // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n        var _iterator4 = _createForOfIteratorHelper(hideElementsWithDisplayNames),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var displayNameRegExp = _step4.value;\n\n            if (displayNameRegExp.test(displayName)) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }\n\n    if ((data.env == null || hideElementsWithEnvs.has(data.env)) && (secondaryEnv === null || hideElementsWithEnvs.has(secondaryEnv))) {\n      // If a Component has two environments, you have to filter both for it not to appear.\n      return true;\n    }\n\n    return false;\n  } // NOTICE Keep in sync with get*ForFiber methods\n\n\n  function shouldFilterFiber(fiber) {\n    var tag = fiber.tag,\n        type = fiber.type,\n        key = fiber.key;\n\n    switch (tag) {\n      case DehydratedSuspenseComponent:\n        // TODO: ideally we would show dehydrated Suspense immediately.\n        // However, it has some special behavior (like disconnecting\n        // an alternate and turning into real Suspense) which breaks DevTools.\n        // For now, ignore it, and only show it once it gets hydrated.\n        // https://github.com/bvaughn/react-devtools-experimental/issues/197\n        return true;\n\n      case HostPortal:\n      case HostText:\n      case LegacyHiddenComponent:\n      case OffscreenComponent:\n      case Throw:\n        return true;\n\n      case HostRoot:\n        // It is never valid to filter the root element.\n        return false;\n\n      case Fragment:\n        return key === null;\n\n      default:\n        var typeSymbol = getTypeSymbol(type);\n\n        switch (typeSymbol) {\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONCURRENT_MODE_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONCURRENT_MODE_SYMBOL_STRING:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.DEPRECATED_ASYNC_MODE_SYMBOL_STRING:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.STRICT_MODE_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.STRICT_MODE_SYMBOL_STRING:\n            return true;\n\n          default:\n            break;\n        }\n\n    }\n\n    var elementType = getElementTypeForFiber(fiber);\n\n    if (hideElementsWithTypes.has(elementType)) {\n      return true;\n    }\n\n    if (hideElementsWithDisplayNames.size > 0) {\n      var displayName = getDisplayNameForFiber(fiber);\n\n      if (displayName != null) {\n        // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n        var _iterator5 = _createForOfIteratorHelper(hideElementsWithDisplayNames),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var displayNameRegExp = _step5.value;\n\n            if (displayNameRegExp.test(displayName)) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n\n    if (hideElementsWithEnvs.has('Client')) {\n      // If we're filtering out the Client environment we should filter out all\n      // \"Client Components\". Technically that also includes the built-ins but\n      // since that doesn't actually include any additional code loading it's\n      // useful to not filter out the built-ins. Those can be filtered separately.\n      // There's no other way to filter out just Function components on the Client.\n      // Therefore, this only filters Class and Function components.\n      switch (tag) {\n        case ClassComponent:\n        case IncompleteClassComponent:\n        case IncompleteFunctionComponent:\n        case FunctionComponent:\n        case IndeterminateComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          return true;\n      }\n    }\n    /* DISABLED: https://github.com/facebook/react/pull/28417\n    if (hideElementsWithPaths.size > 0) {\n      const source = getSourceForFiber(fiber);\n       if (source != null) {\n        const {fileName} = source;\n        // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n        for (const pathRegExp of hideElementsWithPaths) {\n          if (pathRegExp.test(fileName)) {\n            return true;\n          }\n        }\n      }\n    }\n    */\n\n\n    return false;\n  } // NOTICE Keep in sync with shouldFilterFiber() and other get*ForFiber methods\n\n\n  function getElementTypeForFiber(fiber) {\n    var type = fiber.type,\n        tag = fiber.tag;\n\n    switch (tag) {\n      case ClassComponent:\n      case IncompleteClassComponent:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeClass;\n\n      case IncompleteFunctionComponent:\n      case FunctionComponent:\n      case IndeterminateComponent:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeFunction;\n\n      case ForwardRef:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeForwardRef;\n\n      case HostRoot:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeRoot;\n\n      case HostComponent:\n      case HostHoistable:\n      case HostSingleton:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeHostComponent;\n\n      case HostPortal:\n      case HostText:\n      case Fragment:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown;\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeMemo;\n\n      case SuspenseComponent:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeSuspense;\n\n      case SuspenseListComponent:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeSuspenseList;\n\n      case TracingMarkerComponent:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeTracingMarker;\n\n      case ViewTransitionComponent:\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeViewTransition;\n\n      default:\n        var typeSymbol = getTypeSymbol(type);\n\n        switch (typeSymbol) {\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONCURRENT_MODE_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONCURRENT_MODE_SYMBOL_STRING:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.DEPRECATED_ASYNC_MODE_SYMBOL_STRING:\n            return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown;\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROVIDER_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROVIDER_SYMBOL_STRING:\n            return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeContext;\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONTEXT_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONTEXT_SYMBOL_STRING:\n            return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeContext;\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.STRICT_MODE_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.STRICT_MODE_SYMBOL_STRING:\n            return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown;\n\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROFILER_NUMBER:\n          case _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROFILER_SYMBOL_STRING:\n            return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeProfiler;\n\n          default:\n            return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown;\n        }\n\n    }\n  } // When a mount or update is in progress, this value tracks the root that is being operated on.\n\n\n  var currentRoot = null; // Removes a Fiber (and its alternate) from the Maps used to track their id.\n  // This method should always be called when a Fiber is unmounting.\n\n  function untrackFiber(nearestInstance, fiber) {\n    if (forceErrorForFibers.size > 0) {\n      forceErrorForFibers.delete(fiber);\n\n      if (fiber.alternate) {\n        forceErrorForFibers.delete(fiber.alternate);\n      }\n\n      if (forceErrorForFibers.size === 0 && setErrorHandler != null) {\n        setErrorHandler(shouldErrorFiberAlwaysNull);\n      }\n    }\n\n    if (forceFallbackForFibers.size > 0) {\n      forceFallbackForFibers.delete(fiber);\n\n      if (fiber.alternate) {\n        forceFallbackForFibers.delete(fiber.alternate);\n      }\n\n      if (forceFallbackForFibers.size === 0 && setSuspenseHandler != null) {\n        setSuspenseHandler(shouldSuspendFiberAlwaysFalse);\n      }\n    } // TODO: Consider using a WeakMap instead. The only thing where that doesn't work\n    // is React Native Paper which tracks tags but that support is eventually going away\n    // and can use the old findFiberByHostInstance strategy.\n\n\n    if (fiber.tag === HostHoistable) {\n      releaseHostResource(nearestInstance, fiber.memoizedState);\n    } else if (fiber.tag === HostComponent || fiber.tag === HostText || fiber.tag === HostSingleton) {\n      releaseHostInstance(nearestInstance, fiber.stateNode);\n    } // Recursively clean up any filtered Fibers below this one as well since\n    // we won't recordUnmount on those.\n\n\n    for (var child = fiber.child; child !== null; child = child.sibling) {\n      if (shouldFilterFiber(child)) {\n        untrackFiber(nearestInstance, child);\n      }\n    }\n  }\n\n  function getChangeDescription(prevFiber, nextFiber) {\n    switch (nextFiber.tag) {\n      case ClassComponent:\n        if (prevFiber === null) {\n          return {\n            context: null,\n            didHooksChange: false,\n            isFirstMount: true,\n            props: null,\n            state: null\n          };\n        } else {\n          var data = {\n            context: getContextChanged(prevFiber, nextFiber),\n            didHooksChange: false,\n            isFirstMount: false,\n            props: getChangedKeys(prevFiber.memoizedProps, nextFiber.memoizedProps),\n            state: getChangedKeys(prevFiber.memoizedState, nextFiber.memoizedState)\n          };\n          return data;\n        }\n\n      case IncompleteFunctionComponent:\n      case FunctionComponent:\n      case IndeterminateComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n        if (prevFiber === null) {\n          return {\n            context: null,\n            didHooksChange: false,\n            isFirstMount: true,\n            props: null,\n            state: null\n          };\n        } else {\n          var indices = getChangedHooksIndices(prevFiber.memoizedState, nextFiber.memoizedState);\n          var _data = {\n            context: getContextChanged(prevFiber, nextFiber),\n            didHooksChange: indices !== null && indices.length > 0,\n            isFirstMount: false,\n            props: getChangedKeys(prevFiber.memoizedProps, nextFiber.memoizedProps),\n            state: null,\n            hooks: indices\n          }; // Only traverse the hooks list once, depending on what info we're returning.\n\n          return _data;\n        }\n\n      default:\n        return null;\n    }\n  }\n\n  function getContextChanged(prevFiber, nextFiber) {\n    var prevContext = prevFiber.dependencies && prevFiber.dependencies.firstContext;\n    var nextContext = nextFiber.dependencies && nextFiber.dependencies.firstContext;\n\n    while (prevContext && nextContext) {\n      // Note this only works for versions of React that support this key (e.v. 18+)\n      // For older versions, there's no good way to read the current context value after render has completed.\n      // This is because React maintains a stack of context values during render,\n      // but by the time DevTools is called, render has finished and the stack is empty.\n      if (prevContext.context !== nextContext.context) {\n        // If the order of context has changed, then the later context values might have\n        // changed too but the main reason it rerendered was earlier. Either an earlier\n        // context changed value but then we would have exited already. If we end up here\n        // it's because a state or props change caused the order of contexts used to change.\n        // So the main cause is not the contexts themselves.\n        return false;\n      }\n\n      if (!(0,shared_objectIs__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(prevContext.memoizedValue, nextContext.memoizedValue)) {\n        return true;\n      }\n\n      prevContext = prevContext.next;\n      nextContext = nextContext.next;\n    }\n\n    return false;\n  }\n\n  function isHookThatCanScheduleUpdate(hookObject) {\n    var queue = hookObject.queue;\n\n    if (!queue) {\n      return false;\n    }\n\n    var boundHasOwnProperty = shared_hasOwnProperty__WEBPACK_IMPORTED_MODULE_9__[\"default\"].bind(queue); // Detect the shape of useState() / useReducer() / useTransition()\n    // using the attributes that are unique to these hooks\n    // but also stable (e.g. not tied to current Lanes implementation)\n    // We don't check for dispatch property, because useTransition doesn't have it\n\n    if (boundHasOwnProperty('pending')) {\n      return true;\n    } // Detect useSyncExternalStore()\n\n\n    return boundHasOwnProperty('value') && boundHasOwnProperty('getSnapshot') && typeof queue.getSnapshot === 'function';\n  }\n\n  function didStatefulHookChange(prev, next) {\n    var prevMemoizedState = prev.memoizedState;\n    var nextMemoizedState = next.memoizedState;\n\n    if (isHookThatCanScheduleUpdate(prev)) {\n      return prevMemoizedState !== nextMemoizedState;\n    }\n\n    return false;\n  }\n\n  function getChangedHooksIndices(prev, next) {\n    if (prev == null || next == null) {\n      return null;\n    }\n\n    var indices = [];\n    var index = 0;\n\n    while (next !== null) {\n      if (didStatefulHookChange(prev, next)) {\n        indices.push(index);\n      }\n\n      next = next.next;\n      prev = prev.next;\n      index++;\n    }\n\n    return indices;\n  }\n\n  function getChangedKeys(prev, next) {\n    if (prev == null || next == null) {\n      return null;\n    }\n\n    var keys = new Set([].concat(_toConsumableArray(Object.keys(prev)), _toConsumableArray(Object.keys(next))));\n    var changedKeys = []; // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n    var _iterator6 = _createForOfIteratorHelper(keys),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var key = _step6.value;\n\n        if (prev[key] !== next[key]) {\n          changedKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n\n    return changedKeys;\n  }\n\n  function didFiberRender(prevFiber, nextFiber) {\n    switch (nextFiber.tag) {\n      case ClassComponent:\n      case FunctionComponent:\n      case ContextConsumer:\n      case MemoComponent:\n      case SimpleMemoComponent:\n      case ForwardRef:\n        // For types that execute user code, we check PerformedWork effect.\n        // We don't reflect bailouts (either referential or sCU) in DevTools.\n        // TODO: This flag is a leaked implementation detail. Once we start\n        // releasing DevTools in lockstep with React, we should import a\n        // function from the reconciler instead.\n        var PerformedWork = 1;\n        return (getFiberFlags(nextFiber) & PerformedWork) === PerformedWork;\n      // Note: ContextConsumer only gets PerformedWork effect in 16.3.3+\n      // so it won't get highlighted with React 16.3.0 to 16.3.2.\n\n      default:\n        // For host components and other types, we compare inputs\n        // to determine whether something is an update.\n        return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref;\n    }\n  }\n\n  var pendingOperations = [];\n  var pendingRealUnmountedIDs = [];\n  var pendingOperationsQueue = [];\n  var pendingStringTable = new Map();\n  var pendingStringTableLength = 0;\n  var pendingUnmountedRootID = null;\n\n  function pushOperation(op) {\n    if (true) {\n      if (!Number.isInteger(op)) {\n        console.error('pushOperation() was called but the value is not an integer.', op);\n      }\n    }\n\n    pendingOperations.push(op);\n  }\n\n  function shouldBailoutWithPendingOperations() {\n    if (isProfiling) {\n      if (currentCommitProfilingMetadata != null && currentCommitProfilingMetadata.durations.length > 0) {\n        return false;\n      }\n    }\n\n    return pendingOperations.length === 0 && pendingRealUnmountedIDs.length === 0 && pendingUnmountedRootID === null;\n  }\n\n  function flushOrQueueOperations(operations) {\n    if (shouldBailoutWithPendingOperations()) {\n      return;\n    }\n\n    if (pendingOperationsQueue !== null) {\n      pendingOperationsQueue.push(operations);\n    } else {\n      hook.emit('operations', operations);\n    }\n  }\n\n  function recordConsoleLogs(instance, componentLogsEntry) {\n    if (componentLogsEntry === undefined) {\n      if (instance.logCount === 0) {\n        // Nothing has changed.\n        return false;\n      } // Reset to zero.\n\n\n      instance.logCount = 0;\n      pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS);\n      pushOperation(instance.id);\n      pushOperation(0);\n      pushOperation(0);\n      return true;\n    } else {\n      var totalCount = componentLogsEntry.errorsCount + componentLogsEntry.warningsCount;\n\n      if (instance.logCount === totalCount) {\n        // Nothing has changed.\n        return false;\n      } // Update counts.\n\n\n      instance.logCount = totalCount;\n      pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS);\n      pushOperation(instance.id);\n      pushOperation(componentLogsEntry.errorsCount);\n      pushOperation(componentLogsEntry.warningsCount);\n      return true;\n    }\n  }\n\n  function flushPendingEvents(root) {\n    if (shouldBailoutWithPendingOperations()) {\n      // If we aren't profiling, we can just bail out here.\n      // No use sending an empty update over the bridge.\n      //\n      // The Profiler stores metadata for each commit and reconstructs the app tree per commit using:\n      // (1) an initial tree snapshot and\n      // (2) the operations array for each commit\n      // Because of this, it's important that the operations and metadata arrays align,\n      // So it's important not to omit even empty operations while profiling is active.\n      return;\n    }\n\n    var numUnmountIDs = pendingRealUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);\n    var operations = new Array( // Identify which renderer this update is coming from.\n    2 + // [rendererID, rootFiberID]\n    // How big is the string table?\n    1 + // [stringTableLength]\n    // Then goes the actual string table.\n    pendingStringTableLength + ( // All unmounts are batched in a single message.\n    // [TREE_OPERATION_REMOVE, removedIDLength, ...ids]\n    numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + // Regular operations\n    pendingOperations.length); // Identify which renderer this update is coming from.\n    // This enables roots to be mapped to renderers,\n    // Which in turn enables fiber props, states, and hooks to be inspected.\n\n    var i = 0;\n    operations[i++] = rendererID;\n\n    if (currentRoot === null) {\n      // TODO: This is not always safe so this field is probably not needed.\n      operations[i++] = -1;\n    } else {\n      operations[i++] = currentRoot.id;\n    } // Now fill in the string table.\n    // [stringTableLength, str1Length, ...str1, str2Length, ...str2, ...]\n\n\n    operations[i++] = pendingStringTableLength;\n    pendingStringTable.forEach(function (entry, stringKey) {\n      var encodedString = entry.encodedString; // Don't use the string length.\n      // It won't work for multibyte characters (like emoji).\n\n      var length = encodedString.length;\n      operations[i++] = length;\n\n      for (var j = 0; j < length; j++) {\n        operations[i + j] = encodedString[j];\n      }\n\n      i += length;\n    });\n\n    if (numUnmountIDs > 0) {\n      // All unmounts except roots are batched in a single message.\n      operations[i++] = _constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_REMOVE; // The first number is how many unmounted IDs we're gonna send.\n\n      operations[i++] = numUnmountIDs; // Fill in the real unmounts in the reverse order.\n      // They were inserted parents-first by React, but we want children-first.\n      // So we traverse our array backwards.\n\n      for (var j = 0; j < pendingRealUnmountedIDs.length; j++) {\n        operations[i++] = pendingRealUnmountedIDs[j];\n      } // The root ID should always be unmounted last.\n\n\n      if (pendingUnmountedRootID !== null) {\n        operations[i] = pendingUnmountedRootID;\n        i++;\n      }\n    } // Fill in the rest of the operations.\n\n\n    for (var _j = 0; _j < pendingOperations.length; _j++) {\n      operations[i + _j] = pendingOperations[_j];\n    }\n\n    i += pendingOperations.length; // Let the frontend know about tree operations.\n\n    flushOrQueueOperations(operations); // Reset all of the pending state now that we've told the frontend about it.\n\n    pendingOperations.length = 0;\n    pendingRealUnmountedIDs.length = 0;\n    pendingUnmountedRootID = null;\n    pendingStringTable.clear();\n    pendingStringTableLength = 0;\n  }\n\n  function getStringID(string) {\n    if (string === null) {\n      return 0;\n    }\n\n    var existingEntry = pendingStringTable.get(string);\n\n    if (existingEntry !== undefined) {\n      return existingEntry.id;\n    }\n\n    var id = pendingStringTable.size + 1;\n    var encodedString = (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.utfEncodeString)(string);\n    pendingStringTable.set(string, {\n      encodedString: encodedString,\n      id: id\n    }); // The string table total length needs to account both for the string length,\n    // and for the array item that contains the length itself.\n    //\n    // Don't use string length for this table.\n    // It won't work for multibyte characters (like emoji).\n\n    pendingStringTableLength += encodedString.length + 1;\n    return id;\n  }\n\n  function recordMount(fiber, parentInstance) {\n    var isRoot = fiber.tag === HostRoot;\n    var fiberInstance;\n\n    if (isRoot) {\n      var entry = rootToFiberInstanceMap.get(fiber.stateNode);\n\n      if (entry === undefined) {\n        throw new Error('The root should have been registered at this point');\n      }\n\n      fiberInstance = entry;\n    } else {\n      fiberInstance = createFiberInstance(fiber);\n    }\n\n    idToDevToolsInstanceMap.set(fiberInstance.id, fiberInstance);\n    var id = fiberInstance.id;\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      debug('recordMount()', fiberInstance, parentInstance);\n    }\n\n    var isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');\n\n    if (isRoot) {\n      var hasOwnerMetadata = fiber.hasOwnProperty('_debugOwner'); // Adding a new field here would require a bridge protocol version bump (a backwads breaking change).\n      // Instead let's re-purpose a pre-existing field to carry more information.\n\n      var profilingFlags = 0;\n\n      if (isProfilingSupported) {\n        profilingFlags = _constants__WEBPACK_IMPORTED_MODULE_3__.PROFILING_FLAG_BASIC_SUPPORT;\n\n        if (typeof injectProfilingHooks === 'function') {\n          profilingFlags |= _constants__WEBPACK_IMPORTED_MODULE_3__.PROFILING_FLAG_TIMELINE_SUPPORT;\n        }\n      } // Set supportsStrictMode to false for production renderer builds\n\n\n      var isProductionBuildOfRenderer = renderer.bundleType === 0;\n      pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_ADD);\n      pushOperation(id);\n      pushOperation(react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeRoot);\n      pushOperation((fiber.mode & StrictModeBits) !== 0 ? 1 : 0);\n      pushOperation(profilingFlags);\n      pushOperation(!isProductionBuildOfRenderer && StrictModeBits !== 0 ? 1 : 0);\n      pushOperation(hasOwnerMetadata ? 1 : 0);\n\n      if (isProfiling) {\n        if (displayNamesByRootID !== null) {\n          displayNamesByRootID.set(id, getDisplayNameForRoot(fiber));\n        }\n      }\n    } else {\n      var key = fiber.key;\n      var displayName = getDisplayNameForFiber(fiber);\n      var elementType = getElementTypeForFiber(fiber); // Finding the owner instance might require traversing the whole parent path which\n      // doesn't have great big O notation. Ideally we'd lazily fetch the owner when we\n      // need it but we have some synchronous operations in the front end like Alt+Left\n      // which selects the owner immediately. Typically most owners are only a few parents\n      // away so maybe it's not so bad.\n\n      var debugOwner = getUnfilteredOwner(fiber);\n      var ownerInstance = findNearestOwnerInstance(parentInstance, debugOwner);\n\n      if (ownerInstance !== null && debugOwner === fiber._debugOwner && fiber._debugStack != null && ownerInstance.source === null) {\n        // The new Fiber is directly owned by the ownerInstance. Therefore somewhere on\n        // the debugStack will be a stack frame inside the ownerInstance's source.\n        ownerInstance.source = fiber._debugStack;\n      }\n\n      var ownerID = ownerInstance === null ? 0 : ownerInstance.id;\n      var parentID = parentInstance ? parentInstance.kind === FILTERED_FIBER_INSTANCE ? // A Filtered Fiber Instance will always have a Virtual Instance as a parent.\n      parentInstance.parent.id : parentInstance.id : 0;\n      var displayNameStringID = getStringID(displayName); // This check is a guard to handle a React element that has been modified\n      // in such a way as to bypass the default stringification of the \"key\" property.\n\n      var keyString = key === null ? null : String(key);\n      var keyStringID = getStringID(keyString);\n      pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_ADD);\n      pushOperation(id);\n      pushOperation(elementType);\n      pushOperation(parentID);\n      pushOperation(ownerID);\n      pushOperation(displayNameStringID);\n      pushOperation(keyStringID); // If this subtree has a new mode, let the frontend know.\n\n      if ((fiber.mode & StrictModeBits) !== 0) {\n        var parentFiber = null;\n        var parentFiberInstance = parentInstance;\n\n        while (parentFiberInstance !== null) {\n          if (parentFiberInstance.kind === FIBER_INSTANCE) {\n            parentFiber = parentFiberInstance.data;\n            break;\n          }\n\n          parentFiberInstance = parentFiberInstance.parent;\n        }\n\n        if (parentFiber === null || (parentFiber.mode & StrictModeBits) === 0) {\n          pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_SET_SUBTREE_MODE);\n          pushOperation(id);\n          pushOperation(react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.StrictMode);\n        }\n      }\n    }\n\n    var componentLogsEntry = fiberToComponentLogsMap.get(fiber);\n\n    if (componentLogsEntry === undefined && fiber.alternate !== null) {\n      componentLogsEntry = fiberToComponentLogsMap.get(fiber.alternate);\n    }\n\n    recordConsoleLogs(fiberInstance, componentLogsEntry);\n\n    if (isProfilingSupported) {\n      recordProfilingDurations(fiberInstance, null);\n    }\n\n    return fiberInstance;\n  }\n\n  function recordVirtualMount(instance, parentInstance, secondaryEnv) {\n    var id = instance.id;\n    idToDevToolsInstanceMap.set(id, instance);\n    var componentInfo = instance.data;\n    var key = typeof componentInfo.key === 'string' ? componentInfo.key : null;\n    var env = componentInfo.env;\n    var displayName = componentInfo.name || '';\n\n    if (typeof env === 'string') {\n      // We model environment as an HoC name for now.\n      if (secondaryEnv !== null) {\n        displayName = secondaryEnv + '(' + displayName + ')';\n      }\n\n      displayName = env + '(' + displayName + ')';\n    }\n\n    var elementType = react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeVirtual; // Finding the owner instance might require traversing the whole parent path which\n    // doesn't have great big O notation. Ideally we'd lazily fetch the owner when we\n    // need it but we have some synchronous operations in the front end like Alt+Left\n    // which selects the owner immediately. Typically most owners are only a few parents\n    // away so maybe it's not so bad.\n\n    var debugOwner = getUnfilteredOwner(componentInfo);\n    var ownerInstance = findNearestOwnerInstance(parentInstance, debugOwner);\n\n    if (ownerInstance !== null && debugOwner === componentInfo.owner && componentInfo.debugStack != null && ownerInstance.source === null) {\n      // The new Fiber is directly owned by the ownerInstance. Therefore somewhere on\n      // the debugStack will be a stack frame inside the ownerInstance's source.\n      ownerInstance.source = componentInfo.debugStack;\n    }\n\n    var ownerID = ownerInstance === null ? 0 : ownerInstance.id;\n    var parentID = parentInstance ? parentInstance.kind === FILTERED_FIBER_INSTANCE ? // A Filtered Fiber Instance will always have a Virtual Instance as a parent.\n    parentInstance.parent.id : parentInstance.id : 0;\n    var displayNameStringID = getStringID(displayName); // This check is a guard to handle a React element that has been modified\n    // in such a way as to bypass the default stringification of the \"key\" property.\n\n    var keyString = key === null ? null : String(key);\n    var keyStringID = getStringID(keyString);\n    pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_ADD);\n    pushOperation(id);\n    pushOperation(elementType);\n    pushOperation(parentID);\n    pushOperation(ownerID);\n    pushOperation(displayNameStringID);\n    pushOperation(keyStringID);\n    var componentLogsEntry = _shared_DevToolsServerComponentLogs__WEBPACK_IMPORTED_MODULE_7__.componentInfoToComponentLogsMap.get(componentInfo);\n    recordConsoleLogs(instance, componentLogsEntry);\n  }\n\n  function recordUnmount(fiberInstance) {\n    var fiber = fiberInstance.data;\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      debug('recordUnmount()', fiberInstance, reconcilingParent);\n    }\n\n    if (trackedPathMatchInstance === fiberInstance) {\n      // We're in the process of trying to restore previous selection.\n      // If this fiber matched but is being unmounted, there's no use trying.\n      // Reset the state so we don't keep holding onto it.\n      setTrackedPath(null);\n    }\n\n    var id = fiberInstance.id;\n    var isRoot = fiber.tag === HostRoot;\n\n    if (isRoot) {\n      // Roots must be removed only after all children have been removed.\n      // So we track it separately.\n      pendingUnmountedRootID = id;\n    } else {\n      // To maintain child-first ordering,\n      // we'll push it into one of these queues,\n      // and later arrange them in the correct order.\n      pendingRealUnmountedIDs.push(id);\n    }\n\n    idToDevToolsInstanceMap.delete(fiberInstance.id);\n    untrackFiber(fiberInstance, fiber);\n  } // Running state of the remaining children from the previous version of this parent that\n  // we haven't yet added back. This should be reset anytime we change parent.\n  // Any remaining ones at the end will be deleted.\n\n\n  var remainingReconcilingChildren = null; // The previously placed child.\n\n  var previouslyReconciledSibling = null; // To save on stack allocation and ensure that they are updated as a pair, we also store\n  // the current parent here as well.\n\n  var reconcilingParent = null;\n\n  function insertChild(instance) {\n    var parentInstance = reconcilingParent;\n\n    if (parentInstance === null) {\n      // This instance is at the root.\n      return;\n    } // Place it in the parent.\n\n\n    instance.parent = parentInstance;\n\n    if (previouslyReconciledSibling === null) {\n      previouslyReconciledSibling = instance;\n      parentInstance.firstChild = instance;\n    } else {\n      previouslyReconciledSibling.nextSibling = instance;\n      previouslyReconciledSibling = instance;\n    }\n\n    instance.nextSibling = null;\n  }\n\n  function moveChild(instance, previousSibling) {\n    removeChild(instance, previousSibling);\n    insertChild(instance);\n  }\n\n  function removeChild(instance, previousSibling) {\n    if (instance.parent === null) {\n      if (remainingReconcilingChildren === instance) {\n        throw new Error('Remaining children should not have items with no parent');\n      } else if (instance.nextSibling !== null) {\n        throw new Error('A deleted instance should not have next siblings');\n      } // Already deleted.\n\n\n      return;\n    }\n\n    var parentInstance = reconcilingParent;\n\n    if (parentInstance === null) {\n      throw new Error('Should not have a parent if we are at the root');\n    }\n\n    if (instance.parent !== parentInstance) {\n      throw new Error('Cannot remove a node from a different parent than is being reconciled.');\n    } // Remove an existing child from its current position, which we assume is in the\n    // remainingReconcilingChildren set.\n\n\n    if (previousSibling === null) {\n      // We're first in the remaining set. Remove us.\n      if (remainingReconcilingChildren !== instance) {\n        throw new Error('Expected a placed child to be moved from the remaining set.');\n      }\n\n      remainingReconcilingChildren = instance.nextSibling;\n    } else {\n      previousSibling.nextSibling = instance.nextSibling;\n    }\n\n    instance.nextSibling = null;\n    instance.parent = null;\n  }\n\n  function unmountRemainingChildren() {\n    var child = remainingReconcilingChildren;\n\n    while (child !== null) {\n      unmountInstanceRecursively(child);\n      child = remainingReconcilingChildren;\n    }\n  }\n\n  function mountVirtualInstanceRecursively(virtualInstance, firstChild, lastChild, // non-inclusive\n  traceNearestHostComponentUpdate, virtualLevel) {\n    // If we have the tree selection from previous reload, try to match this Instance.\n    // Also remember whether to do the same for siblings.\n    var mightSiblingsBeOnTrackedPath = updateVirtualTrackedPathStateBeforeMount(virtualInstance, reconcilingParent);\n    var stashedParent = reconcilingParent;\n    var stashedPrevious = previouslyReconciledSibling;\n    var stashedRemaining = remainingReconcilingChildren; // Push a new DevTools instance parent while reconciling this subtree.\n\n    reconcilingParent = virtualInstance;\n    previouslyReconciledSibling = null;\n    remainingReconcilingChildren = null;\n\n    try {\n      mountVirtualChildrenRecursively(firstChild, lastChild, traceNearestHostComponentUpdate, virtualLevel + 1); // Must be called after all children have been appended.\n\n      recordVirtualProfilingDurations(virtualInstance);\n    } finally {\n      reconcilingParent = stashedParent;\n      previouslyReconciledSibling = stashedPrevious;\n      remainingReconcilingChildren = stashedRemaining;\n      updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath);\n    }\n  }\n\n  function recordVirtualUnmount(instance) {\n    if (trackedPathMatchInstance === instance) {\n      // We're in the process of trying to restore previous selection.\n      // If this fiber matched but is being unmounted, there's no use trying.\n      // Reset the state so we don't keep holding onto it.\n      setTrackedPath(null);\n    }\n\n    var id = instance.id;\n    pendingRealUnmountedIDs.push(id);\n  }\n\n  function getSecondaryEnvironmentName(debugInfo, index) {\n    if (debugInfo != null) {\n      var componentInfo = debugInfo[index];\n\n      for (var i = index + 1; i < debugInfo.length; i++) {\n        var debugEntry = debugInfo[i];\n\n        if (typeof debugEntry.env === 'string') {\n          // If the next environment is different then this component was the boundary\n          // and it changed before entering the next component. So we assign this\n          // component a secondary environment.\n          return componentInfo.env !== debugEntry.env ? debugEntry.env : null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function mountVirtualChildrenRecursively(firstChild, lastChild, // non-inclusive\n  traceNearestHostComponentUpdate, virtualLevel) {\n    // Iterate over siblings rather than recursing.\n    // This reduces the chance of stack overflow for wide trees (e.g. lists with many items).\n    var fiber = firstChild;\n    var previousVirtualInstance = null;\n    var previousVirtualInstanceFirstFiber = firstChild;\n\n    while (fiber !== null && fiber !== lastChild) {\n      var level = 0;\n\n      if (fiber._debugInfo) {\n        for (var i = 0; i < fiber._debugInfo.length; i++) {\n          var debugEntry = fiber._debugInfo[i];\n\n          if (typeof debugEntry.name !== 'string') {\n            // Not a Component. Some other Debug Info.\n            continue;\n          } // Scan up until the next Component to see if this component changed environment.\n\n\n          var componentInfo = debugEntry;\n          var secondaryEnv = getSecondaryEnvironmentName(fiber._debugInfo, i);\n\n          if (componentInfo.env != null) {\n            knownEnvironmentNames.add(componentInfo.env);\n          }\n\n          if (secondaryEnv !== null) {\n            knownEnvironmentNames.add(secondaryEnv);\n          }\n\n          if (shouldFilterVirtual(componentInfo, secondaryEnv)) {\n            // Skip.\n            continue;\n          }\n\n          if (level === virtualLevel) {\n            if (previousVirtualInstance === null || // Consecutive children with the same debug entry as a parent gets\n            // treated as if they share the same virtual instance.\n            previousVirtualInstance.data !== debugEntry) {\n              if (previousVirtualInstance !== null) {\n                // Mount any previous children that should go into the previous parent.\n                mountVirtualInstanceRecursively(previousVirtualInstance, previousVirtualInstanceFirstFiber, fiber, traceNearestHostComponentUpdate, virtualLevel);\n              }\n\n              previousVirtualInstance = createVirtualInstance(componentInfo);\n              recordVirtualMount(previousVirtualInstance, reconcilingParent, secondaryEnv);\n              insertChild(previousVirtualInstance);\n              previousVirtualInstanceFirstFiber = fiber;\n            }\n\n            level++;\n            break;\n          } else {\n            level++;\n          }\n        }\n      }\n\n      if (level === virtualLevel) {\n        if (previousVirtualInstance !== null) {\n          // If we were working on a virtual instance and this is not a virtual\n          // instance, then we end the sequence and mount any previous children\n          // that should go into the previous virtual instance.\n          mountVirtualInstanceRecursively(previousVirtualInstance, previousVirtualInstanceFirstFiber, fiber, traceNearestHostComponentUpdate, virtualLevel);\n          previousVirtualInstance = null;\n        } // We've reached the end of the virtual levels, but not beyond,\n        // and now continue with the regular fiber.\n\n\n        mountFiberRecursively(fiber, traceNearestHostComponentUpdate);\n      }\n\n      fiber = fiber.sibling;\n    }\n\n    if (previousVirtualInstance !== null) {\n      // Mount any previous children that should go into the previous parent.\n      mountVirtualInstanceRecursively(previousVirtualInstance, previousVirtualInstanceFirstFiber, null, traceNearestHostComponentUpdate, virtualLevel);\n    }\n  }\n\n  function mountChildrenRecursively(firstChild, traceNearestHostComponentUpdate) {\n    mountVirtualChildrenRecursively(firstChild, null, traceNearestHostComponentUpdate, 0 // first level\n    );\n  }\n\n  function mountFiberRecursively(fiber, traceNearestHostComponentUpdate) {\n    var shouldIncludeInTree = !shouldFilterFiber(fiber);\n    var newInstance = null;\n\n    if (shouldIncludeInTree) {\n      newInstance = recordMount(fiber, reconcilingParent);\n      insertChild(newInstance);\n\n      if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n        debug('mountFiberRecursively()', newInstance, reconcilingParent);\n      }\n    } else if (reconcilingParent !== null && reconcilingParent.kind === VIRTUAL_INSTANCE) {\n      // If the parent is a Virtual Instance and we filtered this Fiber we include a\n      // hidden node.\n      if (reconcilingParent.data === fiber._debugOwner && fiber._debugStack != null && reconcilingParent.source === null) {\n        // The new Fiber is directly owned by the parent. Therefore somewhere on the\n        // debugStack will be a stack frame inside parent that we can use as its soruce.\n        reconcilingParent.source = fiber._debugStack;\n      }\n\n      newInstance = createFilteredFiberInstance(fiber);\n      insertChild(newInstance);\n\n      if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n        debug('mountFiberRecursively()', newInstance, reconcilingParent);\n      }\n    } // If we have the tree selection from previous reload, try to match this Fiber.\n    // Also remember whether to do the same for siblings.\n\n\n    var mightSiblingsBeOnTrackedPath = updateTrackedPathStateBeforeMount(fiber, newInstance);\n    var stashedParent = reconcilingParent;\n    var stashedPrevious = previouslyReconciledSibling;\n    var stashedRemaining = remainingReconcilingChildren;\n\n    if (newInstance !== null) {\n      // Push a new DevTools instance parent while reconciling this subtree.\n      reconcilingParent = newInstance;\n      previouslyReconciledSibling = null;\n      remainingReconcilingChildren = null;\n    }\n\n    try {\n      if (traceUpdatesEnabled) {\n        if (traceNearestHostComponentUpdate) {\n          var elementType = getElementTypeForFiber(fiber); // If an ancestor updated, we should mark the nearest host nodes for highlighting.\n\n          if (elementType === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeHostComponent) {\n            traceUpdatesForNodes.add(fiber.stateNode);\n            traceNearestHostComponentUpdate = false;\n          }\n        } // We intentionally do not re-enable the traceNearestHostComponentUpdate flag in this branch,\n        // because we don't want to highlight every host node inside of a newly mounted subtree.\n\n      }\n\n      if (fiber.tag === HostHoistable) {\n        var nearestInstance = reconcilingParent;\n\n        if (nearestInstance === null) {\n          throw new Error('Did not expect a host hoistable to be the root');\n        }\n\n        aquireHostResource(nearestInstance, fiber.memoizedState);\n      } else if (fiber.tag === HostComponent || fiber.tag === HostText || fiber.tag === HostSingleton) {\n        var _nearestInstance = reconcilingParent;\n\n        if (_nearestInstance === null) {\n          throw new Error('Did not expect a host hoistable to be the root');\n        }\n\n        aquireHostInstance(_nearestInstance, fiber.stateNode);\n      }\n\n      if (fiber.tag === SuspenseComponent) {\n        var isTimedOut = fiber.memoizedState !== null;\n\n        if (isTimedOut) {\n          // Special case: if Suspense mounts in a timed-out state,\n          // get the fallback child from the inner fragment and mount\n          // it as if it was our own child. Updates handle this too.\n          var primaryChildFragment = fiber.child;\n          var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;\n\n          if (fallbackChildFragment) {\n            var fallbackChild = fallbackChildFragment.child;\n\n            if (fallbackChild !== null) {\n              updateTrackedPathStateBeforeMount(fallbackChildFragment, null);\n              mountChildrenRecursively(fallbackChild, traceNearestHostComponentUpdate);\n            }\n          }\n        } else {\n          var primaryChild = null;\n          var areSuspenseChildrenConditionallyWrapped = OffscreenComponent === -1;\n\n          if (areSuspenseChildrenConditionallyWrapped) {\n            primaryChild = fiber.child;\n          } else if (fiber.child !== null) {\n            primaryChild = fiber.child.child;\n            updateTrackedPathStateBeforeMount(fiber.child, null);\n          }\n\n          if (primaryChild !== null) {\n            mountChildrenRecursively(primaryChild, traceNearestHostComponentUpdate);\n          }\n        }\n      } else {\n        if (fiber.child !== null) {\n          mountChildrenRecursively(fiber.child, traceNearestHostComponentUpdate);\n        }\n      }\n    } finally {\n      if (newInstance !== null) {\n        reconcilingParent = stashedParent;\n        previouslyReconciledSibling = stashedPrevious;\n        remainingReconcilingChildren = stashedRemaining;\n      }\n    } // We're exiting this Fiber now, and entering its siblings.\n    // If we have selection to restore, we might need to re-activate tracking.\n\n\n    updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath);\n  } // We use this to simulate unmounting for Suspense trees\n  // when we switch from primary to fallback, or deleting a subtree.\n\n\n  function unmountInstanceRecursively(instance) {\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      debug('unmountInstanceRecursively()', instance, reconcilingParent);\n    }\n\n    var stashedParent = reconcilingParent;\n    var stashedPrevious = previouslyReconciledSibling;\n    var stashedRemaining = remainingReconcilingChildren; // Push a new DevTools instance parent while reconciling this subtree.\n\n    reconcilingParent = instance;\n    previouslyReconciledSibling = null; // Move all the children of this instance to the remaining set.\n\n    remainingReconcilingChildren = instance.firstChild;\n    instance.firstChild = null;\n\n    try {\n      // Unmount the remaining set.\n      unmountRemainingChildren();\n    } finally {\n      reconcilingParent = stashedParent;\n      previouslyReconciledSibling = stashedPrevious;\n      remainingReconcilingChildren = stashedRemaining;\n    }\n\n    if (instance.kind === FIBER_INSTANCE) {\n      recordUnmount(instance);\n    } else if (instance.kind === VIRTUAL_INSTANCE) {\n      recordVirtualUnmount(instance);\n    } else {\n      untrackFiber(instance, instance.data);\n    }\n\n    removeChild(instance, null);\n  }\n\n  function recordProfilingDurations(fiberInstance, prevFiber) {\n    var id = fiberInstance.id;\n    var fiber = fiberInstance.data;\n    var actualDuration = fiber.actualDuration,\n        treeBaseDuration = fiber.treeBaseDuration;\n    fiberInstance.treeBaseDuration = treeBaseDuration || 0;\n\n    if (isProfiling) {\n      // It's important to update treeBaseDuration even if the current Fiber did not render,\n      // because it's possible that one of its descendants did.\n      if (prevFiber == null || treeBaseDuration !== prevFiber.treeBaseDuration) {\n        // Tree base duration updates are included in the operations typed array.\n        // So we have to convert them from milliseconds to microseconds so we can send them as ints.\n        var convertedTreeBaseDuration = Math.floor((treeBaseDuration || 0) * 1000);\n        pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_UPDATE_TREE_BASE_DURATION);\n        pushOperation(id);\n        pushOperation(convertedTreeBaseDuration);\n      }\n\n      if (prevFiber == null || didFiberRender(prevFiber, fiber)) {\n        if (actualDuration != null) {\n          // The actual duration reported by React includes time spent working on children.\n          // This is useful information, but it's also useful to be able to exclude child durations.\n          // The frontend can't compute this, since the immediate children may have been filtered out.\n          // So we need to do this on the backend.\n          // Note that this calculated self duration is not the same thing as the base duration.\n          // The two are calculated differently (tree duration does not accumulate).\n          var selfDuration = actualDuration;\n          var child = fiber.child;\n\n          while (child !== null) {\n            selfDuration -= child.actualDuration || 0;\n            child = child.sibling;\n          } // If profiling is active, store durations for elements that were rendered during the commit.\n          // Note that we should do this for any fiber we performed work on, regardless of its actualDuration value.\n          // In some cases actualDuration might be 0 for fibers we worked on (particularly if we're using Date.now)\n          // In other cases (e.g. Memo) actualDuration might be greater than 0 even if we \"bailed out\".\n\n\n          var metadata = currentCommitProfilingMetadata;\n          metadata.durations.push(id, actualDuration, selfDuration);\n          metadata.maxActualDuration = Math.max(metadata.maxActualDuration, actualDuration);\n\n          if (recordChangeDescriptions) {\n            var changeDescription = getChangeDescription(prevFiber, fiber);\n\n            if (changeDescription !== null) {\n              if (metadata.changeDescriptions !== null) {\n                metadata.changeDescriptions.set(id, changeDescription);\n              }\n            }\n          }\n        }\n      } // If this Fiber was in the set of memoizedUpdaters we need to record\n      // it to be included in the description of the commit.\n\n\n      var fiberRoot = currentRoot.data.stateNode;\n      var updaters = fiberRoot.memoizedUpdaters;\n\n      if (updaters != null && (updaters.has(fiber) || // We check the alternate here because we're matching identity and\n      // prevFiber might be same as fiber.\n      fiber.alternate !== null && updaters.has(fiber.alternate))) {\n        var _metadata = currentCommitProfilingMetadata;\n\n        if (_metadata.updaters === null) {\n          _metadata.updaters = [];\n        }\n\n        _metadata.updaters.push(instanceToSerializedElement(fiberInstance));\n      }\n    }\n  }\n\n  function recordVirtualProfilingDurations(virtualInstance) {\n    var id = virtualInstance.id;\n    var treeBaseDuration = 0; // Add up the base duration of the child instances. The virtual base duration\n    // will be the same as children's duration since we don't take up any render\n    // time in the virtual instance.\n\n    for (var child = virtualInstance.firstChild; child !== null; child = child.nextSibling) {\n      treeBaseDuration += child.treeBaseDuration;\n    }\n\n    if (isProfiling) {\n      var previousTreeBaseDuration = virtualInstance.treeBaseDuration;\n\n      if (treeBaseDuration !== previousTreeBaseDuration) {\n        // Tree base duration updates are included in the operations typed array.\n        // So we have to convert them from milliseconds to microseconds so we can send them as ints.\n        var convertedTreeBaseDuration = Math.floor((treeBaseDuration || 0) * 1000);\n        pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_UPDATE_TREE_BASE_DURATION);\n        pushOperation(id);\n        pushOperation(convertedTreeBaseDuration);\n      }\n    }\n\n    virtualInstance.treeBaseDuration = treeBaseDuration;\n  }\n\n  function recordResetChildren(parentInstance) {\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      if (parentInstance.firstChild !== null) {\n        debug('recordResetChildren()', parentInstance.firstChild, parentInstance);\n      }\n    } // The frontend only really cares about the displayName, key, and children.\n    // The first two don't really change, so we are only concerned with the order of children here.\n    // This is trickier than a simple comparison though, since certain types of fibers are filtered.\n\n\n    var nextChildren = [];\n    var child = parentInstance.firstChild;\n\n    while (child !== null) {\n      if (child.kind === FILTERED_FIBER_INSTANCE) {\n        for (var innerChild = parentInstance.firstChild; innerChild !== null; innerChild = innerChild.nextSibling) {\n          nextChildren.push(innerChild.id);\n        }\n      } else {\n        nextChildren.push(child.id);\n      }\n\n      child = child.nextSibling;\n    }\n\n    var numChildren = nextChildren.length;\n\n    if (numChildren < 2) {\n      // No need to reorder.\n      return;\n    }\n\n    pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_REORDER_CHILDREN);\n    pushOperation(parentInstance.id);\n    pushOperation(numChildren);\n\n    for (var i = 0; i < nextChildren.length; i++) {\n      pushOperation(nextChildren[i]);\n    }\n  }\n\n  function updateVirtualInstanceRecursively(virtualInstance, nextFirstChild, nextLastChild, // non-inclusive\n  prevFirstChild, traceNearestHostComponentUpdate, virtualLevel) {\n    var stashedParent = reconcilingParent;\n    var stashedPrevious = previouslyReconciledSibling;\n    var stashedRemaining = remainingReconcilingChildren; // Push a new DevTools instance parent while reconciling this subtree.\n\n    reconcilingParent = virtualInstance;\n    previouslyReconciledSibling = null; // Move all the children of this instance to the remaining set.\n    // We'll move them back one by one, and anything that remains is deleted.\n\n    remainingReconcilingChildren = virtualInstance.firstChild;\n    virtualInstance.firstChild = null;\n\n    try {\n      if (updateVirtualChildrenRecursively(nextFirstChild, nextLastChild, prevFirstChild, traceNearestHostComponentUpdate, virtualLevel + 1)) {\n        recordResetChildren(virtualInstance);\n      } // Update the errors/warnings count. If this Instance has switched to a different\n      // ReactComponentInfo instance, such as when refreshing Server Components, then\n      // we replace all the previous logs with the ones associated with the new ones rather\n      // than merging. Because deduping is expected to happen at the request level.\n\n\n      var componentLogsEntry = _shared_DevToolsServerComponentLogs__WEBPACK_IMPORTED_MODULE_7__.componentInfoToComponentLogsMap.get(virtualInstance.data);\n      recordConsoleLogs(virtualInstance, componentLogsEntry); // Must be called after all children have been appended.\n\n      recordVirtualProfilingDurations(virtualInstance);\n    } finally {\n      unmountRemainingChildren();\n      reconcilingParent = stashedParent;\n      previouslyReconciledSibling = stashedPrevious;\n      remainingReconcilingChildren = stashedRemaining;\n    }\n  }\n\n  function updateVirtualChildrenRecursively(nextFirstChild, nextLastChild, // non-inclusive\n  prevFirstChild, traceNearestHostComponentUpdate, virtualLevel) {\n    var shouldResetChildren = false; // If the first child is different, we need to traverse them.\n    // Each next child will be either a new child (mount) or an alternate (update).\n\n    var nextChild = nextFirstChild;\n    var prevChildAtSameIndex = prevFirstChild;\n    var previousVirtualInstance = null;\n    var previousVirtualInstanceWasMount = false;\n    var previousVirtualInstanceNextFirstFiber = nextFirstChild;\n    var previousVirtualInstancePrevFirstFiber = prevFirstChild;\n\n    while (nextChild !== null && nextChild !== nextLastChild) {\n      var level = 0;\n\n      if (nextChild._debugInfo) {\n        for (var i = 0; i < nextChild._debugInfo.length; i++) {\n          var debugEntry = nextChild._debugInfo[i];\n\n          if (typeof debugEntry.name !== 'string') {\n            // Not a Component. Some other Debug Info.\n            continue;\n          }\n\n          var componentInfo = debugEntry;\n          var secondaryEnv = getSecondaryEnvironmentName(nextChild._debugInfo, i);\n\n          if (componentInfo.env != null) {\n            knownEnvironmentNames.add(componentInfo.env);\n          }\n\n          if (secondaryEnv !== null) {\n            knownEnvironmentNames.add(secondaryEnv);\n          }\n\n          if (shouldFilterVirtual(componentInfo, secondaryEnv)) {\n            continue;\n          }\n\n          if (level === virtualLevel) {\n            if (previousVirtualInstance === null || // Consecutive children with the same debug entry as a parent gets\n            // treated as if they share the same virtual instance.\n            previousVirtualInstance.data !== componentInfo) {\n              if (previousVirtualInstance !== null) {\n                // Mount any previous children that should go into the previous parent.\n                if (previousVirtualInstanceWasMount) {\n                  mountVirtualInstanceRecursively(previousVirtualInstance, previousVirtualInstanceNextFirstFiber, nextChild, traceNearestHostComponentUpdate, virtualLevel);\n                } else {\n                  updateVirtualInstanceRecursively(previousVirtualInstance, previousVirtualInstanceNextFirstFiber, nextChild, previousVirtualInstancePrevFirstFiber, traceNearestHostComponentUpdate, virtualLevel);\n                }\n              }\n\n              var previousSiblingOfBestMatch = null;\n              var bestMatch = remainingReconcilingChildren;\n\n              if (componentInfo.key != null) {\n                // If there is a key try to find a matching key in the set.\n                bestMatch = remainingReconcilingChildren;\n\n                while (bestMatch !== null) {\n                  if (bestMatch.kind === VIRTUAL_INSTANCE && bestMatch.data.key === componentInfo.key) {\n                    break;\n                  }\n\n                  previousSiblingOfBestMatch = bestMatch;\n                  bestMatch = bestMatch.nextSibling;\n                }\n              }\n\n              if (bestMatch !== null && bestMatch.kind === VIRTUAL_INSTANCE && bestMatch.data.name === componentInfo.name && bestMatch.data.env === componentInfo.env && bestMatch.data.key === componentInfo.key) {\n                // If the previous children had a virtual instance in the same slot\n                // with the same name, then we claim it and reuse it for this update.\n                // Update it with the latest entry.\n                bestMatch.data = componentInfo;\n                moveChild(bestMatch, previousSiblingOfBestMatch);\n                previousVirtualInstance = bestMatch;\n                previousVirtualInstanceWasMount = false;\n              } else {\n                // Otherwise we create a new instance.\n                var newVirtualInstance = createVirtualInstance(componentInfo);\n                recordVirtualMount(newVirtualInstance, reconcilingParent, secondaryEnv);\n                insertChild(newVirtualInstance);\n                previousVirtualInstance = newVirtualInstance;\n                previousVirtualInstanceWasMount = true;\n                shouldResetChildren = true;\n              } // Existing children might be reparented into this new virtual instance.\n              // TODO: This will cause the front end to error which needs to be fixed.\n\n\n              previousVirtualInstanceNextFirstFiber = nextChild;\n              previousVirtualInstancePrevFirstFiber = prevChildAtSameIndex;\n            }\n\n            level++;\n            break;\n          } else {\n            level++;\n          }\n        }\n      }\n\n      if (level === virtualLevel) {\n        if (previousVirtualInstance !== null) {\n          // If we were working on a virtual instance and this is not a virtual\n          // instance, then we end the sequence and update any previous children\n          // that should go into the previous virtual instance.\n          if (previousVirtualInstanceWasMount) {\n            mountVirtualInstanceRecursively(previousVirtualInstance, previousVirtualInstanceNextFirstFiber, nextChild, traceNearestHostComponentUpdate, virtualLevel);\n          } else {\n            updateVirtualInstanceRecursively(previousVirtualInstance, previousVirtualInstanceNextFirstFiber, nextChild, previousVirtualInstancePrevFirstFiber, traceNearestHostComponentUpdate, virtualLevel);\n          }\n\n          previousVirtualInstance = null;\n        } // We've reached the end of the virtual levels, but not beyond,\n        // and now continue with the regular fiber.\n        // Do a fast pass over the remaining children to find the previous instance.\n        // TODO: This doesn't have the best O(n) for a large set of children that are\n        // reordered. Consider using a temporary map if it's not the very next one.\n\n\n        var prevChild = void 0;\n\n        if (prevChildAtSameIndex === nextChild) {\n          // This set is unchanged. We're just going through it to place all the\n          // children again.\n          prevChild = nextChild;\n        } else {\n          // We don't actually need to rely on the alternate here. We could also\n          // reconcile against stateNode, key or whatever. Doesn't have to be same\n          // Fiber pair.\n          prevChild = nextChild.alternate;\n        }\n\n        var previousSiblingOfExistingInstance = null;\n        var existingInstance = null;\n\n        if (prevChild !== null) {\n          existingInstance = remainingReconcilingChildren;\n\n          while (existingInstance !== null) {\n            if (existingInstance.data === prevChild) {\n              break;\n            }\n\n            previousSiblingOfExistingInstance = existingInstance;\n            existingInstance = existingInstance.nextSibling;\n          }\n        }\n\n        if (existingInstance !== null) {\n          // Common case. Match in the same parent.\n          var fiberInstance = existingInstance; // Only matches if it's a Fiber.\n          // We keep track if the order of the children matches the previous order.\n          // They are always different referentially, but if the instances line up\n          // conceptually we'll want to know that.\n\n          if (prevChild !== prevChildAtSameIndex) {\n            shouldResetChildren = true;\n          }\n\n          moveChild(fiberInstance, previousSiblingOfExistingInstance);\n\n          if (updateFiberRecursively(fiberInstance, nextChild, prevChild, traceNearestHostComponentUpdate)) {\n            // If a nested tree child order changed but it can't handle its own\n            // child order invalidation (e.g. because it's filtered out like host nodes),\n            // propagate the need to reset child order upwards to this Fiber.\n            shouldResetChildren = true;\n          }\n        } else if (prevChild !== null && shouldFilterFiber(nextChild)) {\n          // If this Fiber should be filtered, we need to still update its children.\n          // This relies on an alternate since we don't have an Instance with the previous\n          // child on it. Ideally, the reconciliation wouldn't need previous Fibers that\n          // are filtered from the tree.\n          if (updateFiberRecursively(null, nextChild, prevChild, traceNearestHostComponentUpdate)) {\n            shouldResetChildren = true;\n          }\n        } else {\n          // It's possible for a FiberInstance to be reparented when virtual parents\n          // get their sequence split or change structure with the same render result.\n          // In this case we unmount the and remount the FiberInstances.\n          // This might cause us to lose the selection but it's an edge case.\n          // We let the previous instance remain in the \"remaining queue\" it is\n          // in to be deleted at the end since it'll have no match.\n          mountFiberRecursively(nextChild, traceNearestHostComponentUpdate); // Need to mark the parent set to remount the new instance.\n\n          shouldResetChildren = true;\n        }\n      } // Try the next child.\n\n\n      nextChild = nextChild.sibling; // Advance the pointer in the previous list so that we can\n      // keep comparing if they line up.\n\n      if (!shouldResetChildren && prevChildAtSameIndex !== null) {\n        prevChildAtSameIndex = prevChildAtSameIndex.sibling;\n      }\n    }\n\n    if (previousVirtualInstance !== null) {\n      if (previousVirtualInstanceWasMount) {\n        mountVirtualInstanceRecursively(previousVirtualInstance, previousVirtualInstanceNextFirstFiber, null, traceNearestHostComponentUpdate, virtualLevel);\n      } else {\n        updateVirtualInstanceRecursively(previousVirtualInstance, previousVirtualInstanceNextFirstFiber, null, previousVirtualInstancePrevFirstFiber, traceNearestHostComponentUpdate, virtualLevel);\n      }\n    } // If we have no more children, but used to, they don't line up.\n\n\n    if (prevChildAtSameIndex !== null) {\n      shouldResetChildren = true;\n    }\n\n    return shouldResetChildren;\n  } // Returns whether closest unfiltered fiber parent needs to reset its child list.\n\n\n  function updateChildrenRecursively(nextFirstChild, prevFirstChild, traceNearestHostComponentUpdate) {\n    if (nextFirstChild === null) {\n      return prevFirstChild !== null;\n    }\n\n    return updateVirtualChildrenRecursively(nextFirstChild, null, prevFirstChild, traceNearestHostComponentUpdate, 0);\n  } // Returns whether closest unfiltered fiber parent needs to reset its child list.\n\n\n  function updateFiberRecursively(fiberInstance, // null if this should be filtered\n  nextFiber, prevFiber, traceNearestHostComponentUpdate) {\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      if (fiberInstance !== null) {\n        debug('updateFiberRecursively()', fiberInstance, reconcilingParent);\n      }\n    }\n\n    if (traceUpdatesEnabled) {\n      var elementType = getElementTypeForFiber(nextFiber);\n\n      if (traceNearestHostComponentUpdate) {\n        // If an ancestor updated, we should mark the nearest host nodes for highlighting.\n        if (elementType === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeHostComponent) {\n          traceUpdatesForNodes.add(nextFiber.stateNode);\n          traceNearestHostComponentUpdate = false;\n        }\n      } else {\n        if (elementType === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeFunction || elementType === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeClass || elementType === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeContext || elementType === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeMemo || elementType === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeForwardRef) {\n          // Otherwise if this is a traced ancestor, flag for the nearest host descendant(s).\n          traceNearestHostComponentUpdate = didFiberRender(prevFiber, nextFiber);\n        }\n      }\n    }\n\n    var stashedParent = reconcilingParent;\n    var stashedPrevious = previouslyReconciledSibling;\n    var stashedRemaining = remainingReconcilingChildren;\n\n    if (fiberInstance !== null) {\n      // Update the Fiber so we that we always keep the current Fiber on the data.\n      fiberInstance.data = nextFiber;\n\n      if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === fiberInstance.id && didFiberRender(prevFiber, nextFiber)) {\n        // If this Fiber has updated, clear cached inspected data.\n        // If it is inspected again, it may need to be re-run to obtain updated hooks values.\n        hasElementUpdatedSinceLastInspected = true;\n      } // Push a new DevTools instance parent while reconciling this subtree.\n\n\n      reconcilingParent = fiberInstance;\n      previouslyReconciledSibling = null; // Move all the children of this instance to the remaining set.\n      // We'll move them back one by one, and anything that remains is deleted.\n\n      remainingReconcilingChildren = fiberInstance.firstChild;\n      fiberInstance.firstChild = null;\n    }\n\n    try {\n      if (nextFiber.tag === HostHoistable) {\n        var nearestInstance = reconcilingParent;\n\n        if (nearestInstance === null) {\n          throw new Error('Did not expect a host hoistable to be the root');\n        }\n\n        releaseHostResource(nearestInstance, prevFiber.memoizedState);\n        aquireHostResource(nearestInstance, nextFiber.memoizedState);\n      }\n\n      var isSuspense = nextFiber.tag === SuspenseComponent;\n      var shouldResetChildren = false; // The behavior of timed-out Suspense trees is unique.\n      // Rather than unmount the timed out content (and possibly lose important state),\n      // React re-parents this content within a hidden Fragment while the fallback is showing.\n      // This behavior doesn't need to be observable in the DevTools though.\n      // It might even result in a bad user experience for e.g. node selection in the Elements panel.\n      // The easiest fix is to strip out the intermediate Fragment fibers,\n      // so the Elements panel and Profiler don't need to special case them.\n      // Suspense components only have a non-null memoizedState if they're timed-out.\n\n      var prevDidTimeout = isSuspense && prevFiber.memoizedState !== null;\n      var nextDidTimeOut = isSuspense && nextFiber.memoizedState !== null; // The logic below is inspired by the code paths in updateSuspenseComponent()\n      // inside ReactFiberBeginWork in the React source code.\n\n      if (prevDidTimeout && nextDidTimeOut) {\n        // Fallback -> Fallback:\n        // 1. Reconcile fallback set.\n        var nextFiberChild = nextFiber.child;\n        var nextFallbackChildSet = nextFiberChild ? nextFiberChild.sibling : null; // Note: We can't use nextFiber.child.sibling.alternate\n        // because the set is special and alternate may not exist.\n\n        var prevFiberChild = prevFiber.child;\n        var prevFallbackChildSet = prevFiberChild ? prevFiberChild.sibling : null;\n\n        if (prevFallbackChildSet == null && nextFallbackChildSet != null) {\n          mountChildrenRecursively(nextFallbackChildSet, traceNearestHostComponentUpdate);\n          shouldResetChildren = true;\n        }\n\n        if (nextFallbackChildSet != null && prevFallbackChildSet != null && updateChildrenRecursively(nextFallbackChildSet, prevFallbackChildSet, traceNearestHostComponentUpdate)) {\n          shouldResetChildren = true;\n        }\n      } else if (prevDidTimeout && !nextDidTimeOut) {\n        // Fallback -> Primary:\n        // 1. Unmount fallback set\n        // Note: don't emulate fallback unmount because React actually did it.\n        // 2. Mount primary set\n        var nextPrimaryChildSet = nextFiber.child;\n\n        if (nextPrimaryChildSet !== null) {\n          mountChildrenRecursively(nextPrimaryChildSet, traceNearestHostComponentUpdate);\n        }\n\n        shouldResetChildren = true;\n      } else if (!prevDidTimeout && nextDidTimeOut) {\n        // Primary -> Fallback:\n        // 1. Hide primary set\n        // We simply don't re-add the fallback children and let\n        // unmountRemainingChildren() handle it.\n        // 2. Mount fallback set\n        var _nextFiberChild = nextFiber.child;\n\n        var _nextFallbackChildSet = _nextFiberChild ? _nextFiberChild.sibling : null;\n\n        if (_nextFallbackChildSet != null) {\n          mountChildrenRecursively(_nextFallbackChildSet, traceNearestHostComponentUpdate);\n          shouldResetChildren = true;\n        }\n      } else {\n        // Common case: Primary -> Primary.\n        // This is the same code path as for non-Suspense fibers.\n        if (nextFiber.child !== prevFiber.child) {\n          if (updateChildrenRecursively(nextFiber.child, prevFiber.child, traceNearestHostComponentUpdate)) {\n            shouldResetChildren = true;\n          }\n        } else {\n          // Children are unchanged.\n          if (fiberInstance !== null) {\n            // All the remaining children will be children of this same fiber so we can just reuse them.\n            // I.e. we just restore them by undoing what we did above.\n            fiberInstance.firstChild = remainingReconcilingChildren;\n            remainingReconcilingChildren = null;\n\n            if (traceUpdatesEnabled) {\n              // If we're tracing updates and we've bailed out before reaching a host node,\n              // we should fall back to recursively marking the nearest host descendants for highlight.\n              if (traceNearestHostComponentUpdate) {\n                var hostInstances = findAllCurrentHostInstances(fiberInstance);\n                hostInstances.forEach(function (hostInstance) {\n                  traceUpdatesForNodes.add(hostInstance);\n                });\n              }\n            }\n          } else {\n            // If this fiber is filtered there might be changes to this set elsewhere so we have\n            // to visit each child to place it back in the set. We let the child bail out instead.\n            if (updateChildrenRecursively(nextFiber.child, prevFiber.child, false)) {\n              throw new Error('The children should not have changed if we pass in the same set.');\n            }\n          }\n        }\n      }\n\n      if (fiberInstance !== null) {\n        var componentLogsEntry = fiberToComponentLogsMap.get(fiberInstance.data);\n\n        if (componentLogsEntry === undefined && fiberInstance.data.alternate) {\n          componentLogsEntry = fiberToComponentLogsMap.get(fiberInstance.data.alternate);\n        }\n\n        recordConsoleLogs(fiberInstance, componentLogsEntry);\n        var isProfilingSupported = nextFiber.hasOwnProperty('treeBaseDuration');\n\n        if (isProfilingSupported) {\n          recordProfilingDurations(fiberInstance, prevFiber);\n        }\n      }\n\n      if (shouldResetChildren) {\n        // We need to crawl the subtree for closest non-filtered Fibers\n        // so that we can display them in a flat children set.\n        if (fiberInstance !== null) {\n          recordResetChildren(fiberInstance); // We've handled the child order change for this Fiber.\n          // Since it's included, there's no need to invalidate parent child order.\n\n          return false;\n        } else {\n          // Let the closest unfiltered parent Fiber reset its child order instead.\n          return true;\n        }\n      } else {\n        return false;\n      }\n    } finally {\n      if (fiberInstance !== null) {\n        unmountRemainingChildren();\n        reconcilingParent = stashedParent;\n        previouslyReconciledSibling = stashedPrevious;\n        remainingReconcilingChildren = stashedRemaining;\n      }\n    }\n  }\n\n  function cleanup() {\n    isProfiling = false;\n  }\n\n  function rootSupportsProfiling(root) {\n    if (root.memoizedInteractions != null) {\n      // v16 builds include this field for the scheduler/tracing API.\n      return true;\n    } else if (root.current != null && root.current.hasOwnProperty('treeBaseDuration')) {\n      // The scheduler/tracing API was removed in v17 though\n      // so we need to check a non-root Fiber.\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function flushInitialOperations() {\n    var localPendingOperationsQueue = pendingOperationsQueue;\n    pendingOperationsQueue = null;\n\n    if (localPendingOperationsQueue !== null && localPendingOperationsQueue.length > 0) {\n      // We may have already queued up some operations before the frontend connected\n      // If so, let the frontend know about them.\n      localPendingOperationsQueue.forEach(function (operations) {\n        hook.emit('operations', operations);\n      });\n    } else {\n      // Before the traversals, remember to start tracking\n      // our path in case we have selection to restore.\n      if (trackedPath !== null) {\n        mightBeOnTrackedPath = true;\n      } // If we have not been profiling, then we can just walk the tree and build up its current state as-is.\n\n\n      hook.getFiberRoots(rendererID).forEach(function (root) {\n        var current = root.current;\n        var newRoot = createFiberInstance(current);\n        rootToFiberInstanceMap.set(root, newRoot);\n        idToDevToolsInstanceMap.set(newRoot.id, newRoot);\n        currentRoot = newRoot;\n        setRootPseudoKey(currentRoot.id, root.current); // Handle multi-renderer edge-case where only some v16 renderers support profiling.\n\n        if (isProfiling && rootSupportsProfiling(root)) {\n          // If profiling is active, store commit time and duration.\n          // The frontend may request this information after profiling has stopped.\n          currentCommitProfilingMetadata = {\n            changeDescriptions: recordChangeDescriptions ? new Map() : null,\n            durations: [],\n            commitTime: getCurrentTime() - profilingStartTime,\n            maxActualDuration: 0,\n            priorityLevel: null,\n            updaters: null,\n            effectDuration: null,\n            passiveEffectDuration: null\n          };\n        }\n\n        mountFiberRecursively(root.current, false);\n        flushPendingEvents(root);\n        needsToFlushComponentLogs = false;\n        currentRoot = null;\n      });\n    }\n  }\n\n  function handleCommitFiberUnmount(fiber) {// This Hook is no longer used. After having shipped DevTools everywhere it is\n    // safe to stop calling it from Fiber.\n  }\n\n  function handlePostCommitFiberRoot(root) {\n    if (isProfiling && rootSupportsProfiling(root)) {\n      if (currentCommitProfilingMetadata !== null) {\n        var _getEffectDurations = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.getEffectDurations)(root),\n            effectDuration = _getEffectDurations.effectDuration,\n            passiveEffectDuration = _getEffectDurations.passiveEffectDuration; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n        currentCommitProfilingMetadata.effectDuration = effectDuration; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        currentCommitProfilingMetadata.passiveEffectDuration = passiveEffectDuration;\n      }\n    }\n\n    if (needsToFlushComponentLogs) {\n      // We received new logs after commit. I.e. in a passive effect. We need to\n      // traverse the tree to find the affected ones. If we just moved the whole\n      // tree traversal from handleCommitFiberRoot to handlePostCommitFiberRoot\n      // this wouldn't be needed. For now we just brute force check all instances.\n      // This is not that common of a case.\n      bruteForceFlushErrorsAndWarnings();\n    }\n  }\n\n  function handleCommitFiberRoot(root, priorityLevel) {\n    var current = root.current;\n    var prevFiber = null;\n    var rootInstance = rootToFiberInstanceMap.get(root);\n\n    if (!rootInstance) {\n      rootInstance = createFiberInstance(current);\n      rootToFiberInstanceMap.set(root, rootInstance);\n      idToDevToolsInstanceMap.set(rootInstance.id, rootInstance);\n    } else {\n      prevFiber = rootInstance.data;\n    }\n\n    currentRoot = rootInstance; // Before the traversals, remember to start tracking\n    // our path in case we have selection to restore.\n\n    if (trackedPath !== null) {\n      mightBeOnTrackedPath = true;\n    }\n\n    if (traceUpdatesEnabled) {\n      traceUpdatesForNodes.clear();\n    } // Handle multi-renderer edge-case where only some v16 renderers support profiling.\n\n\n    var isProfilingSupported = rootSupportsProfiling(root);\n\n    if (isProfiling && isProfilingSupported) {\n      // If profiling is active, store commit time and duration.\n      // The frontend may request this information after profiling has stopped.\n      currentCommitProfilingMetadata = {\n        changeDescriptions: recordChangeDescriptions ? new Map() : null,\n        durations: [],\n        commitTime: getCurrentTime() - profilingStartTime,\n        maxActualDuration: 0,\n        priorityLevel: priorityLevel == null ? null : formatPriorityLevel(priorityLevel),\n        updaters: null,\n        // Initialize to null; if new enough React version is running,\n        // these values will be read during separate handlePostCommitFiberRoot() call.\n        effectDuration: null,\n        passiveEffectDuration: null\n      };\n    }\n\n    if (prevFiber !== null) {\n      // TODO: relying on this seems a bit fishy.\n      var wasMounted = prevFiber.memoizedState != null && prevFiber.memoizedState.element != null && // A dehydrated root is not considered mounted\n      prevFiber.memoizedState.isDehydrated !== true;\n      var isMounted = current.memoizedState != null && current.memoizedState.element != null && // A dehydrated root is not considered mounted\n      current.memoizedState.isDehydrated !== true;\n\n      if (!wasMounted && isMounted) {\n        // Mount a new root.\n        setRootPseudoKey(currentRoot.id, current);\n        mountFiberRecursively(current, false);\n      } else if (wasMounted && isMounted) {\n        // Update an existing root.\n        updateFiberRecursively(rootInstance, current, prevFiber, false);\n      } else if (wasMounted && !isMounted) {\n        // Unmount an existing root.\n        unmountInstanceRecursively(rootInstance);\n        removeRootPseudoKey(currentRoot.id);\n        rootToFiberInstanceMap.delete(root);\n      }\n    } else {\n      // Mount a new root.\n      setRootPseudoKey(currentRoot.id, current);\n      mountFiberRecursively(current, false);\n    }\n\n    if (isProfiling && isProfilingSupported) {\n      if (!shouldBailoutWithPendingOperations()) {\n        var commitProfilingMetadata = rootToCommitProfilingMetadataMap.get(currentRoot.id);\n\n        if (commitProfilingMetadata != null) {\n          commitProfilingMetadata.push(currentCommitProfilingMetadata);\n        } else {\n          rootToCommitProfilingMetadataMap.set(currentRoot.id, [currentCommitProfilingMetadata]);\n        }\n      }\n    } // We're done here.\n\n\n    flushPendingEvents(root);\n    needsToFlushComponentLogs = false;\n\n    if (traceUpdatesEnabled) {\n      hook.emit('traceUpdates', traceUpdatesForNodes);\n    }\n\n    currentRoot = null;\n  }\n\n  function getResourceInstance(fiber) {\n    if (fiber.tag === HostHoistable) {\n      var resource = fiber.memoizedState; // Feature Detect a DOM Specific Instance of a Resource\n\n      if (_typeof(resource) === 'object' && resource !== null && resource.instance != null) {\n        return resource.instance;\n      }\n    }\n\n    return null;\n  }\n\n  function appendHostInstancesByDevToolsInstance(devtoolsInstance, hostInstances) {\n    if (devtoolsInstance.kind !== VIRTUAL_INSTANCE) {\n      var _fiber4 = devtoolsInstance.data;\n      appendHostInstancesByFiber(_fiber4, hostInstances);\n      return;\n    } // Search the tree for the nearest child Fiber and add all its host instances.\n    // TODO: If the true nearest Fiber is filtered, we might skip it and instead include all\n    // the children below it. In the extreme case, searching the whole tree.\n\n\n    for (var child = devtoolsInstance.firstChild; child !== null; child = child.nextSibling) {\n      appendHostInstancesByDevToolsInstance(child, hostInstances);\n    }\n  }\n\n  function appendHostInstancesByFiber(fiber, hostInstances) {\n    // Next we'll drill down this component to find all HostComponent/Text.\n    var node = fiber;\n\n    while (true) {\n      if (node.tag === HostComponent || node.tag === HostText || node.tag === HostSingleton || node.tag === HostHoistable) {\n        var hostInstance = node.stateNode || getResourceInstance(node);\n\n        if (hostInstance) {\n          hostInstances.push(hostInstance);\n        }\n      } else if (node.child) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === fiber) {\n        return;\n      }\n\n      while (!node.sibling) {\n        if (!node.return || node.return === fiber) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  function findAllCurrentHostInstances(devtoolsInstance) {\n    var hostInstances = [];\n    appendHostInstancesByDevToolsInstance(devtoolsInstance, hostInstances);\n    return hostInstances;\n  }\n\n  function findHostInstancesForElementID(id) {\n    try {\n      var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n      if (devtoolsInstance === undefined) {\n        console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n        return null;\n      }\n\n      return findAllCurrentHostInstances(devtoolsInstance);\n    } catch (err) {\n      // The fiber might have unmounted by now.\n      return null;\n    }\n  }\n\n  function getDisplayNameForElementID(id) {\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      return null;\n    }\n\n    if (devtoolsInstance.kind === FIBER_INSTANCE) {\n      return getDisplayNameForFiber(devtoolsInstance.data);\n    } else {\n      return devtoolsInstance.data.name || '';\n    }\n  }\n\n  function getNearestMountedDOMNode(publicInstance) {\n    var domNode = publicInstance;\n\n    while (domNode && !publicInstanceToDevToolsInstanceMap.has(domNode)) {\n      // $FlowFixMe: In practice this is either null or Element.\n      domNode = domNode.parentNode;\n    }\n\n    return domNode;\n  }\n\n  function getElementIDForHostInstance(publicInstance) {\n    var instance = publicInstanceToDevToolsInstanceMap.get(publicInstance);\n\n    if (instance !== undefined) {\n      if (instance.kind === FILTERED_FIBER_INSTANCE) {\n        // A Filtered Fiber Instance will always have a Virtual Instance as a parent.\n        return instance.parent.id;\n      }\n\n      return instance.id;\n    }\n\n    return null;\n  }\n\n  function getElementAttributeByPath(id, path) {\n    if (isMostRecentlyInspectedElement(id)) {\n      return (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getInObject)(mostRecentlyInspectedElement, path);\n    }\n\n    return undefined;\n  }\n\n  function getElementSourceFunctionById(id) {\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n      return null;\n    }\n\n    if (devtoolsInstance.kind !== FIBER_INSTANCE) {\n      // TODO: Handle VirtualInstance.\n      return null;\n    }\n\n    var fiber = devtoolsInstance.data;\n    var elementType = fiber.elementType,\n        tag = fiber.tag,\n        type = fiber.type;\n\n    switch (tag) {\n      case ClassComponent:\n      case IncompleteClassComponent:\n      case IncompleteFunctionComponent:\n      case IndeterminateComponent:\n      case FunctionComponent:\n        return type;\n\n      case ForwardRef:\n        return type.render;\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        return elementType != null && elementType.type != null ? elementType.type : type;\n\n      default:\n        return null;\n    }\n  }\n\n  function instanceToSerializedElement(instance) {\n    if (instance.kind === FIBER_INSTANCE) {\n      var _fiber5 = instance.data;\n      return {\n        displayName: getDisplayNameForFiber(_fiber5) || 'Anonymous',\n        id: instance.id,\n        key: _fiber5.key,\n        type: getElementTypeForFiber(_fiber5)\n      };\n    } else {\n      var componentInfo = instance.data;\n      return {\n        displayName: componentInfo.name || 'Anonymous',\n        id: instance.id,\n        key: componentInfo.key == null ? null : componentInfo.key,\n        type: react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeVirtual\n      };\n    }\n  }\n\n  function getOwnersList(id) {\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n      return null;\n    }\n\n    var self = instanceToSerializedElement(devtoolsInstance);\n    var owners = getOwnersListFromInstance(devtoolsInstance); // This is particular API is prefixed with the current instance too for some reason.\n\n    if (owners === null) {\n      return [self];\n    }\n\n    owners.unshift(self);\n    owners.reverse();\n    return owners;\n  }\n\n  function getOwnersListFromInstance(instance) {\n    var owner = getUnfilteredOwner(instance.data);\n\n    if (owner === null) {\n      return null;\n    }\n\n    var owners = [];\n    var parentInstance = instance.parent;\n\n    while (parentInstance !== null && owner !== null) {\n      var ownerInstance = findNearestOwnerInstance(parentInstance, owner);\n\n      if (ownerInstance !== null) {\n        owners.push(instanceToSerializedElement(ownerInstance)); // Get the next owner and keep searching from the previous match.\n\n        owner = getUnfilteredOwner(owner);\n        parentInstance = ownerInstance.parent;\n      } else {\n        break;\n      }\n    }\n\n    return owners;\n  }\n\n  function getUnfilteredOwner(owner) {\n    if (owner == null) {\n      return null;\n    }\n\n    if (typeof owner.tag === 'number') {\n      var ownerFiber = owner; // Refined\n\n      owner = ownerFiber._debugOwner;\n    } else {\n      var ownerInfo = owner; // Refined\n\n      owner = ownerInfo.owner;\n    }\n\n    while (owner) {\n      if (typeof owner.tag === 'number') {\n        var _ownerFiber = owner; // Refined\n\n        if (!shouldFilterFiber(_ownerFiber)) {\n          return _ownerFiber;\n        }\n\n        owner = _ownerFiber._debugOwner;\n      } else {\n        var _ownerInfo = owner; // Refined\n\n        if (!shouldFilterVirtual(_ownerInfo, null)) {\n          return _ownerInfo;\n        }\n\n        owner = _ownerInfo.owner;\n      }\n    }\n\n    return null;\n  }\n\n  function findNearestOwnerInstance(parentInstance, owner) {\n    if (owner == null) {\n      return null;\n    } // Search the parent path for any instance that matches this kind of owner.\n\n\n    while (parentInstance !== null) {\n      if (parentInstance.data === owner || // Typically both owner and instance.data would refer to the current version of a Fiber\n      // but it is possible for memoization to ignore the owner on the JSX. Then the new Fiber\n      // isn't propagated down as the new owner. In that case we might match the alternate\n      // instead. This is a bit hacky but the fastest check since type casting owner to a Fiber\n      // needs a duck type check anyway.\n      parentInstance.data === owner.alternate) {\n        if (parentInstance.kind === FILTERED_FIBER_INSTANCE) {\n          return null;\n        }\n\n        return parentInstance;\n      }\n\n      parentInstance = parentInstance.parent;\n    } // It is technically possible to create an element and render it in a different parent\n    // but this is a weird edge case and it is worth not having to scan the tree or keep\n    // a register for every fiber/component info.\n\n\n    return null;\n  } // Fast path props lookup for React Native style editor.\n  // Could use inspectElementRaw() but that would require shallow rendering hooks components,\n  // and could also mess with memoization.\n\n\n  function getInstanceAndStyle(id) {\n    var instance = null;\n    var style = null;\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n      return {\n        instance: instance,\n        style: style\n      };\n    }\n\n    if (devtoolsInstance.kind !== FIBER_INSTANCE) {\n      // TODO: Handle VirtualInstance.\n      return {\n        instance: instance,\n        style: style\n      };\n    }\n\n    var fiber = devtoolsInstance.data;\n\n    if (fiber !== null) {\n      instance = fiber.stateNode;\n\n      if (fiber.memoizedProps !== null) {\n        style = fiber.memoizedProps.style;\n      }\n    }\n\n    return {\n      instance: instance,\n      style: style\n    };\n  }\n\n  function isErrorBoundary(fiber) {\n    var tag = fiber.tag,\n        type = fiber.type;\n\n    switch (tag) {\n      case ClassComponent:\n      case IncompleteClassComponent:\n        var instance = fiber.stateNode;\n        return typeof type.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function';\n\n      default:\n        return false;\n    }\n  }\n\n  function inspectElementRaw(id) {\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n      return null;\n    }\n\n    if (devtoolsInstance.kind === VIRTUAL_INSTANCE) {\n      return inspectVirtualInstanceRaw(devtoolsInstance);\n    }\n\n    if (devtoolsInstance.kind === FIBER_INSTANCE) {\n      return inspectFiberInstanceRaw(devtoolsInstance);\n    }\n\n    devtoolsInstance; // assert exhaustive\n\n    throw new Error('Unsupported instance kind');\n  }\n\n  function inspectFiberInstanceRaw(fiberInstance) {\n    var fiber = fiberInstance.data;\n\n    if (fiber == null) {\n      return null;\n    }\n\n    var stateNode = fiber.stateNode,\n        key = fiber.key,\n        memoizedProps = fiber.memoizedProps,\n        memoizedState = fiber.memoizedState,\n        dependencies = fiber.dependencies,\n        tag = fiber.tag,\n        type = fiber.type;\n    var elementType = getElementTypeForFiber(fiber);\n    var usesHooks = (tag === FunctionComponent || tag === SimpleMemoComponent || tag === ForwardRef) && (!!memoizedState || !!dependencies); // TODO Show custom UI for Cache like we do for Suspense\n    // For now, just hide state data entirely since it's not meant to be inspected.\n\n    var showState = !usesHooks && tag !== CacheComponent;\n    var typeSymbol = getTypeSymbol(type);\n    var canViewSource = false;\n    var context = null;\n\n    if (tag === ClassComponent || tag === FunctionComponent || tag === IncompleteClassComponent || tag === IncompleteFunctionComponent || tag === IndeterminateComponent || tag === MemoComponent || tag === ForwardRef || tag === SimpleMemoComponent) {\n      canViewSource = true;\n\n      if (stateNode && stateNode.context != null) {\n        // Don't show an empty context object for class components that don't use the context API.\n        var shouldHideContext = elementType === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeClass && !(type.contextTypes || type.contextType);\n\n        if (!shouldHideContext) {\n          context = stateNode.context;\n        }\n      }\n    } else if ( // Detect pre-19 Context Consumers\n    (typeSymbol === _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONTEXT_NUMBER || typeSymbol === _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONTEXT_SYMBOL_STRING) && !( // In 19+, CONTEXT_SYMBOL_STRING means a Provider instead.\n    // It will be handled in a different branch below.\n    // Eventually, this entire branch can be removed.\n    type._context === undefined && type.Provider === type)) {\n      // 16.3-16.5 read from \"type\" because the Consumer is the actual context object.\n      // 16.6+ should read from \"type._context\" because Consumer can be different (in DEV).\n      // NOTE Keep in sync with getDisplayNameForFiber()\n      var consumerResolvedContext = type._context || type; // Global context value.\n\n      context = consumerResolvedContext._currentValue || null; // Look for overridden value.\n\n      var _current = fiber.return;\n\n      while (_current !== null) {\n        var currentType = _current.type;\n        var currentTypeSymbol = getTypeSymbol(currentType);\n\n        if (currentTypeSymbol === _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROVIDER_NUMBER || currentTypeSymbol === _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.PROVIDER_SYMBOL_STRING) {\n          // 16.3.0 exposed the context object as \"context\"\n          // PR #12501 changed it to \"_context\" for 16.3.1+\n          // NOTE Keep in sync with getDisplayNameForFiber()\n          var providerResolvedContext = currentType._context || currentType.context;\n\n          if (providerResolvedContext === consumerResolvedContext) {\n            context = _current.memoizedProps.value;\n            break;\n          }\n        }\n\n        _current = _current.return;\n      }\n    } else if ( // Detect 19+ Context Consumers\n    typeSymbol === _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONSUMER_SYMBOL_STRING) {\n      // This branch is 19+ only, where Context.Provider === Context.\n      // NOTE Keep in sync with getDisplayNameForFiber()\n      var _consumerResolvedContext = type._context; // Global context value.\n\n      context = _consumerResolvedContext._currentValue || null; // Look for overridden value.\n\n      var _current2 = fiber.return;\n\n      while (_current2 !== null) {\n        var _currentType = _current2.type;\n\n        var _currentTypeSymbol = getTypeSymbol(_currentType);\n\n        if ( // In 19+, these are Context Providers\n        _currentTypeSymbol === _shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_5__.CONTEXT_SYMBOL_STRING) {\n          var _providerResolvedContext = _currentType;\n\n          if (_providerResolvedContext === _consumerResolvedContext) {\n            context = _current2.memoizedProps.value;\n            break;\n          }\n        }\n\n        _current2 = _current2.return;\n      }\n    }\n\n    var hasLegacyContext = false;\n\n    if (context !== null) {\n      hasLegacyContext = !!type.contextTypes; // To simplify hydration and display logic for context, wrap in a value object.\n      // Otherwise simple values (e.g. strings, booleans) become harder to handle.\n\n      context = {\n        value: context\n      };\n    }\n\n    var owners = getOwnersListFromInstance(fiberInstance);\n    var hooks = null;\n\n    if (usesHooks) {\n      var originalConsoleMethods = {}; // Temporarily disable all console logging before re-running the hook.\n\n      for (var method in console) {\n        try {\n          // $FlowFixMe[invalid-computed-prop]\n          originalConsoleMethods[method] = console[method]; // $FlowFixMe[prop-missing]\n\n          console[method] = function () {};\n        } catch (error) {}\n      }\n\n      try {\n        hooks = (0,react_debug_tools__WEBPACK_IMPORTED_MODULE_4__.inspectHooksOfFiber)(fiber, getDispatcherRef(renderer));\n      } finally {\n        // Restore original console functionality.\n        for (var _method in originalConsoleMethods) {\n          try {\n            // $FlowFixMe[prop-missing]\n            console[_method] = originalConsoleMethods[_method];\n          } catch (error) {}\n        }\n      }\n    }\n\n    var rootType = null;\n    var current = fiber;\n    var hasErrorBoundary = false;\n    var hasSuspenseBoundary = false;\n\n    while (current.return !== null) {\n      var temp = current;\n      current = current.return;\n\n      if (temp.tag === SuspenseComponent) {\n        hasSuspenseBoundary = true;\n      } else if (isErrorBoundary(temp)) {\n        hasErrorBoundary = true;\n      }\n    }\n\n    var fiberRoot = current.stateNode;\n\n    if (fiberRoot != null && fiberRoot._debugRootType !== null) {\n      rootType = fiberRoot._debugRootType;\n    }\n\n    var isTimedOutSuspense = tag === SuspenseComponent && memoizedState !== null;\n    var isErrored = false;\n\n    if (isErrorBoundary(fiber)) {\n      // if the current inspected element is an error boundary,\n      // either that we want to use it to toggle off error state\n      // or that we allow to force error state on it if it's within another\n      // error boundary\n      //\n      // TODO: This flag is a leaked implementation detail. Once we start\n      // releasing DevTools in lockstep with React, we should import a function\n      // from the reconciler instead.\n      var DidCapture = 128;\n      isErrored = (fiber.flags & DidCapture) !== 0 || forceErrorForFibers.get(fiber) === true || fiber.alternate !== null && forceErrorForFibers.get(fiber.alternate) === true;\n    }\n\n    var plugins = {\n      stylex: null\n    };\n\n    if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_6__.enableStyleXFeatures) {\n      if (memoizedProps != null && memoizedProps.hasOwnProperty('xstyle')) {\n        plugins.stylex = (0,_StyleX_utils__WEBPACK_IMPORTED_MODULE_11__.getStyleXData)(memoizedProps.xstyle);\n      }\n    }\n\n    var source = null;\n\n    if (canViewSource) {\n      source = getSourceForFiberInstance(fiberInstance);\n    }\n\n    var componentLogsEntry = fiberToComponentLogsMap.get(fiber);\n\n    if (componentLogsEntry === undefined && fiber.alternate !== null) {\n      componentLogsEntry = fiberToComponentLogsMap.get(fiber.alternate);\n    }\n\n    return {\n      id: fiberInstance.id,\n      // Does the current renderer support editable hooks and function props?\n      canEditHooks: typeof overrideHookState === 'function',\n      canEditFunctionProps: typeof overrideProps === 'function',\n      // Does the current renderer support advanced editing interface?\n      canEditHooksAndDeletePaths: typeof overrideHookStateDeletePath === 'function',\n      canEditHooksAndRenamePaths: typeof overrideHookStateRenamePath === 'function',\n      canEditFunctionPropsDeletePaths: typeof overridePropsDeletePath === 'function',\n      canEditFunctionPropsRenamePaths: typeof overridePropsRenamePath === 'function',\n      canToggleError: supportsTogglingError && hasErrorBoundary,\n      // Is this error boundary in error state.\n      isErrored: isErrored,\n      canToggleSuspense: supportsTogglingSuspense && hasSuspenseBoundary && ( // If it's showing the real content, we can always flip fallback.\n      !isTimedOutSuspense || // If it's showing fallback because we previously forced it to,\n      // allow toggling it back to remove the fallback override.\n      forceFallbackForFibers.has(fiber) || fiber.alternate !== null && forceFallbackForFibers.has(fiber.alternate)),\n      // Can view component source location.\n      canViewSource: canViewSource,\n      source: source,\n      // Does the component have legacy context attached to it.\n      hasLegacyContext: hasLegacyContext,\n      key: key != null ? key : null,\n      type: elementType,\n      // Inspectable properties.\n      // TODO Review sanitization approach for the below inspectable values.\n      context: context,\n      hooks: hooks,\n      props: memoizedProps,\n      state: showState ? memoizedState : null,\n      errors: componentLogsEntry === undefined ? [] : Array.from(componentLogsEntry.errors.entries()),\n      warnings: componentLogsEntry === undefined ? [] : Array.from(componentLogsEntry.warnings.entries()),\n      // List of owners\n      owners: owners,\n      rootType: rootType,\n      rendererPackageName: renderer.rendererPackageName,\n      rendererVersion: renderer.version,\n      plugins: plugins\n    };\n  }\n\n  function inspectVirtualInstanceRaw(virtualInstance) {\n    var canViewSource = true;\n    var source = getSourceForInstance(virtualInstance);\n    var componentInfo = virtualInstance.data;\n    var key = typeof componentInfo.key === 'string' ? componentInfo.key : null;\n    var props = componentInfo.props == null ? null : componentInfo.props;\n    var owners = getOwnersListFromInstance(virtualInstance);\n    var rootType = null;\n    var hasErrorBoundary = false;\n    var hasSuspenseBoundary = false;\n    var nearestFiber = getNearestFiber(virtualInstance);\n\n    if (nearestFiber !== null) {\n      var current = nearestFiber;\n\n      while (current.return !== null) {\n        var temp = current;\n        current = current.return;\n\n        if (temp.tag === SuspenseComponent) {\n          hasSuspenseBoundary = true;\n        } else if (isErrorBoundary(temp)) {\n          hasErrorBoundary = true;\n        }\n      }\n\n      var fiberRoot = current.stateNode;\n\n      if (fiberRoot != null && fiberRoot._debugRootType !== null) {\n        rootType = fiberRoot._debugRootType;\n      }\n    }\n\n    var plugins = {\n      stylex: null\n    };\n    var componentLogsEntry = _shared_DevToolsServerComponentLogs__WEBPACK_IMPORTED_MODULE_7__.componentInfoToComponentLogsMap.get(componentInfo);\n    return {\n      id: virtualInstance.id,\n      canEditHooks: false,\n      canEditFunctionProps: false,\n      canEditHooksAndDeletePaths: false,\n      canEditHooksAndRenamePaths: false,\n      canEditFunctionPropsDeletePaths: false,\n      canEditFunctionPropsRenamePaths: false,\n      canToggleError: supportsTogglingError && hasErrorBoundary,\n      isErrored: false,\n      canToggleSuspense: supportsTogglingSuspense && hasSuspenseBoundary,\n      // Can view component source location.\n      canViewSource: canViewSource,\n      source: source,\n      // Does the component have legacy context attached to it.\n      hasLegacyContext: false,\n      key: key,\n      type: react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeVirtual,\n      // Inspectable properties.\n      // TODO Review sanitization approach for the below inspectable values.\n      context: null,\n      hooks: null,\n      props: props,\n      state: null,\n      errors: componentLogsEntry === undefined ? [] : Array.from(componentLogsEntry.errors.entries()),\n      warnings: componentLogsEntry === undefined ? [] : Array.from(componentLogsEntry.warnings.entries()),\n      // List of owners\n      owners: owners,\n      rootType: rootType,\n      rendererPackageName: renderer.rendererPackageName,\n      rendererVersion: renderer.version,\n      plugins: plugins\n    };\n  }\n\n  var mostRecentlyInspectedElement = null;\n  var hasElementUpdatedSinceLastInspected = false;\n  var currentlyInspectedPaths = {};\n\n  function isMostRecentlyInspectedElement(id) {\n    return mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id;\n  }\n\n  function isMostRecentlyInspectedElementCurrent(id) {\n    return isMostRecentlyInspectedElement(id) && !hasElementUpdatedSinceLastInspected;\n  } // Track the intersection of currently inspected paths,\n  // so that we can send their data along if the element is re-rendered.\n\n\n  function mergeInspectedPaths(path) {\n    var current = currentlyInspectedPaths;\n    path.forEach(function (key) {\n      if (!current[key]) {\n        current[key] = {};\n      }\n\n      current = current[key];\n    });\n  }\n\n  function createIsPathAllowed(key, secondaryCategory) {\n    // This function helps prevent previously-inspected paths from being dehydrated in updates.\n    // This is important to avoid a bad user experience where expanded toggles collapse on update.\n    return function isPathAllowed(path) {\n      switch (secondaryCategory) {\n        case 'hooks':\n          if (path.length === 1) {\n            // Never dehydrate the \"hooks\" object at the top levels.\n            return true;\n          }\n\n          if (path[path.length - 2] === 'hookSource' && path[path.length - 1] === 'fileName') {\n            // It's important to preserve the full file name (URL) for hook sources\n            // in case the user has enabled the named hooks feature.\n            // Otherwise the frontend may end up with a partial URL which it can't load.\n            return true;\n          }\n\n          if (path[path.length - 1] === 'subHooks' || path[path.length - 2] === 'subHooks') {\n            // Dehydrating the 'subHooks' property makes the HooksTree UI a lot more complicated,\n            // so it's easiest for now if we just don't break on this boundary.\n            // We can always dehydrate a level deeper (in the value object).\n            return true;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      var current = key === null ? currentlyInspectedPaths : currentlyInspectedPaths[key];\n\n      if (!current) {\n        return false;\n      }\n\n      for (var i = 0; i < path.length; i++) {\n        current = current[path[i]];\n\n        if (!current) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n\n  function updateSelectedElement(inspectedElement) {\n    var hooks = inspectedElement.hooks,\n        id = inspectedElement.id,\n        props = inspectedElement.props;\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n      return;\n    }\n\n    if (devtoolsInstance.kind !== FIBER_INSTANCE) {\n      // TODO: Handle VirtualInstance.\n      return;\n    }\n\n    var fiber = devtoolsInstance.data;\n    var elementType = fiber.elementType,\n        stateNode = fiber.stateNode,\n        tag = fiber.tag,\n        type = fiber.type;\n\n    switch (tag) {\n      case ClassComponent:\n      case IncompleteClassComponent:\n      case IndeterminateComponent:\n        global.$r = stateNode;\n        break;\n\n      case IncompleteFunctionComponent:\n      case FunctionComponent:\n        global.$r = {\n          hooks: hooks,\n          props: props,\n          type: type\n        };\n        break;\n\n      case ForwardRef:\n        global.$r = {\n          hooks: hooks,\n          props: props,\n          type: type.render\n        };\n        break;\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        global.$r = {\n          hooks: hooks,\n          props: props,\n          type: elementType != null && elementType.type != null ? elementType.type : type\n        };\n        break;\n\n      default:\n        global.$r = null;\n        break;\n    }\n  }\n\n  function storeAsGlobal(id, path, count) {\n    if (isMostRecentlyInspectedElement(id)) {\n      var value = (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getInObject)(mostRecentlyInspectedElement, path);\n      var key = \"$reactTemp\".concat(count);\n      window[key] = value;\n      console.log(key);\n      console.log(value);\n    }\n  }\n\n  function getSerializedElementValueByPath(id, path) {\n    if (isMostRecentlyInspectedElement(id)) {\n      var valueToCopy = (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getInObject)(mostRecentlyInspectedElement, path);\n      return (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.serializeToString)(valueToCopy);\n    }\n  }\n\n  function inspectElement(requestID, id, path, forceFullData) {\n    if (path !== null) {\n      mergeInspectedPaths(path);\n    }\n\n    if (isMostRecentlyInspectedElement(id) && !forceFullData) {\n      if (!hasElementUpdatedSinceLastInspected) {\n        if (path !== null) {\n          var secondaryCategory = null;\n\n          if (path[0] === 'hooks') {\n            secondaryCategory = 'hooks';\n          } // If this element has not been updated since it was last inspected,\n          // we can just return the subset of data in the newly-inspected path.\n\n\n          return {\n            id: id,\n            responseID: requestID,\n            type: 'hydrated-path',\n            path: path,\n            value: (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.cleanForBridge)((0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.getInObject)(mostRecentlyInspectedElement, path), createIsPathAllowed(null, secondaryCategory), path)\n          };\n        } else {\n          // If this element has not been updated since it was last inspected, we don't need to return it.\n          // Instead we can just return the ID to indicate that it has not changed.\n          return {\n            id: id,\n            responseID: requestID,\n            type: 'no-change'\n          };\n        }\n      }\n    } else {\n      currentlyInspectedPaths = {};\n    }\n\n    hasElementUpdatedSinceLastInspected = false;\n\n    try {\n      mostRecentlyInspectedElement = inspectElementRaw(id);\n    } catch (error) {\n      // the error name is synced with ReactDebugHooks\n      if (error.name === 'ReactDebugToolsRenderError') {\n        var message = 'Error rendering inspected element.';\n        var stack; // Log error & cause for user to debug\n\n        console.error(message + '\\n\\n', error);\n\n        if (error.cause != null) {\n          var componentName = getDisplayNameForElementID(id);\n          console.error('React DevTools encountered an error while trying to inspect hooks. ' + 'This is most likely caused by an error in current inspected component' + (componentName != null ? \": \\\"\".concat(componentName, \"\\\".\") : '.') + '\\nThe error thrown in the component is: \\n\\n', error.cause);\n\n          if (error.cause instanceof Error) {\n            message = error.cause.message || message;\n            stack = error.cause.stack;\n          }\n        }\n\n        return {\n          type: 'error',\n          errorType: 'user',\n          id: id,\n          responseID: requestID,\n          message: message,\n          stack: stack\n        };\n      } // the error name is synced with ReactDebugHooks\n\n\n      if (error.name === 'ReactDebugToolsUnsupportedHookError') {\n        return {\n          type: 'error',\n          errorType: 'unknown-hook',\n          id: id,\n          responseID: requestID,\n          message: 'Unsupported hook in the react-debug-tools package: ' + error.message\n        };\n      } // Log Uncaught Error\n\n\n      console.error('Error inspecting element.\\n\\n', error);\n      return {\n        type: 'error',\n        errorType: 'uncaught',\n        id: id,\n        responseID: requestID,\n        message: error.message,\n        stack: error.stack\n      };\n    }\n\n    if (mostRecentlyInspectedElement === null) {\n      return {\n        id: id,\n        responseID: requestID,\n        type: 'not-found'\n      };\n    } // Any time an inspected element has an update,\n    // we should update the selected $r value as wel.\n    // Do this before dehydration (cleanForBridge).\n\n\n    updateSelectedElement(mostRecentlyInspectedElement); // Clone before cleaning so that we preserve the full data.\n    // This will enable us to send patches without re-inspecting if hydrated paths are requested.\n    // (Reducing how often we shallow-render is a better DX for function components that use hooks.)\n\n    var cleanedInspectedElement = _objectSpread({}, mostRecentlyInspectedElement); // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n    cleanedInspectedElement.context = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.cleanForBridge)(cleanedInspectedElement.context, createIsPathAllowed('context', null)); // $FlowFixMe[prop-missing] found when upgrading Flow\n\n    cleanedInspectedElement.hooks = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.cleanForBridge)(cleanedInspectedElement.hooks, createIsPathAllowed('hooks', 'hooks')); // $FlowFixMe[prop-missing] found when upgrading Flow\n\n    cleanedInspectedElement.props = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.cleanForBridge)(cleanedInspectedElement.props, createIsPathAllowed('props', null)); // $FlowFixMe[prop-missing] found when upgrading Flow\n\n    cleanedInspectedElement.state = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.cleanForBridge)(cleanedInspectedElement.state, createIsPathAllowed('state', null));\n    return {\n      id: id,\n      responseID: requestID,\n      type: 'full-data',\n      // $FlowFixMe[prop-missing] found when upgrading Flow\n      value: cleanedInspectedElement\n    };\n  }\n\n  function logElementToConsole(id) {\n    var result = isMostRecentlyInspectedElementCurrent(id) ? mostRecentlyInspectedElement : inspectElementRaw(id);\n\n    if (result === null) {\n      console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n      return;\n    }\n\n    var displayName = getDisplayNameForElementID(id);\n    var supportsGroup = typeof console.groupCollapsed === 'function';\n\n    if (supportsGroup) {\n      console.groupCollapsed(\"[Click to expand] %c<\".concat(displayName || 'Component', \" />\"), // --dom-tag-name-color is the CSS variable Chrome styles HTML elements with in the console.\n      'color: var(--dom-tag-name-color); font-weight: normal;');\n    }\n\n    if (result.props !== null) {\n      console.log('Props:', result.props);\n    }\n\n    if (result.state !== null) {\n      console.log('State:', result.state);\n    }\n\n    if (result.hooks !== null) {\n      console.log('Hooks:', result.hooks);\n    }\n\n    var hostInstances = findHostInstancesForElementID(id);\n\n    if (hostInstances !== null) {\n      console.log('Nodes:', hostInstances);\n    }\n\n    if (window.chrome || /firefox/i.test(navigator.userAgent)) {\n      console.log('Right-click any value to save it as a global variable for further inspection.');\n    }\n\n    if (supportsGroup) {\n      console.groupEnd();\n    }\n  }\n\n  function deletePath(type, id, hookID, path) {\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n      return;\n    }\n\n    if (devtoolsInstance.kind !== FIBER_INSTANCE) {\n      // TODO: Handle VirtualInstance.\n      return;\n    }\n\n    var fiber = devtoolsInstance.data;\n\n    if (fiber !== null) {\n      var instance = fiber.stateNode;\n\n      switch (type) {\n        case 'context':\n          // To simplify hydration and display of primitive context values (e.g. number, string)\n          // the inspectElement() method wraps context in a {value: ...} object.\n          // We need to remove the first part of the path (the \"value\") before continuing.\n          path = path.slice(1);\n\n          switch (fiber.tag) {\n            case ClassComponent:\n              if (path.length === 0) {// Simple context value (noop)\n              } else {\n                (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.deletePathInObject)(instance.context, path);\n              }\n\n              instance.forceUpdate();\n              break;\n\n            case FunctionComponent:\n              // Function components using legacy context are not editable\n              // because there's no instance on which to create a cloned, mutated context.\n              break;\n          }\n\n          break;\n\n        case 'hooks':\n          if (typeof overrideHookStateDeletePath === 'function') {\n            overrideHookStateDeletePath(fiber, hookID, path);\n          }\n\n          break;\n\n        case 'props':\n          if (instance === null) {\n            if (typeof overridePropsDeletePath === 'function') {\n              overridePropsDeletePath(fiber, path);\n            }\n          } else {\n            fiber.pendingProps = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.copyWithDelete)(instance.props, path);\n            instance.forceUpdate();\n          }\n\n          break;\n\n        case 'state':\n          (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.deletePathInObject)(instance.state, path);\n          instance.forceUpdate();\n          break;\n      }\n    }\n  }\n\n  function renamePath(type, id, hookID, oldPath, newPath) {\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n      return;\n    }\n\n    if (devtoolsInstance.kind !== FIBER_INSTANCE) {\n      // TODO: Handle VirtualInstance.\n      return;\n    }\n\n    var fiber = devtoolsInstance.data;\n\n    if (fiber !== null) {\n      var instance = fiber.stateNode;\n\n      switch (type) {\n        case 'context':\n          // To simplify hydration and display of primitive context values (e.g. number, string)\n          // the inspectElement() method wraps context in a {value: ...} object.\n          // We need to remove the first part of the path (the \"value\") before continuing.\n          oldPath = oldPath.slice(1);\n          newPath = newPath.slice(1);\n\n          switch (fiber.tag) {\n            case ClassComponent:\n              if (oldPath.length === 0) {// Simple context value (noop)\n              } else {\n                (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.renamePathInObject)(instance.context, oldPath, newPath);\n              }\n\n              instance.forceUpdate();\n              break;\n\n            case FunctionComponent:\n              // Function components using legacy context are not editable\n              // because there's no instance on which to create a cloned, mutated context.\n              break;\n          }\n\n          break;\n\n        case 'hooks':\n          if (typeof overrideHookStateRenamePath === 'function') {\n            overrideHookStateRenamePath(fiber, hookID, oldPath, newPath);\n          }\n\n          break;\n\n        case 'props':\n          if (instance === null) {\n            if (typeof overridePropsRenamePath === 'function') {\n              overridePropsRenamePath(fiber, oldPath, newPath);\n            }\n          } else {\n            fiber.pendingProps = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.copyWithRename)(instance.props, oldPath, newPath);\n            instance.forceUpdate();\n          }\n\n          break;\n\n        case 'state':\n          (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.renamePathInObject)(instance.state, oldPath, newPath);\n          instance.forceUpdate();\n          break;\n      }\n    }\n  }\n\n  function overrideValueAtPath(type, id, hookID, path, value) {\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      console.warn(\"Could not find DevToolsInstance with id \\\"\".concat(id, \"\\\"\"));\n      return;\n    }\n\n    if (devtoolsInstance.kind !== FIBER_INSTANCE) {\n      // TODO: Handle VirtualInstance.\n      return;\n    }\n\n    var fiber = devtoolsInstance.data;\n\n    if (fiber !== null) {\n      var instance = fiber.stateNode;\n\n      switch (type) {\n        case 'context':\n          // To simplify hydration and display of primitive context values (e.g. number, string)\n          // the inspectElement() method wraps context in a {value: ...} object.\n          // We need to remove the first part of the path (the \"value\") before continuing.\n          path = path.slice(1);\n\n          switch (fiber.tag) {\n            case ClassComponent:\n              if (path.length === 0) {\n                // Simple context value\n                instance.context = value;\n              } else {\n                (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.setInObject)(instance.context, path, value);\n              }\n\n              instance.forceUpdate();\n              break;\n\n            case FunctionComponent:\n              // Function components using legacy context are not editable\n              // because there's no instance on which to create a cloned, mutated context.\n              break;\n          }\n\n          break;\n\n        case 'hooks':\n          if (typeof overrideHookState === 'function') {\n            overrideHookState(fiber, hookID, path, value);\n          }\n\n          break;\n\n        case 'props':\n          switch (fiber.tag) {\n            case ClassComponent:\n              fiber.pendingProps = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.copyWithSet)(instance.props, path, value);\n              instance.forceUpdate();\n              break;\n\n            default:\n              if (typeof overrideProps === 'function') {\n                overrideProps(fiber, path, value);\n              }\n\n              break;\n          }\n\n          break;\n\n        case 'state':\n          switch (fiber.tag) {\n            case ClassComponent:\n              (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_1__.setInObject)(instance.state, path, value);\n              instance.forceUpdate();\n              break;\n          }\n\n          break;\n      }\n    }\n  }\n\n  var currentCommitProfilingMetadata = null;\n  var displayNamesByRootID = null;\n  var initialTreeBaseDurationsMap = null;\n  var isProfiling = false;\n  var profilingStartTime = 0;\n  var recordChangeDescriptions = false;\n  var recordTimeline = false;\n  var rootToCommitProfilingMetadataMap = null;\n\n  function getProfilingData() {\n    var dataForRoots = [];\n\n    if (rootToCommitProfilingMetadataMap === null) {\n      throw Error('getProfilingData() called before any profiling data was recorded');\n    }\n\n    rootToCommitProfilingMetadataMap.forEach(function (commitProfilingMetadata, rootID) {\n      var commitData = [];\n      var displayName = displayNamesByRootID !== null && displayNamesByRootID.get(rootID) || 'Unknown';\n      var initialTreeBaseDurations = initialTreeBaseDurationsMap !== null && initialTreeBaseDurationsMap.get(rootID) || [];\n      commitProfilingMetadata.forEach(function (commitProfilingData, commitIndex) {\n        var changeDescriptions = commitProfilingData.changeDescriptions,\n            durations = commitProfilingData.durations,\n            effectDuration = commitProfilingData.effectDuration,\n            maxActualDuration = commitProfilingData.maxActualDuration,\n            passiveEffectDuration = commitProfilingData.passiveEffectDuration,\n            priorityLevel = commitProfilingData.priorityLevel,\n            commitTime = commitProfilingData.commitTime,\n            updaters = commitProfilingData.updaters;\n        var fiberActualDurations = [];\n        var fiberSelfDurations = [];\n\n        for (var i = 0; i < durations.length; i += 3) {\n          var fiberID = durations[i];\n          fiberActualDurations.push([fiberID, (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.formatDurationToMicrosecondsGranularity)(durations[i + 1])]);\n          fiberSelfDurations.push([fiberID, (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.formatDurationToMicrosecondsGranularity)(durations[i + 2])]);\n        }\n\n        commitData.push({\n          changeDescriptions: changeDescriptions !== null ? Array.from(changeDescriptions.entries()) : null,\n          duration: (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.formatDurationToMicrosecondsGranularity)(maxActualDuration),\n          effectDuration: effectDuration !== null ? (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.formatDurationToMicrosecondsGranularity)(effectDuration) : null,\n          fiberActualDurations: fiberActualDurations,\n          fiberSelfDurations: fiberSelfDurations,\n          passiveEffectDuration: passiveEffectDuration !== null ? (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.formatDurationToMicrosecondsGranularity)(passiveEffectDuration) : null,\n          priorityLevel: priorityLevel,\n          timestamp: commitTime,\n          updaters: updaters\n        });\n      });\n      dataForRoots.push({\n        commitData: commitData,\n        displayName: displayName,\n        initialTreeBaseDurations: initialTreeBaseDurations,\n        rootID: rootID\n      });\n    });\n    var timelineData = null;\n\n    if (typeof getTimelineData === 'function') {\n      var currentTimelineData = getTimelineData();\n\n      if (currentTimelineData) {\n        var batchUIDToMeasuresMap = currentTimelineData.batchUIDToMeasuresMap,\n            internalModuleSourceToRanges = currentTimelineData.internalModuleSourceToRanges,\n            laneToLabelMap = currentTimelineData.laneToLabelMap,\n            laneToReactMeasureMap = currentTimelineData.laneToReactMeasureMap,\n            rest = _objectWithoutProperties(currentTimelineData, [\"batchUIDToMeasuresMap\", \"internalModuleSourceToRanges\", \"laneToLabelMap\", \"laneToReactMeasureMap\"]);\n\n        timelineData = _objectSpread(_objectSpread({}, rest), {}, {\n          // Most of the data is safe to parse as-is,\n          // but we need to convert the nested Arrays back to Maps.\n          // Most of the data is safe to serialize as-is,\n          // but we need to convert the Maps to nested Arrays.\n          batchUIDToMeasuresKeyValueArray: Array.from(batchUIDToMeasuresMap.entries()),\n          internalModuleSourceToRanges: Array.from(internalModuleSourceToRanges.entries()),\n          laneToLabelKeyValueArray: Array.from(laneToLabelMap.entries()),\n          laneToReactMeasureKeyValueArray: Array.from(laneToReactMeasureMap.entries())\n        });\n      }\n    }\n\n    return {\n      dataForRoots: dataForRoots,\n      rendererID: rendererID,\n      timelineData: timelineData\n    };\n  }\n\n  function snapshotTreeBaseDurations(instance, target) {\n    // We don't need to convert milliseconds to microseconds in this case,\n    // because the profiling summary is JSON serialized.\n    if (instance.kind !== FILTERED_FIBER_INSTANCE) {\n      target.push([instance.id, instance.treeBaseDuration]);\n    }\n\n    for (var child = instance.firstChild; child !== null; child = child.nextSibling) {\n      snapshotTreeBaseDurations(child, target);\n    }\n  }\n\n  function startProfiling(shouldRecordChangeDescriptions, shouldRecordTimeline) {\n    if (isProfiling) {\n      return;\n    }\n\n    recordChangeDescriptions = shouldRecordChangeDescriptions;\n    recordTimeline = shouldRecordTimeline; // Capture initial values as of the time profiling starts.\n    // It's important we snapshot both the durations and the id-to-root map,\n    // since either of these may change during the profiling session\n    // (e.g. when a fiber is re-rendered or when a fiber gets removed).\n\n    displayNamesByRootID = new Map();\n    initialTreeBaseDurationsMap = new Map();\n    hook.getFiberRoots(rendererID).forEach(function (root) {\n      var rootInstance = rootToFiberInstanceMap.get(root);\n\n      if (rootInstance === undefined) {\n        throw new Error('Expected the root instance to already exist when starting profiling');\n      }\n\n      var rootID = rootInstance.id;\n      displayNamesByRootID.set(rootID, getDisplayNameForRoot(root.current));\n      var initialTreeBaseDurations = [];\n      snapshotTreeBaseDurations(rootInstance, initialTreeBaseDurations);\n      initialTreeBaseDurationsMap.set(rootID, initialTreeBaseDurations);\n    });\n    isProfiling = true;\n    profilingStartTime = getCurrentTime();\n    rootToCommitProfilingMetadataMap = new Map();\n\n    if (toggleProfilingStatus !== null) {\n      toggleProfilingStatus(true, recordTimeline);\n    }\n  }\n\n  function stopProfiling() {\n    isProfiling = false;\n    recordChangeDescriptions = false;\n\n    if (toggleProfilingStatus !== null) {\n      toggleProfilingStatus(false, recordTimeline);\n    }\n\n    recordTimeline = false;\n  } // Automatically start profiling so that we don't miss timing info from initial \"mount\".\n\n\n  if (shouldStartProfilingNow) {\n    startProfiling(profilingSettings.recordChangeDescriptions, profilingSettings.recordTimeline);\n  }\n\n  function getNearestFiber(devtoolsInstance) {\n    if (devtoolsInstance.kind === VIRTUAL_INSTANCE) {\n      var inst = devtoolsInstance;\n\n      while (inst.kind === VIRTUAL_INSTANCE) {\n        // For virtual instances, we search deeper until we find a Fiber instance.\n        // Then we search upwards from that Fiber. That's because Virtual Instances\n        // will always have an Fiber child filtered or not. If we searched its parents\n        // we might skip through a filtered Error Boundary before we hit a FiberInstance.\n        if (inst.firstChild === null) {\n          return null;\n        }\n\n        inst = inst.firstChild;\n      }\n\n      return inst.data.return;\n    } else {\n      return devtoolsInstance.data;\n    }\n  } // React will switch between these implementations depending on whether\n  // we have any manually suspended/errored-out Fibers or not.\n\n\n  function shouldErrorFiberAlwaysNull() {\n    return null;\n  } // Map of Fiber and its force error status: true (error), false (toggled off)\n\n\n  var forceErrorForFibers = new Map();\n\n  function shouldErrorFiberAccordingToMap(fiber) {\n    if (typeof setErrorHandler !== 'function') {\n      throw new Error('Expected overrideError() to not get called for earlier React versions.');\n    }\n\n    var status = forceErrorForFibers.get(fiber);\n\n    if (status === false) {\n      // TRICKY overrideError adds entries to this Map,\n      // so ideally it would be the method that clears them too,\n      // but that would break the functionality of the feature,\n      // since DevTools needs to tell React to act differently than it normally would\n      // (don't just re-render the failed boundary, but reset its errored state too).\n      // So we can only clear it after telling React to reset the state.\n      // Technically this is premature and we should schedule it for later,\n      // since the render could always fail without committing the updated error boundary,\n      // but since this is a DEV-only feature, the simplicity is worth the trade off.\n      forceErrorForFibers.delete(fiber);\n\n      if (forceErrorForFibers.size === 0) {\n        // Last override is gone. Switch React back to fast path.\n        setErrorHandler(shouldErrorFiberAlwaysNull);\n      }\n\n      return false;\n    }\n\n    if (status === undefined && fiber.alternate !== null) {\n      status = forceErrorForFibers.get(fiber.alternate);\n\n      if (status === false) {\n        forceErrorForFibers.delete(fiber.alternate);\n\n        if (forceErrorForFibers.size === 0) {\n          // Last override is gone. Switch React back to fast path.\n          setErrorHandler(shouldErrorFiberAlwaysNull);\n        }\n      }\n    }\n\n    if (status === undefined) {\n      return false;\n    }\n\n    return status;\n  }\n\n  function overrideError(id, forceError) {\n    if (typeof setErrorHandler !== 'function' || typeof scheduleUpdate !== 'function') {\n      throw new Error('Expected overrideError() to not get called for earlier React versions.');\n    }\n\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      return;\n    }\n\n    var nearestFiber = getNearestFiber(devtoolsInstance);\n\n    if (nearestFiber === null) {\n      return;\n    }\n\n    var fiber = nearestFiber;\n\n    while (!isErrorBoundary(fiber)) {\n      if (fiber.return === null) {\n        return;\n      }\n\n      fiber = fiber.return;\n    }\n\n    forceErrorForFibers.set(fiber, forceError);\n\n    if (fiber.alternate !== null) {\n      // We only need one of the Fibers in the set.\n      forceErrorForFibers.delete(fiber.alternate);\n    }\n\n    if (forceErrorForFibers.size === 1) {\n      // First override is added. Switch React to slower path.\n      setErrorHandler(shouldErrorFiberAccordingToMap);\n    }\n\n    scheduleUpdate(fiber);\n  }\n\n  function shouldSuspendFiberAlwaysFalse() {\n    return false;\n  }\n\n  var forceFallbackForFibers = new Set();\n\n  function shouldSuspendFiberAccordingToSet(fiber) {\n    return forceFallbackForFibers.has(fiber) || fiber.alternate !== null && forceFallbackForFibers.has(fiber.alternate);\n  }\n\n  function overrideSuspense(id, forceFallback) {\n    if (typeof setSuspenseHandler !== 'function' || typeof scheduleUpdate !== 'function') {\n      throw new Error('Expected overrideSuspense() to not get called for earlier React versions.');\n    }\n\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      return;\n    }\n\n    var nearestFiber = getNearestFiber(devtoolsInstance);\n\n    if (nearestFiber === null) {\n      return;\n    }\n\n    var fiber = nearestFiber;\n\n    while (fiber.tag !== SuspenseComponent) {\n      if (fiber.return === null) {\n        return;\n      }\n\n      fiber = fiber.return;\n    }\n\n    if (fiber.alternate !== null) {\n      // We only need one of the Fibers in the set.\n      forceFallbackForFibers.delete(fiber.alternate);\n    }\n\n    if (forceFallback) {\n      forceFallbackForFibers.add(fiber);\n\n      if (forceFallbackForFibers.size === 1) {\n        // First override is added. Switch React to slower path.\n        setSuspenseHandler(shouldSuspendFiberAccordingToSet);\n      }\n    } else {\n      forceFallbackForFibers.delete(fiber);\n\n      if (forceFallbackForFibers.size === 0) {\n        // Last override is gone. Switch React back to fast path.\n        setSuspenseHandler(shouldSuspendFiberAlwaysFalse);\n      }\n    }\n\n    scheduleUpdate(fiber);\n  } // Remember if we're trying to restore the selection after reload.\n  // In that case, we'll do some extra checks for matching mounts.\n\n\n  var trackedPath = null;\n  var trackedPathMatchFiber = null; // This is the deepest unfiltered match of a Fiber.\n\n  var trackedPathMatchInstance = null; // This is the deepest matched filtered Instance.\n\n  var trackedPathMatchDepth = -1;\n  var mightBeOnTrackedPath = false;\n\n  function setTrackedPath(path) {\n    if (path === null) {\n      trackedPathMatchFiber = null;\n      trackedPathMatchInstance = null;\n      trackedPathMatchDepth = -1;\n      mightBeOnTrackedPath = false;\n    }\n\n    trackedPath = path;\n  } // We call this before traversing a new mount.\n  // It remembers whether this Fiber is the next best match for tracked path.\n  // The return value signals whether we should keep matching siblings or not.\n\n\n  function updateTrackedPathStateBeforeMount(fiber, fiberInstance) {\n    if (trackedPath === null || !mightBeOnTrackedPath) {\n      // Fast path: there's nothing to track so do nothing and ignore siblings.\n      return false;\n    }\n\n    var returnFiber = fiber.return;\n    var returnAlternate = returnFiber !== null ? returnFiber.alternate : null; // By now we know there's some selection to restore, and this is a new Fiber.\n    // Is this newly mounted Fiber a direct child of the current best match?\n    // (This will also be true for new roots if we haven't matched anything yet.)\n\n    if (trackedPathMatchFiber === returnFiber || trackedPathMatchFiber === returnAlternate && returnAlternate !== null) {\n      // Is this the next Fiber we should select? Let's compare the frames.\n      var actualFrame = getPathFrame(fiber); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      var expectedFrame = trackedPath[trackedPathMatchDepth + 1];\n\n      if (expectedFrame === undefined) {\n        throw new Error('Expected to see a frame at the next depth.');\n      }\n\n      if (actualFrame.index === expectedFrame.index && actualFrame.key === expectedFrame.key && actualFrame.displayName === expectedFrame.displayName) {\n        // We have our next match.\n        trackedPathMatchFiber = fiber;\n\n        if (fiberInstance !== null && fiberInstance.kind === FIBER_INSTANCE) {\n          trackedPathMatchInstance = fiberInstance;\n        }\n\n        trackedPathMatchDepth++; // Are we out of frames to match?\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        if (trackedPathMatchDepth === trackedPath.length - 1) {\n          // There's nothing that can possibly match afterwards.\n          // Don't check the children.\n          mightBeOnTrackedPath = false;\n        } else {\n          // Check the children, as they might reveal the next match.\n          mightBeOnTrackedPath = true;\n        } // In either case, since we have a match, we don't need\n        // to check the siblings. They'll never match.\n\n\n        return false;\n      }\n    }\n\n    if (trackedPathMatchFiber === null && fiberInstance === null) {\n      // We're now looking for a Virtual Instance. It might be inside filtered Fibers\n      // so we keep looking below.\n      return true;\n    } // This Fiber's parent is on the path, but this Fiber itself isn't.\n    // There's no need to check its children--they won't be on the path either.\n\n\n    mightBeOnTrackedPath = false; // However, one of its siblings may be on the path so keep searching.\n\n    return true;\n  }\n\n  function updateVirtualTrackedPathStateBeforeMount(virtualInstance, parentInstance) {\n    if (trackedPath === null || !mightBeOnTrackedPath) {\n      // Fast path: there's nothing to track so do nothing and ignore siblings.\n      return false;\n    } // Check if we've matched our nearest unfiltered parent so far.\n\n\n    if (trackedPathMatchInstance === parentInstance) {\n      var actualFrame = getVirtualPathFrame(virtualInstance); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      var expectedFrame = trackedPath[trackedPathMatchDepth + 1];\n\n      if (expectedFrame === undefined) {\n        throw new Error('Expected to see a frame at the next depth.');\n      }\n\n      if (actualFrame.index === expectedFrame.index && actualFrame.key === expectedFrame.key && actualFrame.displayName === expectedFrame.displayName) {\n        // We have our next match.\n        trackedPathMatchFiber = null; // Don't bother looking in Fibers anymore. We're deeper now.\n\n        trackedPathMatchInstance = virtualInstance;\n        trackedPathMatchDepth++; // Are we out of frames to match?\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        if (trackedPathMatchDepth === trackedPath.length - 1) {\n          // There's nothing that can possibly match afterwards.\n          // Don't check the children.\n          mightBeOnTrackedPath = false;\n        } else {\n          // Check the children, as they might reveal the next match.\n          mightBeOnTrackedPath = true;\n        } // In either case, since we have a match, we don't need\n        // to check the siblings. They'll never match.\n\n\n        return false;\n      }\n    }\n\n    if (trackedPathMatchFiber !== null) {\n      // We're still looking for a Fiber which might be underneath this instance.\n      return true;\n    } // This Instance's parent is on the path, but this Instance itself isn't.\n    // There's no need to check its children--they won't be on the path either.\n\n\n    mightBeOnTrackedPath = false; // However, one of its siblings may be on the path so keep searching.\n\n    return true;\n  }\n\n  function updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath) {\n    // updateTrackedPathStateBeforeMount() told us whether to match siblings.\n    // Now that we're entering siblings, let's use that information.\n    mightBeOnTrackedPath = mightSiblingsBeOnTrackedPath;\n  } // Roots don't have a real persistent identity.\n  // A root's \"pseudo key\" is \"childDisplayName:indexWithThatName\".\n  // For example, \"App:0\" or, in case of similar roots, \"Story:0\", \"Story:1\", etc.\n  // We will use this to try to disambiguate roots when restoring selection between reloads.\n\n\n  var rootPseudoKeys = new Map();\n  var rootDisplayNameCounter = new Map();\n\n  function setRootPseudoKey(id, fiber) {\n    var name = getDisplayNameForRoot(fiber);\n    var counter = rootDisplayNameCounter.get(name) || 0;\n    rootDisplayNameCounter.set(name, counter + 1);\n    var pseudoKey = \"\".concat(name, \":\").concat(counter);\n    rootPseudoKeys.set(id, pseudoKey);\n  }\n\n  function removeRootPseudoKey(id) {\n    var pseudoKey = rootPseudoKeys.get(id);\n\n    if (pseudoKey === undefined) {\n      throw new Error('Expected root pseudo key to be known.');\n    }\n\n    var name = pseudoKey.slice(0, pseudoKey.lastIndexOf(':'));\n    var counter = rootDisplayNameCounter.get(name);\n\n    if (counter === undefined) {\n      throw new Error('Expected counter to be known.');\n    }\n\n    if (counter > 1) {\n      rootDisplayNameCounter.set(name, counter - 1);\n    } else {\n      rootDisplayNameCounter.delete(name);\n    }\n\n    rootPseudoKeys.delete(id);\n  }\n\n  function getDisplayNameForRoot(fiber) {\n    var preferredDisplayName = null;\n    var fallbackDisplayName = null;\n    var child = fiber.child; // Go at most three levels deep into direct children\n    // while searching for a child that has a displayName.\n\n    for (var i = 0; i < 3; i++) {\n      if (child === null) {\n        break;\n      }\n\n      var displayName = getDisplayNameForFiber(child);\n\n      if (displayName !== null) {\n        // Prefer display names that we get from user-defined components.\n        // We want to avoid using e.g. 'Suspense' unless we find nothing else.\n        if (typeof child.type === 'function') {\n          // There's a few user-defined tags, but we'll prefer the ones\n          // that are usually explicitly named (function or class components).\n          preferredDisplayName = displayName;\n        } else if (fallbackDisplayName === null) {\n          fallbackDisplayName = displayName;\n        }\n      }\n\n      if (preferredDisplayName !== null) {\n        break;\n      }\n\n      child = child.child;\n    }\n\n    return preferredDisplayName || fallbackDisplayName || 'Anonymous';\n  }\n\n  function getPathFrame(fiber) {\n    var key = fiber.key;\n    var displayName = getDisplayNameForFiber(fiber);\n    var index = fiber.index;\n\n    switch (fiber.tag) {\n      case HostRoot:\n        // Roots don't have a real displayName, index, or key.\n        // Instead, we'll use the pseudo key (childDisplayName:indexWithThatName).\n        var rootInstance = rootToFiberInstanceMap.get(fiber.stateNode);\n\n        if (rootInstance === undefined) {\n          throw new Error('Expected the root instance to exist when computing a path');\n        }\n\n        var pseudoKey = rootPseudoKeys.get(rootInstance.id);\n\n        if (pseudoKey === undefined) {\n          throw new Error('Expected mounted root to have known pseudo key.');\n        }\n\n        displayName = pseudoKey;\n        break;\n\n      case HostComponent:\n        displayName = fiber.type;\n        break;\n\n      default:\n        break;\n    }\n\n    return {\n      displayName: displayName,\n      key: key,\n      index: index\n    };\n  }\n\n  function getVirtualPathFrame(virtualInstance) {\n    return {\n      displayName: virtualInstance.data.name || '',\n      key: virtualInstance.data.key == null ? null : virtualInstance.data.key,\n      index: -1 // We use -1 to indicate that this is a virtual path frame.\n\n    };\n  } // Produces a serializable representation that does a best effort\n  // of identifying a particular Fiber between page reloads.\n  // The return path will contain Fibers that are \"invisible\" to the store\n  // because their keys and indexes are important to restoring the selection.\n\n\n  function getPathForElement(id) {\n    var devtoolsInstance = idToDevToolsInstanceMap.get(id);\n\n    if (devtoolsInstance === undefined) {\n      return null;\n    }\n\n    var keyPath = [];\n    var inst = devtoolsInstance;\n\n    while (inst.kind === VIRTUAL_INSTANCE) {\n      keyPath.push(getVirtualPathFrame(inst));\n\n      if (inst.parent === null) {\n        // This is a bug but non-essential. We should've found a root instance.\n        return null;\n      }\n\n      inst = inst.parent;\n    }\n\n    var fiber = inst.data;\n\n    while (fiber !== null) {\n      // $FlowFixMe[incompatible-call] found when upgrading Flow\n      keyPath.push(getPathFrame(fiber)); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      fiber = fiber.return;\n    }\n\n    keyPath.reverse();\n    return keyPath;\n  }\n\n  function getBestMatchForTrackedPath() {\n    if (trackedPath === null) {\n      // Nothing to match.\n      return null;\n    }\n\n    if (trackedPathMatchInstance === null) {\n      // We didn't find anything.\n      return null;\n    }\n\n    return {\n      id: trackedPathMatchInstance.id,\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      isFullMatch: trackedPathMatchDepth === trackedPath.length - 1\n    };\n  }\n\n  var formatPriorityLevel = function formatPriorityLevel(priorityLevel) {\n    if (priorityLevel == null) {\n      return 'Unknown';\n    }\n\n    switch (priorityLevel) {\n      case ImmediatePriority:\n        return 'Immediate';\n\n      case UserBlockingPriority:\n        return 'User-Blocking';\n\n      case NormalPriority:\n        return 'Normal';\n\n      case LowPriority:\n        return 'Low';\n\n      case IdlePriority:\n        return 'Idle';\n\n      case NoPriority:\n      default:\n        return 'Unknown';\n    }\n  };\n\n  function setTraceUpdatesEnabled(isEnabled) {\n    traceUpdatesEnabled = isEnabled;\n  }\n\n  function hasElementWithId(id) {\n    return idToDevToolsInstanceMap.has(id);\n  }\n\n  function getSourceForFiberInstance(fiberInstance) {\n    var unresolvedSource = fiberInstance.source;\n\n    if (unresolvedSource !== null && _typeof(unresolvedSource) === 'object' && !isError(unresolvedSource)) {\n      // $FlowFixMe: isError should have refined it.\n      return unresolvedSource;\n    }\n\n    var dispatcherRef = getDispatcherRef(renderer);\n    var stackFrame = dispatcherRef == null ? null : (0,_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_10__.getSourceLocationByFiber)(ReactTypeOfWork, fiberInstance.data, dispatcherRef);\n\n    if (stackFrame === null) {\n      // If we don't find a source location by throwing, try to get one\n      // from an owned child if possible. This is the same branch as\n      // for virtual instances.\n      return getSourceForInstance(fiberInstance);\n    }\n\n    var source = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.parseSourceFromComponentStack)(stackFrame);\n    fiberInstance.source = source;\n    return source;\n  }\n\n  function getSourceForInstance(instance) {\n    var unresolvedSource = instance.source;\n\n    if (unresolvedSource === null) {\n      // We don't have any source yet. We can try again later in case an owned child mounts later.\n      // TODO: We won't have any information here if the child is filtered.\n      return null;\n    } // If we have the debug stack (the creation stack of the JSX) for any owned child of this\n    // component, then at the bottom of that stack will be a stack frame that is somewhere within\n    // the component's function body. Typically it would be the callsite of the JSX unless there's\n    // any intermediate utility functions. This won't point to the top of the component function\n    // but it's at least somewhere within it.\n\n\n    if (isError(unresolvedSource)) {\n      unresolvedSource = (0,_shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_13__.formatOwnerStack)(unresolvedSource);\n    }\n\n    if (typeof unresolvedSource === 'string') {\n      var idx = unresolvedSource.lastIndexOf('\\n');\n      var lastLine = idx === -1 ? unresolvedSource : unresolvedSource.slice(idx + 1);\n      return instance.source = (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_2__.parseSourceFromComponentStack)(lastLine);\n    } // $FlowFixMe: refined.\n\n\n    return unresolvedSource;\n  }\n\n  return {\n    cleanup: cleanup,\n    clearErrorsAndWarnings: clearErrorsAndWarnings,\n    clearErrorsForElementID: clearErrorsForElementID,\n    clearWarningsForElementID: clearWarningsForElementID,\n    getSerializedElementValueByPath: getSerializedElementValueByPath,\n    deletePath: deletePath,\n    findHostInstancesForElementID: findHostInstancesForElementID,\n    flushInitialOperations: flushInitialOperations,\n    getBestMatchForTrackedPath: getBestMatchForTrackedPath,\n    getDisplayNameForElementID: getDisplayNameForElementID,\n    getNearestMountedDOMNode: getNearestMountedDOMNode,\n    getElementIDForHostInstance: getElementIDForHostInstance,\n    getInstanceAndStyle: getInstanceAndStyle,\n    getOwnersList: getOwnersList,\n    getPathForElement: getPathForElement,\n    getProfilingData: getProfilingData,\n    handleCommitFiberRoot: handleCommitFiberRoot,\n    handleCommitFiberUnmount: handleCommitFiberUnmount,\n    handlePostCommitFiberRoot: handlePostCommitFiberRoot,\n    hasElementWithId: hasElementWithId,\n    inspectElement: inspectElement,\n    logElementToConsole: logElementToConsole,\n    getComponentStack: getComponentStack,\n    getElementAttributeByPath: getElementAttributeByPath,\n    getElementSourceFunctionById: getElementSourceFunctionById,\n    onErrorOrWarning: onErrorOrWarning,\n    overrideError: overrideError,\n    overrideSuspense: overrideSuspense,\n    overrideValueAtPath: overrideValueAtPath,\n    renamePath: renamePath,\n    renderer: renderer,\n    setTraceUpdatesEnabled: setTraceUpdatesEnabled,\n    setTrackedPath: setTrackedPath,\n    startProfiling: startProfiling,\n    stopProfiling: stopProfiling,\n    storeAsGlobal: storeAsGlobal,\n    updateComponentFilters: updateComponentFilters,\n    getEnvironmentNames: getEnvironmentNames\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/fiber/renderer.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/flight/DevToolsComponentInfoStack.js":
/*!*********************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/flight/DevToolsComponentInfoStack.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getOwnerStackByComponentInfoInDev\": () => (/* binding */ getOwnerStackByComponentInfoInDev)\n/* harmony export */ });\n/* harmony import */ var _shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/DevToolsComponentStackFrame */ \"../react-devtools-shared/src/backend/shared/DevToolsComponentStackFrame.js\");\n/* harmony import */ var _shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/DevToolsOwnerStack */ \"../react-devtools-shared/src/backend/shared/DevToolsOwnerStack.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This is a DevTools fork of ReactComponentInfoStack.\n// This fork enables DevTools to use the same \"native\" component stack format,\n// while still maintaining support for multiple renderer versions\n// (which use different values for ReactTypeOfWork).\n\n\nfunction getOwnerStackByComponentInfoInDev(componentInfo) {\n  try {\n    var info = ''; // The owner stack of the current component will be where it was created, i.e. inside its owner.\n    // There's no actual name of the currently executing component. Instead, that is available\n    // on the regular stack that's currently executing. However, if there is no owner at all, then\n    // there's no stack frame so we add the name of the root component to the stack to know which\n    // component is currently executing.\n\n    if (!componentInfo.owner && typeof componentInfo.name === 'string') {\n      return (0,_shared_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__.describeBuiltInComponentFrame)(componentInfo.name);\n    }\n\n    var owner = componentInfo;\n\n    while (owner) {\n      var ownerStack = owner.debugStack;\n\n      if (ownerStack != null) {\n        // Server Component\n        owner = owner.owner;\n\n        if (owner) {\n          // TODO: Should we stash this somewhere for caching purposes?\n          info += '\\n' + (0,_shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_1__.formatOwnerStack)(ownerStack);\n        }\n      } else {\n        break;\n      }\n    }\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL2ZsaWdodC9EZXZUb29sc0NvbXBvbmVudEluZm9TdGFjay5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFFQTtBQUdBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vUmVhY3REZXZUb29sc0JhY2tlbmQvLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL2ZsaWdodC9EZXZUb29sc0NvbXBvbmVudEluZm9TdGFjay5qcz9kNmM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8vIFRoaXMgaXMgYSBEZXZUb29scyBmb3JrIG9mIFJlYWN0Q29tcG9uZW50SW5mb1N0YWNrLlxuLy8gVGhpcyBmb3JrIGVuYWJsZXMgRGV2VG9vbHMgdG8gdXNlIHRoZSBzYW1lIFwibmF0aXZlXCIgY29tcG9uZW50IHN0YWNrIGZvcm1hdCxcbi8vIHdoaWxlIHN0aWxsIG1haW50YWluaW5nIHN1cHBvcnQgZm9yIG11bHRpcGxlIHJlbmRlcmVyIHZlcnNpb25zXG4vLyAod2hpY2ggdXNlIGRpZmZlcmVudCB2YWx1ZXMgZm9yIFJlYWN0VHlwZU9mV29yaykuXG5cbmltcG9ydCB0eXBlIHtSZWFjdENvbXBvbmVudEluZm99IGZyb20gJ3NoYXJlZC9SZWFjdFR5cGVzJztcblxuaW1wb3J0IHtkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZX0gZnJvbSAnLi4vc2hhcmVkL0RldlRvb2xzQ29tcG9uZW50U3RhY2tGcmFtZSc7XG5cbmltcG9ydCB7Zm9ybWF0T3duZXJTdGFja30gZnJvbSAnLi4vc2hhcmVkL0RldlRvb2xzT3duZXJTdGFjayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPd25lclN0YWNrQnlDb21wb25lbnRJbmZvSW5EZXYoXG4gIGNvbXBvbmVudEluZm86IFJlYWN0Q29tcG9uZW50SW5mbyxcbik6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgbGV0IGluZm8gPSAnJztcblxuICAgIC8vIFRoZSBvd25lciBzdGFjayBvZiB0aGUgY3VycmVudCBjb21wb25lbnQgd2lsbCBiZSB3aGVyZSBpdCB3YXMgY3JlYXRlZCwgaS5lLiBpbnNpZGUgaXRzIG93bmVyLlxuICAgIC8vIFRoZXJlJ3Mgbm8gYWN0dWFsIG5hbWUgb2YgdGhlIGN1cnJlbnRseSBleGVjdXRpbmcgY29tcG9uZW50LiBJbnN0ZWFkLCB0aGF0IGlzIGF2YWlsYWJsZVxuICAgIC8vIG9uIHRoZSByZWd1bGFyIHN0YWNrIHRoYXQncyBjdXJyZW50bHkgZXhlY3V0aW5nLiBIb3dldmVyLCBpZiB0aGVyZSBpcyBubyBvd25lciBhdCBhbGwsIHRoZW5cbiAgICAvLyB0aGVyZSdzIG5vIHN0YWNrIGZyYW1lIHNvIHdlIGFkZCB0aGUgbmFtZSBvZiB0aGUgcm9vdCBjb21wb25lbnQgdG8gdGhlIHN0YWNrIHRvIGtub3cgd2hpY2hcbiAgICAvLyBjb21wb25lbnQgaXMgY3VycmVudGx5IGV4ZWN1dGluZy5cbiAgICBpZiAoIWNvbXBvbmVudEluZm8ub3duZXIgJiYgdHlwZW9mIGNvbXBvbmVudEluZm8ubmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShjb21wb25lbnRJbmZvLm5hbWUpO1xuICAgIH1cblxuICAgIGxldCBvd25lcjogdm9pZCB8IG51bGwgfCBSZWFjdENvbXBvbmVudEluZm8gPSBjb21wb25lbnRJbmZvO1xuXG4gICAgd2hpbGUgKG93bmVyKSB7XG4gICAgICBjb25zdCBvd25lclN0YWNrOiA/RXJyb3IgPSBvd25lci5kZWJ1Z1N0YWNrO1xuICAgICAgaWYgKG93bmVyU3RhY2sgIT0gbnVsbCkge1xuICAgICAgICAvLyBTZXJ2ZXIgQ29tcG9uZW50XG4gICAgICAgIG93bmVyID0gb3duZXIub3duZXI7XG4gICAgICAgIGlmIChvd25lcikge1xuICAgICAgICAgIC8vIFRPRE86IFNob3VsZCB3ZSBzdGFzaCB0aGlzIHNvbWV3aGVyZSBmb3IgY2FjaGluZyBwdXJwb3Nlcz9cbiAgICAgICAgICBpbmZvICs9ICdcXG4nICsgZm9ybWF0T3duZXJTdGFjayhvd25lclN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmZvO1xuICB9IGNhdGNoICh4KSB7XG4gICAgcmV0dXJuICdcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiAnICsgeC5tZXNzYWdlICsgJ1xcbicgKyB4LnN0YWNrO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/flight/DevToolsComponentInfoStack.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/flight/renderer.js":
/*!***************************************************************!*\
  !*** ../react-devtools-shared/src/backend/flight/renderer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"attach\": () => (/* binding */ attach)\n/* harmony export */ });\n/* harmony import */ var _DevToolsComponentInfoStack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DevToolsComponentInfoStack */ \"../react-devtools-shared/src/backend/flight/DevToolsComponentInfoStack.js\");\n/* harmony import */ var _shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/DevToolsOwnerStack */ \"../react-devtools-shared/src/backend/shared/DevToolsOwnerStack.js\");\n/* harmony import */ var _shared_DevToolsServerComponentLogs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/DevToolsServerComponentLogs */ \"../react-devtools-shared/src/backend/shared/DevToolsServerComponentLogs.js\");\n/* harmony import */ var react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-devtools-shared/src/backend/utils */ \"../react-devtools-shared/src/backend/utils/index.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\n\nfunction supportsConsoleTasks(componentInfo) {\n  // If this ReactComponentInfo supports native console.createTask then we are already running\n  // inside a native async stack trace if it's active - meaning the DevTools is open.\n  // Ideally we'd detect if this task was created while the DevTools was open or not.\n  return !!componentInfo.debugTask;\n}\n\nfunction attach(hook, rendererID, renderer, global) {\n  var getCurrentComponentInfo = renderer.getCurrentComponentInfo;\n\n  function getComponentStack(topFrame) {\n    if (getCurrentComponentInfo === undefined) {\n      // Expected this to be part of the renderer. Ignore.\n      return null;\n    }\n\n    var current = getCurrentComponentInfo();\n\n    if (current === null) {\n      // Outside of our render scope.\n      return null;\n    }\n\n    if (supportsConsoleTasks(current)) {\n      // This will be handled natively by console.createTask. No need for\n      // DevTools to add it.\n      return null;\n    }\n\n    var enableOwnerStacks = current.debugStack != null;\n    var componentStack = '';\n\n    if (enableOwnerStacks) {\n      // Prefix the owner stack with the current stack. I.e. what called\n      // console.error. While this will also be part of the native stack,\n      // it is hidden and not presented alongside this argument so we print\n      // them all together.\n      var topStackFrames = (0,_shared_DevToolsOwnerStack__WEBPACK_IMPORTED_MODULE_1__.formatOwnerStack)(topFrame);\n\n      if (topStackFrames) {\n        componentStack += '\\n' + topStackFrames;\n      }\n\n      componentStack += (0,_DevToolsComponentInfoStack__WEBPACK_IMPORTED_MODULE_0__.getOwnerStackByComponentInfoInDev)(current);\n    }\n\n    return {\n      enableOwnerStacks: enableOwnerStacks,\n      componentStack: componentStack\n    };\n  } // Called when an error or warning is logged during render, commit, or passive (including unmount functions).\n\n\n  function onErrorOrWarning(type, args) {\n    if (getCurrentComponentInfo === undefined) {\n      // Expected this to be part of the renderer. Ignore.\n      return;\n    }\n\n    var componentInfo = getCurrentComponentInfo();\n\n    if (componentInfo === null) {\n      // Outside of our render scope.\n      return;\n    }\n\n    if (args.length > 3 && typeof args[0] === 'string' && args[0].startsWith('%c%s%c ') && typeof args[1] === 'string' && typeof args[2] === 'string' && typeof args[3] === 'string') {\n      // This looks like the badge we prefixed to the log. Our UI doesn't support formatted logs.\n      // We remove the formatting. If the environment of the log is the same as the environment of\n      // the component (the common case) we remove the badge completely otherwise leave it plain\n      var format = args[0].slice(7);\n      var env = args[2].trim();\n      args = args.slice(4);\n\n      if (env !== componentInfo.env) {\n        args.unshift('[' + env + '] ' + format);\n      } else {\n        args.unshift(format);\n      }\n    } // We can't really use this message as a unique key, since we can't distinguish\n    // different objects in this implementation. We have to delegate displaying of the objects\n    // to the environment, the browser console, for example, so this is why this should be kept\n    // as an array of arguments, instead of the plain string.\n    // [Warning: %o, {...}] and [Warning: %o, {...}] will be considered as the same message,\n    // even if objects are different\n\n\n    var message = react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_3__.formatConsoleArgumentsToSingleString.apply(void 0, _toConsumableArray(args)); // Track the warning/error for later.\n\n    var componentLogsEntry = _shared_DevToolsServerComponentLogs__WEBPACK_IMPORTED_MODULE_2__.componentInfoToComponentLogsMap.get(componentInfo);\n\n    if (componentLogsEntry === undefined) {\n      componentLogsEntry = {\n        errors: new Map(),\n        errorsCount: 0,\n        warnings: new Map(),\n        warningsCount: 0\n      };\n      _shared_DevToolsServerComponentLogs__WEBPACK_IMPORTED_MODULE_2__.componentInfoToComponentLogsMap.set(componentInfo, componentLogsEntry);\n    }\n\n    var messageMap = type === 'error' ? componentLogsEntry.errors : componentLogsEntry.warnings;\n    var count = messageMap.get(message) || 0;\n    messageMap.set(message, count + 1);\n\n    if (type === 'error') {\n      componentLogsEntry.errorsCount++;\n    } else {\n      componentLogsEntry.warningsCount++;\n    } // The changes will be flushed later when we commit this tree to Fiber.\n\n  }\n\n  return {\n    cleanup: function cleanup() {},\n    clearErrorsAndWarnings: function clearErrorsAndWarnings() {},\n    clearErrorsForElementID: function clearErrorsForElementID() {},\n    clearWarningsForElementID: function clearWarningsForElementID() {},\n    getSerializedElementValueByPath: function getSerializedElementValueByPath() {},\n    deletePath: function deletePath() {},\n    findHostInstancesForElementID: function findHostInstancesForElementID() {\n      return null;\n    },\n    flushInitialOperations: function flushInitialOperations() {},\n    getBestMatchForTrackedPath: function getBestMatchForTrackedPath() {\n      return null;\n    },\n    getComponentStack: getComponentStack,\n    getDisplayNameForElementID: function getDisplayNameForElementID() {\n      return null;\n    },\n    getNearestMountedDOMNode: function getNearestMountedDOMNode() {\n      return null;\n    },\n    getElementIDForHostInstance: function getElementIDForHostInstance() {\n      return null;\n    },\n    getInstanceAndStyle: function getInstanceAndStyle() {\n      return {\n        instance: null,\n        style: null\n      };\n    },\n    getOwnersList: function getOwnersList() {\n      return null;\n    },\n    getPathForElement: function getPathForElement() {\n      return null;\n    },\n    getProfilingData: function getProfilingData() {\n      throw new Error('getProfilingData not supported by this renderer');\n    },\n    handleCommitFiberRoot: function handleCommitFiberRoot() {},\n    handleCommitFiberUnmount: function handleCommitFiberUnmount() {},\n    handlePostCommitFiberRoot: function handlePostCommitFiberRoot() {},\n    hasElementWithId: function hasElementWithId() {\n      return false;\n    },\n    inspectElement: function inspectElement(requestID, id, path) {\n      return {\n        id: id,\n        responseID: requestID,\n        type: 'not-found'\n      };\n    },\n    logElementToConsole: function logElementToConsole() {},\n    getElementAttributeByPath: function getElementAttributeByPath() {},\n    getElementSourceFunctionById: function getElementSourceFunctionById() {},\n    onErrorOrWarning: onErrorOrWarning,\n    overrideError: function overrideError() {},\n    overrideSuspense: function overrideSuspense() {},\n    overrideValueAtPath: function overrideValueAtPath() {},\n    renamePath: function renamePath() {},\n    renderer: renderer,\n    setTraceUpdatesEnabled: function setTraceUpdatesEnabled() {},\n    setTrackedPath: function setTrackedPath() {},\n    startProfiling: function startProfiling() {},\n    stopProfiling: function stopProfiling() {},\n    storeAsGlobal: function storeAsGlobal() {},\n    updateComponentFilters: function updateComponentFilters() {},\n    getEnvironmentNames: function getEnvironmentNames() {\n      return [];\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/flight/renderer.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/index.js":
/*!*****************************************************!*\
  !*** ../react-devtools-shared/src/backend/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initBackend\": () => (/* binding */ initBackend)\n/* harmony export */ });\n/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./agent */ \"../react-devtools-shared/src/backend/agent.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction initBackend(hook, agent, global, isReloadAndProfileSupported) {\n  if (hook == null) {\n    // DevTools didn't get injected into this page (maybe b'c of the contentType).\n    return function () {};\n  }\n\n  function registerRendererInterface(id, rendererInterface) {\n    agent.registerRendererInterface(id, rendererInterface); // Now that the Store and the renderer interface are connected,\n    // it's time to flush the pending operation codes to the frontend.\n\n    rendererInterface.flushInitialOperations();\n  }\n\n  var subs = [hook.sub('renderer-attached', function (_ref) {\n    var id = _ref.id,\n        rendererInterface = _ref.rendererInterface;\n    registerRendererInterface(id, rendererInterface);\n  }), hook.sub('unsupported-renderer-version', function () {\n    agent.onUnsupportedRenderer();\n  }), hook.sub('fastRefreshScheduled', agent.onFastRefreshScheduled), hook.sub('operations', agent.onHookOperations), hook.sub('traceUpdates', agent.onTraceUpdates), hook.sub('settingsInitialized', agent.onHookSettings) // TODO Add additional subscriptions required for profiling mode\n  ];\n  agent.addListener('getIfHasUnsupportedRendererVersion', function () {\n    if (hook.hasUnsupportedRendererAttached) {\n      agent.onUnsupportedRenderer();\n    }\n  });\n  hook.rendererInterfaces.forEach(function (rendererInterface, id) {\n    registerRendererInterface(id, rendererInterface);\n  });\n  hook.emit('react-devtools', agent);\n  hook.reactDevtoolsAgent = agent;\n\n  var onAgentShutdown = function onAgentShutdown() {\n    subs.forEach(function (fn) {\n      return fn();\n    });\n    hook.rendererInterfaces.forEach(function (rendererInterface) {\n      rendererInterface.cleanup();\n    });\n    hook.reactDevtoolsAgent = null;\n  }; // Agent's event listeners are cleaned up by Agent in `shutdown` implementation.\n\n\n  agent.addListener('shutdown', onAgentShutdown);\n  agent.addListener('updateHookSettings', function (settings) {\n    hook.settings = settings;\n  });\n  agent.addListener('getHookSettings', function () {\n    if (hook.settings != null) {\n      agent.onHookSettings(hook.settings);\n    }\n  });\n\n  if (isReloadAndProfileSupported) {\n    agent.onReloadAndProfileSupportedByHost();\n  }\n\n  return function () {\n    subs.forEach(function (fn) {\n      return fn();\n    });\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7O0FBU0E7QUFNQTtBQU1BO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBSUE7QUFHQTs7QUFDQTtBQUNBOztBQUVBO0FBU0E7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBZkE7QUF5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9pbmRleC5qcz8yYTY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCBBZ2VudCBmcm9tICcuL2FnZW50JztcblxuaW1wb3J0IHR5cGUge0RldlRvb2xzSG9vaywgUmVuZGVyZXJJRCwgUmVuZGVyZXJJbnRlcmZhY2V9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBJbml0QmFja2VuZCA9IHR5cGVvZiBpbml0QmFja2VuZDtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRCYWNrZW5kKFxuICBob29rOiBEZXZUb29sc0hvb2ssXG4gIGFnZW50OiBBZ2VudCxcbiAgZ2xvYmFsOiBPYmplY3QsXG4gIGlzUmVsb2FkQW5kUHJvZmlsZVN1cHBvcnRlZDogYm9vbGVhbixcbik6ICgpID0+IHZvaWQge1xuICBpZiAoaG9vayA9PSBudWxsKSB7XG4gICAgLy8gRGV2VG9vbHMgZGlkbid0IGdldCBpbmplY3RlZCBpbnRvIHRoaXMgcGFnZSAobWF5YmUgYidjIG9mIHRoZSBjb250ZW50VHlwZSkuXG4gICAgcmV0dXJuICgpID0+IHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJSZW5kZXJlckludGVyZmFjZShcbiAgICBpZDogUmVuZGVyZXJJRCxcbiAgICByZW5kZXJlckludGVyZmFjZTogUmVuZGVyZXJJbnRlcmZhY2UsXG4gICkge1xuICAgIGFnZW50LnJlZ2lzdGVyUmVuZGVyZXJJbnRlcmZhY2UoaWQsIHJlbmRlcmVySW50ZXJmYWNlKTtcblxuICAgIC8vIE5vdyB0aGF0IHRoZSBTdG9yZSBhbmQgdGhlIHJlbmRlcmVyIGludGVyZmFjZSBhcmUgY29ubmVjdGVkLFxuICAgIC8vIGl0J3MgdGltZSB0byBmbHVzaCB0aGUgcGVuZGluZyBvcGVyYXRpb24gY29kZXMgdG8gdGhlIGZyb250ZW5kLlxuICAgIHJlbmRlcmVySW50ZXJmYWNlLmZsdXNoSW5pdGlhbE9wZXJhdGlvbnMoKTtcbiAgfVxuXG4gIGNvbnN0IHN1YnMgPSBbXG4gICAgaG9vay5zdWIoXG4gICAgICAncmVuZGVyZXItYXR0YWNoZWQnLFxuICAgICAgKHtcbiAgICAgICAgaWQsXG4gICAgICAgIHJlbmRlcmVySW50ZXJmYWNlLFxuICAgICAgfToge1xuICAgICAgICBpZDogbnVtYmVyLFxuICAgICAgICByZW5kZXJlckludGVyZmFjZTogUmVuZGVyZXJJbnRlcmZhY2UsXG4gICAgICB9KSA9PiB7XG4gICAgICAgIHJlZ2lzdGVyUmVuZGVyZXJJbnRlcmZhY2UoaWQsIHJlbmRlcmVySW50ZXJmYWNlKTtcbiAgICAgIH0sXG4gICAgKSxcbiAgICBob29rLnN1YigndW5zdXBwb3J0ZWQtcmVuZGVyZXItdmVyc2lvbicsICgpID0+IHtcbiAgICAgIGFnZW50Lm9uVW5zdXBwb3J0ZWRSZW5kZXJlcigpO1xuICAgIH0pLFxuXG4gICAgaG9vay5zdWIoJ2Zhc3RSZWZyZXNoU2NoZWR1bGVkJywgYWdlbnQub25GYXN0UmVmcmVzaFNjaGVkdWxlZCksXG4gICAgaG9vay5zdWIoJ29wZXJhdGlvbnMnLCBhZ2VudC5vbkhvb2tPcGVyYXRpb25zKSxcbiAgICBob29rLnN1YigndHJhY2VVcGRhdGVzJywgYWdlbnQub25UcmFjZVVwZGF0ZXMpLFxuICAgIGhvb2suc3ViKCdzZXR0aW5nc0luaXRpYWxpemVkJywgYWdlbnQub25Ib29rU2V0dGluZ3MpLFxuXG4gICAgLy8gVE9ETyBBZGQgYWRkaXRpb25hbCBzdWJzY3JpcHRpb25zIHJlcXVpcmVkIGZvciBwcm9maWxpbmcgbW9kZVxuICBdO1xuXG4gIGFnZW50LmFkZExpc3RlbmVyKCdnZXRJZkhhc1Vuc3VwcG9ydGVkUmVuZGVyZXJWZXJzaW9uJywgKCkgPT4ge1xuICAgIGlmIChob29rLmhhc1Vuc3VwcG9ydGVkUmVuZGVyZXJBdHRhY2hlZCkge1xuICAgICAgYWdlbnQub25VbnN1cHBvcnRlZFJlbmRlcmVyKCk7XG4gICAgfVxuICB9KTtcblxuICBob29rLnJlbmRlcmVySW50ZXJmYWNlcy5mb3JFYWNoKChyZW5kZXJlckludGVyZmFjZSwgaWQpID0+IHtcbiAgICByZWdpc3RlclJlbmRlcmVySW50ZXJmYWNlKGlkLCByZW5kZXJlckludGVyZmFjZSk7XG4gIH0pO1xuXG4gIGhvb2suZW1pdCgncmVhY3QtZGV2dG9vbHMnLCBhZ2VudCk7XG4gIGhvb2sucmVhY3REZXZ0b29sc0FnZW50ID0gYWdlbnQ7XG5cbiAgY29uc3Qgb25BZ2VudFNodXRkb3duID0gKCkgPT4ge1xuICAgIHN1YnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgICBob29rLnJlbmRlcmVySW50ZXJmYWNlcy5mb3JFYWNoKHJlbmRlcmVySW50ZXJmYWNlID0+IHtcbiAgICAgIHJlbmRlcmVySW50ZXJmYWNlLmNsZWFudXAoKTtcbiAgICB9KTtcbiAgICBob29rLnJlYWN0RGV2dG9vbHNBZ2VudCA9IG51bGw7XG4gIH07XG5cbiAgLy8gQWdlbnQncyBldmVudCBsaXN0ZW5lcnMgYXJlIGNsZWFuZWQgdXAgYnkgQWdlbnQgaW4gYHNodXRkb3duYCBpbXBsZW1lbnRhdGlvbi5cbiAgYWdlbnQuYWRkTGlzdGVuZXIoJ3NodXRkb3duJywgb25BZ2VudFNodXRkb3duKTtcbiAgYWdlbnQuYWRkTGlzdGVuZXIoJ3VwZGF0ZUhvb2tTZXR0aW5ncycsIHNldHRpbmdzID0+IHtcbiAgICBob29rLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gIH0pO1xuICBhZ2VudC5hZGRMaXN0ZW5lcignZ2V0SG9va1NldHRpbmdzJywgKCkgPT4ge1xuICAgIGlmIChob29rLnNldHRpbmdzICE9IG51bGwpIHtcbiAgICAgIGFnZW50Lm9uSG9va1NldHRpbmdzKGhvb2suc2V0dGluZ3MpO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGlzUmVsb2FkQW5kUHJvZmlsZVN1cHBvcnRlZCkge1xuICAgIGFnZW50Lm9uUmVsb2FkQW5kUHJvZmlsZVN1cHBvcnRlZEJ5SG9zdCgpO1xuICB9XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBzdWJzLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/index.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/legacy/renderer.js":
/*!***************************************************************!*\
  !*** ../react-devtools-shared/src/backend/legacy/renderer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"attach\": () => (/* binding */ attach)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/frontend/types */ \"../react-devtools-shared/src/frontend/types.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-devtools-shared/src/utils */ \"../react-devtools-shared/src/utils.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"../react-devtools-shared/src/backend/utils/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../constants */ \"../react-devtools-shared/src/constants.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"../react-devtools-shared/src/backend/legacy/utils.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\n\n\n\nfunction getData(internalInstance) {\n  var displayName = null;\n  var key = null; // != used deliberately here to catch undefined and null\n\n  if (internalInstance._currentElement != null) {\n    if (internalInstance._currentElement.key) {\n      key = String(internalInstance._currentElement.key);\n    }\n\n    var elementType = internalInstance._currentElement.type;\n\n    if (typeof elementType === 'string') {\n      displayName = elementType;\n    } else if (typeof elementType === 'function') {\n      displayName = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getDisplayName)(elementType);\n    }\n  }\n\n  return {\n    displayName: displayName,\n    key: key\n  };\n}\n\nfunction getElementType(internalInstance) {\n  // != used deliberately here to catch undefined and null\n  if (internalInstance._currentElement != null) {\n    var elementType = internalInstance._currentElement.type;\n\n    if (typeof elementType === 'function') {\n      var publicInstance = internalInstance.getPublicInstance();\n\n      if (publicInstance !== null) {\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeClass;\n      } else {\n        return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeFunction;\n      }\n    } else if (typeof elementType === 'string') {\n      return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeHostComponent;\n    }\n  }\n\n  return react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown;\n}\n\nfunction getChildren(internalInstance) {\n  var children = []; // If the parent is a native node without rendered children, but with\n  // multiple string children, then the `element` that gets passed in here is\n  // a plain value -- a string or number.\n\n  if (_typeof(internalInstance) !== 'object') {// No children\n  } else if (internalInstance._currentElement === null || internalInstance._currentElement === false) {// No children\n  } else if (internalInstance._renderedComponent) {\n    var child = internalInstance._renderedComponent;\n\n    if (getElementType(child) !== react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown) {\n      children.push(child);\n    }\n  } else if (internalInstance._renderedChildren) {\n    var renderedChildren = internalInstance._renderedChildren;\n\n    for (var name in renderedChildren) {\n      var _child = renderedChildren[name];\n\n      if (getElementType(_child) !== react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown) {\n        children.push(_child);\n      }\n    }\n  } // Note: we skip the case where children are just strings or numbers\n  // because the new DevTools skips over host text nodes anyway.\n\n\n  return children;\n}\n\nfunction attach(hook, rendererID, renderer, global) {\n  var idToInternalInstanceMap = new Map();\n  var internalInstanceToIDMap = new WeakMap();\n  var internalInstanceToRootIDMap = new WeakMap();\n  var getElementIDForHostInstance = null;\n  var findHostInstanceForInternalID;\n\n  var getNearestMountedDOMNode = function getNearestMountedDOMNode(node) {\n    // Not implemented.\n    return null;\n  };\n\n  if (renderer.ComponentTree) {\n    getElementIDForHostInstance = function getElementIDForHostInstance(node) {\n      var internalInstance = renderer.ComponentTree.getClosestInstanceFromNode(node);\n      return internalInstanceToIDMap.get(internalInstance) || null;\n    };\n\n    findHostInstanceForInternalID = function findHostInstanceForInternalID(id) {\n      var internalInstance = idToInternalInstanceMap.get(id);\n      return renderer.ComponentTree.getNodeFromInstance(internalInstance);\n    };\n\n    getNearestMountedDOMNode = function getNearestMountedDOMNode(node) {\n      var internalInstance = renderer.ComponentTree.getClosestInstanceFromNode(node);\n\n      if (internalInstance != null) {\n        return renderer.ComponentTree.getNodeFromInstance(internalInstance);\n      }\n\n      return null;\n    };\n  } else if (renderer.Mount.getID && renderer.Mount.getNode) {\n    getElementIDForHostInstance = function getElementIDForHostInstance(node) {\n      // Not implemented.\n      return null;\n    };\n\n    findHostInstanceForInternalID = function findHostInstanceForInternalID(id) {\n      // Not implemented.\n      return null;\n    };\n  }\n\n  function getDisplayNameForElementID(id) {\n    var internalInstance = idToInternalInstanceMap.get(id);\n    return internalInstance ? getData(internalInstance).displayName : null;\n  }\n\n  function getID(internalInstance) {\n    if (_typeof(internalInstance) !== 'object' || internalInstance === null) {\n      throw new Error('Invalid internal instance: ' + internalInstance);\n    }\n\n    if (!internalInstanceToIDMap.has(internalInstance)) {\n      var _id = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getUID)();\n\n      internalInstanceToIDMap.set(internalInstance, _id);\n      idToInternalInstanceMap.set(_id, internalInstance);\n    }\n\n    return internalInstanceToIDMap.get(internalInstance);\n  }\n\n  function areEqualArrays(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  } // This is shared mutable state that lets us keep track of where we are.\n\n\n  var parentIDStack = [];\n  var oldReconcilerMethods = null;\n\n  if (renderer.Reconciler) {\n    // React 15\n    oldReconcilerMethods = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.decorateMany)(renderer.Reconciler, {\n      mountComponent: function mountComponent(fn, args) {\n        var internalInstance = args[0];\n        var hostContainerInfo = args[3];\n\n        if (getElementType(internalInstance) === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown) {\n          // $FlowFixMe[object-this-reference] found when upgrading Flow\n          return fn.apply(this, args);\n        }\n\n        if (hostContainerInfo._topLevelWrapper === undefined) {\n          // SSR\n          // $FlowFixMe[object-this-reference] found when upgrading Flow\n          return fn.apply(this, args);\n        }\n\n        var id = getID(internalInstance); // Push the operation.\n\n        var parentID = parentIDStack.length > 0 ? parentIDStack[parentIDStack.length - 1] : 0;\n        recordMount(internalInstance, id, parentID);\n        parentIDStack.push(id); // Remember the root.\n\n        internalInstanceToRootIDMap.set(internalInstance, getID(hostContainerInfo._topLevelWrapper));\n\n        try {\n          // $FlowFixMe[object-this-reference] found when upgrading Flow\n          var result = fn.apply(this, args);\n          parentIDStack.pop();\n          return result;\n        } catch (err) {\n          parentIDStack = [];\n          throw err;\n        } finally {\n          if (parentIDStack.length === 0) {\n            var rootID = internalInstanceToRootIDMap.get(internalInstance);\n\n            if (rootID === undefined) {\n              throw new Error('Expected to find root ID.');\n            }\n\n            flushPendingEvents(rootID);\n          }\n        }\n      },\n      performUpdateIfNecessary: function performUpdateIfNecessary(fn, args) {\n        var internalInstance = args[0];\n\n        if (getElementType(internalInstance) === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown) {\n          // $FlowFixMe[object-this-reference] found when upgrading Flow\n          return fn.apply(this, args);\n        }\n\n        var id = getID(internalInstance);\n        parentIDStack.push(id);\n        var prevChildren = getChildren(internalInstance);\n\n        try {\n          // $FlowFixMe[object-this-reference] found when upgrading Flow\n          var result = fn.apply(this, args);\n          var nextChildren = getChildren(internalInstance);\n\n          if (!areEqualArrays(prevChildren, nextChildren)) {\n            // Push the operation\n            recordReorder(internalInstance, id, nextChildren);\n          }\n\n          parentIDStack.pop();\n          return result;\n        } catch (err) {\n          parentIDStack = [];\n          throw err;\n        } finally {\n          if (parentIDStack.length === 0) {\n            var rootID = internalInstanceToRootIDMap.get(internalInstance);\n\n            if (rootID === undefined) {\n              throw new Error('Expected to find root ID.');\n            }\n\n            flushPendingEvents(rootID);\n          }\n        }\n      },\n      receiveComponent: function receiveComponent(fn, args) {\n        var internalInstance = args[0];\n\n        if (getElementType(internalInstance) === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown) {\n          // $FlowFixMe[object-this-reference] found when upgrading Flow\n          return fn.apply(this, args);\n        }\n\n        var id = getID(internalInstance);\n        parentIDStack.push(id);\n        var prevChildren = getChildren(internalInstance);\n\n        try {\n          // $FlowFixMe[object-this-reference] found when upgrading Flow\n          var result = fn.apply(this, args);\n          var nextChildren = getChildren(internalInstance);\n\n          if (!areEqualArrays(prevChildren, nextChildren)) {\n            // Push the operation\n            recordReorder(internalInstance, id, nextChildren);\n          }\n\n          parentIDStack.pop();\n          return result;\n        } catch (err) {\n          parentIDStack = [];\n          throw err;\n        } finally {\n          if (parentIDStack.length === 0) {\n            var rootID = internalInstanceToRootIDMap.get(internalInstance);\n\n            if (rootID === undefined) {\n              throw new Error('Expected to find root ID.');\n            }\n\n            flushPendingEvents(rootID);\n          }\n        }\n      },\n      unmountComponent: function unmountComponent(fn, args) {\n        var internalInstance = args[0];\n\n        if (getElementType(internalInstance) === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeOtherOrUnknown) {\n          // $FlowFixMe[object-this-reference] found when upgrading Flow\n          return fn.apply(this, args);\n        }\n\n        var id = getID(internalInstance);\n        parentIDStack.push(id);\n\n        try {\n          // $FlowFixMe[object-this-reference] found when upgrading Flow\n          var result = fn.apply(this, args);\n          parentIDStack.pop(); // Push the operation.\n\n          recordUnmount(internalInstance, id);\n          return result;\n        } catch (err) {\n          parentIDStack = [];\n          throw err;\n        } finally {\n          if (parentIDStack.length === 0) {\n            var rootID = internalInstanceToRootIDMap.get(internalInstance);\n\n            if (rootID === undefined) {\n              throw new Error('Expected to find root ID.');\n            }\n\n            flushPendingEvents(rootID);\n          }\n        }\n      }\n    });\n  }\n\n  function cleanup() {\n    if (oldReconcilerMethods !== null) {\n      if (renderer.Component) {\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.restoreMany)(renderer.Component.Mixin, oldReconcilerMethods);\n      } else {\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.restoreMany)(renderer.Reconciler, oldReconcilerMethods);\n      }\n    }\n\n    oldReconcilerMethods = null;\n  }\n\n  function recordMount(internalInstance, id, parentID) {\n    var isRoot = parentID === 0;\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      console.log('%crecordMount()', 'color: green; font-weight: bold;', id, getData(internalInstance).displayName);\n    }\n\n    if (isRoot) {\n      // TODO Is this right? For all versions?\n      var hasOwnerMetadata = internalInstance._currentElement != null && internalInstance._currentElement._owner != null;\n      pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_ADD);\n      pushOperation(id);\n      pushOperation(react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeRoot);\n      pushOperation(0); // StrictMode compliant?\n\n      pushOperation(0); // Profiling flag\n\n      pushOperation(0); // StrictMode supported?\n\n      pushOperation(hasOwnerMetadata ? 1 : 0);\n    } else {\n      var type = getElementType(internalInstance);\n\n      var _getData = getData(internalInstance),\n          displayName = _getData.displayName,\n          key = _getData.key;\n\n      var ownerID = internalInstance._currentElement != null && internalInstance._currentElement._owner != null ? getID(internalInstance._currentElement._owner) : 0;\n      var displayNameStringID = getStringID(displayName);\n      var keyStringID = getStringID(key);\n      pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_ADD);\n      pushOperation(id);\n      pushOperation(type);\n      pushOperation(parentID);\n      pushOperation(ownerID);\n      pushOperation(displayNameStringID);\n      pushOperation(keyStringID);\n    }\n  }\n\n  function recordReorder(internalInstance, id, nextChildren) {\n    pushOperation(_constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_REORDER_CHILDREN);\n    pushOperation(id);\n    var nextChildIDs = nextChildren.map(getID);\n    pushOperation(nextChildIDs.length);\n\n    for (var i = 0; i < nextChildIDs.length; i++) {\n      pushOperation(nextChildIDs[i]);\n    }\n  }\n\n  function recordUnmount(internalInstance, id) {\n    pendingUnmountedIDs.push(id);\n    idToInternalInstanceMap.delete(id);\n  }\n\n  function crawlAndRecordInitialMounts(id, parentID, rootID) {\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      console.group('crawlAndRecordInitialMounts() id:', id);\n    }\n\n    var internalInstance = idToInternalInstanceMap.get(id);\n\n    if (internalInstance != null) {\n      internalInstanceToRootIDMap.set(internalInstance, rootID);\n      recordMount(internalInstance, id, parentID);\n      getChildren(internalInstance).forEach(function (child) {\n        return crawlAndRecordInitialMounts(getID(child), id, rootID);\n      });\n    }\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      console.groupEnd();\n    }\n  }\n\n  function flushInitialOperations() {\n    // Crawl roots though and register any nodes that mounted before we were injected.\n    var roots = renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID;\n\n    for (var key in roots) {\n      var internalInstance = roots[key];\n\n      var _id2 = getID(internalInstance);\n\n      crawlAndRecordInitialMounts(_id2, 0, _id2);\n      flushPendingEvents(_id2);\n    }\n  }\n\n  var pendingOperations = [];\n  var pendingStringTable = new Map();\n  var pendingUnmountedIDs = [];\n  var pendingStringTableLength = 0;\n  var pendingUnmountedRootID = null;\n\n  function flushPendingEvents(rootID) {\n    if (pendingOperations.length === 0 && pendingUnmountedIDs.length === 0 && pendingUnmountedRootID === null) {\n      return;\n    }\n\n    var numUnmountIDs = pendingUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);\n    var operations = new Array( // Identify which renderer this update is coming from.\n    2 + // [rendererID, rootFiberID]\n    // How big is the string table?\n    1 + // [stringTableLength]\n    // Then goes the actual string table.\n    pendingStringTableLength + ( // All unmounts are batched in a single message.\n    // [TREE_OPERATION_REMOVE, removedIDLength, ...ids]\n    numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + // Mount operations\n    pendingOperations.length); // Identify which renderer this update is coming from.\n    // This enables roots to be mapped to renderers,\n    // Which in turn enables fiber properations, states, and hooks to be inspected.\n\n    var i = 0;\n    operations[i++] = rendererID;\n    operations[i++] = rootID; // Now fill in the string table.\n    // [stringTableLength, str1Length, ...str1, str2Length, ...str2, ...]\n\n    operations[i++] = pendingStringTableLength;\n    pendingStringTable.forEach(function (value, key) {\n      operations[i++] = key.length;\n      var encodedKey = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.utfEncodeString)(key);\n\n      for (var j = 0; j < encodedKey.length; j++) {\n        operations[i + j] = encodedKey[j];\n      }\n\n      i += key.length;\n    });\n\n    if (numUnmountIDs > 0) {\n      // All unmounts except roots are batched in a single message.\n      operations[i++] = _constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_REMOVE; // The first number is how many unmounted IDs we're gonna send.\n\n      operations[i++] = numUnmountIDs; // Fill in the unmounts\n\n      for (var j = 0; j < pendingUnmountedIDs.length; j++) {\n        operations[i++] = pendingUnmountedIDs[j];\n      } // The root ID should always be unmounted last.\n\n\n      if (pendingUnmountedRootID !== null) {\n        operations[i] = pendingUnmountedRootID;\n        i++;\n      }\n    } // Fill in the rest of the operations.\n\n\n    for (var _j = 0; _j < pendingOperations.length; _j++) {\n      operations[i + _j] = pendingOperations[_j];\n    }\n\n    i += pendingOperations.length;\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_3__.__DEBUG__) {\n      (0,_utils__WEBPACK_IMPORTED_MODULE_1__.printOperationsArray)(operations);\n    } // If we've already connected to the frontend, just pass the operations through.\n\n\n    hook.emit('operations', operations);\n    pendingOperations.length = 0;\n    pendingUnmountedIDs = [];\n    pendingUnmountedRootID = null;\n    pendingStringTable.clear();\n    pendingStringTableLength = 0;\n  }\n\n  function pushOperation(op) {\n    if (true) {\n      if (!Number.isInteger(op)) {\n        console.error('pushOperation() was called but the value is not an integer.', op);\n      }\n    }\n\n    pendingOperations.push(op);\n  }\n\n  function getStringID(str) {\n    if (str === null) {\n      return 0;\n    }\n\n    var existingID = pendingStringTable.get(str);\n\n    if (existingID !== undefined) {\n      return existingID;\n    }\n\n    var stringID = pendingStringTable.size + 1;\n    pendingStringTable.set(str, stringID); // The string table total length needs to account\n    // both for the string length, and for the array item\n    // that contains the length itself. Hence + 1.\n\n    pendingStringTableLength += str.length + 1;\n    return stringID;\n  }\n\n  var currentlyInspectedElementID = null;\n  var currentlyInspectedPaths = {}; // Track the intersection of currently inspected paths,\n  // so that we can send their data along if the element is re-rendered.\n\n  function mergeInspectedPaths(path) {\n    var current = currentlyInspectedPaths;\n    path.forEach(function (key) {\n      if (!current[key]) {\n        current[key] = {};\n      }\n\n      current = current[key];\n    });\n  }\n\n  function createIsPathAllowed(key) {\n    // This function helps prevent previously-inspected paths from being dehydrated in updates.\n    // This is important to avoid a bad user experience where expanded toggles collapse on update.\n    return function isPathAllowed(path) {\n      var current = currentlyInspectedPaths[key];\n\n      if (!current) {\n        return false;\n      }\n\n      for (var i = 0; i < path.length; i++) {\n        current = current[path[i]];\n\n        if (!current) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  } // Fast path props lookup for React Native style editor.\n\n\n  function getInstanceAndStyle(id) {\n    var instance = null;\n    var style = null;\n    var internalInstance = idToInternalInstanceMap.get(id);\n\n    if (internalInstance != null) {\n      instance = internalInstance._instance || null;\n      var element = internalInstance._currentElement;\n\n      if (element != null && element.props != null) {\n        style = element.props.style || null;\n      }\n    }\n\n    return {\n      instance: instance,\n      style: style\n    };\n  }\n\n  function updateSelectedElement(id) {\n    var internalInstance = idToInternalInstanceMap.get(id);\n\n    if (internalInstance == null) {\n      console.warn(\"Could not find instance with id \\\"\".concat(id, \"\\\"\"));\n      return;\n    }\n\n    switch (getElementType(internalInstance)) {\n      case react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeClass:\n        global.$r = internalInstance._instance;\n        break;\n\n      case react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeFunction:\n        var element = internalInstance._currentElement;\n\n        if (element == null) {\n          console.warn(\"Could not find element with id \\\"\".concat(id, \"\\\"\"));\n          return;\n        }\n\n        global.$r = {\n          props: element.props,\n          type: element.type\n        };\n        break;\n\n      default:\n        global.$r = null;\n        break;\n    }\n  }\n\n  function storeAsGlobal(id, path, count) {\n    var inspectedElement = inspectElementRaw(id);\n\n    if (inspectedElement !== null) {\n      var value = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getInObject)(inspectedElement, path);\n      var key = \"$reactTemp\".concat(count);\n      window[key] = value;\n      console.log(key);\n      console.log(value);\n    }\n  }\n\n  function getSerializedElementValueByPath(id, path) {\n    var inspectedElement = inspectElementRaw(id);\n\n    if (inspectedElement !== null) {\n      var valueToCopy = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getInObject)(inspectedElement, path);\n      return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.serializeToString)(valueToCopy);\n    }\n  }\n\n  function inspectElement(requestID, id, path, forceFullData) {\n    if (forceFullData || currentlyInspectedElementID !== id) {\n      currentlyInspectedElementID = id;\n      currentlyInspectedPaths = {};\n    }\n\n    var inspectedElement = inspectElementRaw(id);\n\n    if (inspectedElement === null) {\n      return {\n        id: id,\n        responseID: requestID,\n        type: 'not-found'\n      };\n    }\n\n    if (path !== null) {\n      mergeInspectedPaths(path);\n    } // Any time an inspected element has an update,\n    // we should update the selected $r value as wel.\n    // Do this before dehydration (cleanForBridge).\n\n\n    updateSelectedElement(id);\n    inspectedElement.context = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.cleanForBridge)(inspectedElement.context, createIsPathAllowed('context'));\n    inspectedElement.props = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.cleanForBridge)(inspectedElement.props, createIsPathAllowed('props'));\n    inspectedElement.state = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.cleanForBridge)(inspectedElement.state, createIsPathAllowed('state'));\n    return {\n      id: id,\n      responseID: requestID,\n      type: 'full-data',\n      value: inspectedElement\n    };\n  }\n\n  function inspectElementRaw(id) {\n    var internalInstance = idToInternalInstanceMap.get(id);\n\n    if (internalInstance == null) {\n      return null;\n    }\n\n    var _getData2 = getData(internalInstance),\n        key = _getData2.key;\n\n    var type = getElementType(internalInstance);\n    var context = null;\n    var owners = null;\n    var props = null;\n    var state = null;\n    var element = internalInstance._currentElement;\n\n    if (element !== null) {\n      props = element.props;\n      var owner = element._owner;\n\n      if (owner) {\n        owners = [];\n\n        while (owner != null) {\n          owners.push({\n            displayName: getData(owner).displayName || 'Unknown',\n            id: getID(owner),\n            key: element.key,\n            type: getElementType(owner)\n          });\n\n          if (owner._currentElement) {\n            owner = owner._currentElement._owner;\n          }\n        }\n      }\n    }\n\n    var publicInstance = internalInstance._instance;\n\n    if (publicInstance != null) {\n      context = publicInstance.context || null;\n      state = publicInstance.state || null;\n    } // Not implemented\n\n\n    var errors = [];\n    var warnings = [];\n    return {\n      id: id,\n      // Does the current renderer support editable hooks and function props?\n      canEditHooks: false,\n      canEditFunctionProps: false,\n      // Does the current renderer support advanced editing interface?\n      canEditHooksAndDeletePaths: false,\n      canEditHooksAndRenamePaths: false,\n      canEditFunctionPropsDeletePaths: false,\n      canEditFunctionPropsRenamePaths: false,\n      // Toggle error boundary did not exist in legacy versions\n      canToggleError: false,\n      isErrored: false,\n      // Suspense did not exist in legacy versions\n      canToggleSuspense: false,\n      // Can view component source location.\n      canViewSource: type === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeClass || type === react_devtools_shared_src_frontend_types__WEBPACK_IMPORTED_MODULE_0__.ElementTypeFunction,\n      source: null,\n      // Only legacy context exists in legacy versions.\n      hasLegacyContext: true,\n      type: type,\n      key: key != null ? key : null,\n      // Inspectable properties.\n      context: context,\n      hooks: null,\n      props: props,\n      state: state,\n      errors: errors,\n      warnings: warnings,\n      // List of owners\n      owners: owners,\n      rootType: null,\n      rendererPackageName: null,\n      rendererVersion: null,\n      plugins: {\n        stylex: null\n      }\n    };\n  }\n\n  function logElementToConsole(id) {\n    var result = inspectElementRaw(id);\n\n    if (result === null) {\n      console.warn(\"Could not find element with id \\\"\".concat(id, \"\\\"\"));\n      return;\n    }\n\n    var displayName = getDisplayNameForElementID(id);\n    var supportsGroup = typeof console.groupCollapsed === 'function';\n\n    if (supportsGroup) {\n      console.groupCollapsed(\"[Click to expand] %c<\".concat(displayName || 'Component', \" />\"), // --dom-tag-name-color is the CSS variable Chrome styles HTML elements with in the console.\n      'color: var(--dom-tag-name-color); font-weight: normal;');\n    }\n\n    if (result.props !== null) {\n      console.log('Props:', result.props);\n    }\n\n    if (result.state !== null) {\n      console.log('State:', result.state);\n    }\n\n    if (result.context !== null) {\n      console.log('Context:', result.context);\n    }\n\n    var hostInstance = findHostInstanceForInternalID(id);\n\n    if (hostInstance !== null) {\n      console.log('Node:', hostInstance);\n    }\n\n    if (window.chrome || /firefox/i.test(navigator.userAgent)) {\n      console.log('Right-click any value to save it as a global variable for further inspection.');\n    }\n\n    if (supportsGroup) {\n      console.groupEnd();\n    }\n  }\n\n  function getElementAttributeByPath(id, path) {\n    var inspectedElement = inspectElementRaw(id);\n\n    if (inspectedElement !== null) {\n      return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getInObject)(inspectedElement, path);\n    }\n\n    return undefined;\n  }\n\n  function getElementSourceFunctionById(id) {\n    var internalInstance = idToInternalInstanceMap.get(id);\n\n    if (internalInstance == null) {\n      console.warn(\"Could not find instance with id \\\"\".concat(id, \"\\\"\"));\n      return null;\n    }\n\n    var element = internalInstance._currentElement;\n\n    if (element == null) {\n      console.warn(\"Could not find element with id \\\"\".concat(id, \"\\\"\"));\n      return null;\n    }\n\n    return element.type;\n  }\n\n  function deletePath(type, id, hookID, path) {\n    var internalInstance = idToInternalInstanceMap.get(id);\n\n    if (internalInstance != null) {\n      var publicInstance = internalInstance._instance;\n\n      if (publicInstance != null) {\n        switch (type) {\n          case 'context':\n            (0,_utils__WEBPACK_IMPORTED_MODULE_1__.deletePathInObject)(publicInstance.context, path);\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.forceUpdate)(publicInstance);\n            break;\n\n          case 'hooks':\n            throw new Error('Hooks not supported by this renderer');\n\n          case 'props':\n            var element = internalInstance._currentElement;\n            internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {\n              props: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.copyWithDelete)(element.props, path)\n            });\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.forceUpdate)(publicInstance);\n            break;\n\n          case 'state':\n            (0,_utils__WEBPACK_IMPORTED_MODULE_1__.deletePathInObject)(publicInstance.state, path);\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.forceUpdate)(publicInstance);\n            break;\n        }\n      }\n    }\n  }\n\n  function renamePath(type, id, hookID, oldPath, newPath) {\n    var internalInstance = idToInternalInstanceMap.get(id);\n\n    if (internalInstance != null) {\n      var publicInstance = internalInstance._instance;\n\n      if (publicInstance != null) {\n        switch (type) {\n          case 'context':\n            (0,_utils__WEBPACK_IMPORTED_MODULE_1__.renamePathInObject)(publicInstance.context, oldPath, newPath);\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.forceUpdate)(publicInstance);\n            break;\n\n          case 'hooks':\n            throw new Error('Hooks not supported by this renderer');\n\n          case 'props':\n            var element = internalInstance._currentElement;\n            internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {\n              props: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.copyWithRename)(element.props, oldPath, newPath)\n            });\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.forceUpdate)(publicInstance);\n            break;\n\n          case 'state':\n            (0,_utils__WEBPACK_IMPORTED_MODULE_1__.renamePathInObject)(publicInstance.state, oldPath, newPath);\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.forceUpdate)(publicInstance);\n            break;\n        }\n      }\n    }\n  }\n\n  function overrideValueAtPath(type, id, hookID, path, value) {\n    var internalInstance = idToInternalInstanceMap.get(id);\n\n    if (internalInstance != null) {\n      var publicInstance = internalInstance._instance;\n\n      if (publicInstance != null) {\n        switch (type) {\n          case 'context':\n            (0,_utils__WEBPACK_IMPORTED_MODULE_1__.setInObject)(publicInstance.context, path, value);\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.forceUpdate)(publicInstance);\n            break;\n\n          case 'hooks':\n            throw new Error('Hooks not supported by this renderer');\n\n          case 'props':\n            var element = internalInstance._currentElement;\n            internalInstance._currentElement = _objectSpread(_objectSpread({}, element), {}, {\n              props: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.copyWithSet)(element.props, path, value)\n            });\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.forceUpdate)(publicInstance);\n            break;\n\n          case 'state':\n            (0,_utils__WEBPACK_IMPORTED_MODULE_1__.setInObject)(publicInstance.state, path, value);\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.forceUpdate)(publicInstance);\n            break;\n        }\n      }\n    }\n  } // v16+ only features\n\n\n  var getProfilingData = function getProfilingData() {\n    throw new Error('getProfilingData not supported by this renderer');\n  };\n\n  var handleCommitFiberRoot = function handleCommitFiberRoot() {\n    throw new Error('handleCommitFiberRoot not supported by this renderer');\n  };\n\n  var handleCommitFiberUnmount = function handleCommitFiberUnmount() {\n    throw new Error('handleCommitFiberUnmount not supported by this renderer');\n  };\n\n  var handlePostCommitFiberRoot = function handlePostCommitFiberRoot() {\n    throw new Error('handlePostCommitFiberRoot not supported by this renderer');\n  };\n\n  var overrideError = function overrideError() {\n    throw new Error('overrideError not supported by this renderer');\n  };\n\n  var overrideSuspense = function overrideSuspense() {\n    throw new Error('overrideSuspense not supported by this renderer');\n  };\n\n  var startProfiling = function startProfiling() {// Do not throw, since this would break a multi-root scenario where v15 and v16 were both present.\n  };\n\n  var stopProfiling = function stopProfiling() {// Do not throw, since this would break a multi-root scenario where v15 and v16 were both present.\n  };\n\n  function getBestMatchForTrackedPath() {\n    // Not implemented.\n    return null;\n  }\n\n  function getPathForElement(id) {\n    // Not implemented.\n    return null;\n  }\n\n  function updateComponentFilters(componentFilters) {// Not implemented.\n  }\n\n  function getEnvironmentNames() {\n    // No RSC support.\n    return [];\n  }\n\n  function setTraceUpdatesEnabled(enabled) {// Not implemented.\n  }\n\n  function setTrackedPath(path) {// Not implemented.\n  }\n\n  function getOwnersList(id) {\n    // Not implemented.\n    return null;\n  }\n\n  function clearErrorsAndWarnings() {// Not implemented\n  }\n\n  function clearErrorsForElementID(id) {// Not implemented\n  }\n\n  function clearWarningsForElementID(id) {// Not implemented\n  }\n\n  function hasElementWithId(id) {\n    return idToInternalInstanceMap.has(id);\n  }\n\n  return {\n    clearErrorsAndWarnings: clearErrorsAndWarnings,\n    clearErrorsForElementID: clearErrorsForElementID,\n    clearWarningsForElementID: clearWarningsForElementID,\n    cleanup: cleanup,\n    getSerializedElementValueByPath: getSerializedElementValueByPath,\n    deletePath: deletePath,\n    flushInitialOperations: flushInitialOperations,\n    getBestMatchForTrackedPath: getBestMatchForTrackedPath,\n    getDisplayNameForElementID: getDisplayNameForElementID,\n    getNearestMountedDOMNode: getNearestMountedDOMNode,\n    getElementIDForHostInstance: getElementIDForHostInstance,\n    getInstanceAndStyle: getInstanceAndStyle,\n    findHostInstancesForElementID: function findHostInstancesForElementID(id) {\n      var hostInstance = findHostInstanceForInternalID(id);\n      return hostInstance == null ? null : [hostInstance];\n    },\n    getOwnersList: getOwnersList,\n    getPathForElement: getPathForElement,\n    getProfilingData: getProfilingData,\n    handleCommitFiberRoot: handleCommitFiberRoot,\n    handleCommitFiberUnmount: handleCommitFiberUnmount,\n    handlePostCommitFiberRoot: handlePostCommitFiberRoot,\n    hasElementWithId: hasElementWithId,\n    inspectElement: inspectElement,\n    logElementToConsole: logElementToConsole,\n    overrideError: overrideError,\n    overrideSuspense: overrideSuspense,\n    overrideValueAtPath: overrideValueAtPath,\n    renamePath: renamePath,\n    getElementAttributeByPath: getElementAttributeByPath,\n    getElementSourceFunctionById: getElementSourceFunctionById,\n    renderer: renderer,\n    setTraceUpdatesEnabled: setTraceUpdatesEnabled,\n    setTrackedPath: setTrackedPath,\n    startProfiling: startProfiling,\n    stopProfiling: stopProfiling,\n    storeAsGlobal: storeAsGlobal,\n    updateComponentFilters: updateComponentFilters,\n    getEnvironmentNames: getEnvironmentNames\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/legacy/renderer.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/legacy/utils.js":
/*!************************************************************!*\
  !*** ../react-devtools-shared/src/backend/legacy/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"decorate\": () => (/* binding */ decorate),\n/* harmony export */   \"decorateMany\": () => (/* binding */ decorateMany),\n/* harmony export */   \"forceUpdate\": () => (/* binding */ forceUpdate),\n/* harmony export */   \"restoreMany\": () => (/* binding */ restoreMany)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction decorate(object, attr, fn) {\n  var old = object[attr]; // $FlowFixMe[missing-this-annot] webpack config needs to be updated to allow `this` type annotations\n\n  object[attr] = function (instance) {\n    return fn.call(this, old, arguments);\n  };\n\n  return old;\n}\nfunction decorateMany(source, fns) {\n  var olds = {};\n\n  for (var name in fns) {\n    olds[name] = decorate(source, name, fns[name]);\n  }\n\n  return olds;\n}\nfunction restoreMany(source, olds) {\n  for (var name in olds) {\n    source[name] = olds[name];\n  }\n} // $FlowFixMe[missing-this-annot] webpack config needs to be updated to allow `this` type annotations\n\nfunction forceUpdate(instance) {\n  if (typeof instance.forceUpdate === 'function') {\n    instance.forceUpdate();\n  } else if (instance.updater != null && typeof instance.updater.enqueueForceUpdate === 'function') {\n    instance.updater.enqueueForceUpdate(this, function () {}, 'forceUpdate');\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL2xlZ2FjeS91dGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7O0FBV0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUVBO0FBSUE7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vUmVhY3REZXZUb29sc0JhY2tlbmQvLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL2xlZ2FjeS91dGlscy5qcz9hZjMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtJbnRlcm5hbEluc3RhbmNlfSBmcm9tICcuL3JlbmRlcmVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29yYXRlKG9iamVjdDogT2JqZWN0LCBhdHRyOiBzdHJpbmcsIGZuOiBGdW5jdGlvbik6IEZ1bmN0aW9uIHtcbiAgY29uc3Qgb2xkID0gb2JqZWN0W2F0dHJdO1xuICAvLyAkRmxvd0ZpeE1lW21pc3NpbmctdGhpcy1hbm5vdF0gd2VicGFjayBjb25maWcgbmVlZHMgdG8gYmUgdXBkYXRlZCB0byBhbGxvdyBgdGhpc2AgdHlwZSBhbm5vdGF0aW9uc1xuICBvYmplY3RbYXR0cl0gPSBmdW5jdGlvbiAoaW5zdGFuY2U6IEludGVybmFsSW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBvbGQsIGFyZ3VtZW50cyk7XG4gIH07XG4gIHJldHVybiBvbGQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvcmF0ZU1hbnkoXG4gIHNvdXJjZTogT2JqZWN0LFxuICBmbnM6IHtbYXR0cjogc3RyaW5nXTogRnVuY3Rpb24sIC4uLn0sXG4pOiBPYmplY3Qge1xuICBjb25zdCBvbGRzOiB7W3N0cmluZ106ICRGbG93Rml4TWV9ID0ge307XG4gIGZvciAoY29uc3QgbmFtZSBpbiBmbnMpIHtcbiAgICBvbGRzW25hbWVdID0gZGVjb3JhdGUoc291cmNlLCBuYW1lLCBmbnNbbmFtZV0pO1xuICB9XG4gIHJldHVybiBvbGRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzdG9yZU1hbnkoc291cmNlOiBPYmplY3QsIG9sZHM6IE9iamVjdCk6IHZvaWQge1xuICBmb3IgKGNvbnN0IG5hbWUgaW4gb2xkcykge1xuICAgIHNvdXJjZVtuYW1lXSA9IG9sZHNbbmFtZV07XG4gIH1cbn1cblxuLy8gJEZsb3dGaXhNZVttaXNzaW5nLXRoaXMtYW5ub3RdIHdlYnBhY2sgY29uZmlnIG5lZWRzIHRvIGJlIHVwZGF0ZWQgdG8gYWxsb3cgYHRoaXNgIHR5cGUgYW5ub3RhdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBmb3JjZVVwZGF0ZShpbnN0YW5jZTogSW50ZXJuYWxJbnN0YW5jZSk6IHZvaWQge1xuICBpZiAodHlwZW9mIGluc3RhbmNlLmZvcmNlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgfSBlbHNlIGlmIChcbiAgICBpbnN0YW5jZS51cGRhdGVyICE9IG51bGwgJiZcbiAgICB0eXBlb2YgaW5zdGFuY2UudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUgPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgaW5zdGFuY2UudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcywgKCkgPT4ge30sICdmb3JjZVVwZGF0ZScpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/legacy/utils.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/profilingHooks.js":
/*!**************************************************************!*\
  !*** ../react-devtools-shared/src/backend/profilingHooks.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createProfilingHooks\": () => (/* binding */ createProfilingHooks),\n/* harmony export */   \"setPerformanceMock_ONLY_FOR_TESTING\": () => (/* binding */ setPerformanceMock_ONLY_FOR_TESTING)\n/* harmony export */ });\n/* harmony import */ var shared_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/isArray */ \"../shared/isArray.js\");\n/* harmony import */ var react_devtools_timeline_src_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-devtools-timeline/src/constants */ \"../react-devtools-timeline/src/constants.js\");\n/* harmony import */ var _fiber_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fiber/DevToolsFiberComponentStack */ \"../react-devtools-shared/src/backend/fiber/DevToolsFiberComponentStack.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n // Add padding to the start/stop time of the profile.\n// This makes the UI nicer to use.\n\nvar TIME_OFFSET = 10;\nvar performanceTarget = null; // If performance exists and supports the subset of the User Timing API that we require.\n\nvar supportsUserTiming = typeof performance !== 'undefined' && // $FlowFixMe[method-unbinding]\ntypeof performance.mark === 'function' && // $FlowFixMe[method-unbinding]\ntypeof performance.clearMarks === 'function';\nvar supportsUserTimingV3 = false;\n\nif (supportsUserTiming) {\n  var CHECK_V3_MARK = '__v3';\n  var markOptions = {};\n  Object.defineProperty(markOptions, 'startTime', {\n    get: function get() {\n      supportsUserTimingV3 = true;\n      return 0;\n    },\n    set: function set() {}\n  });\n\n  try {\n    performance.mark(CHECK_V3_MARK, markOptions);\n  } catch (error) {// Ignore\n  } finally {\n    performance.clearMarks(CHECK_V3_MARK);\n  }\n}\n\nif (supportsUserTimingV3) {\n  performanceTarget = performance;\n} // Some environments (e.g. React Native / Hermes) don't support the performance API yet.\n\n\nvar getCurrentTime = // $FlowFixMe[method-unbinding]\n(typeof performance === \"undefined\" ? \"undefined\" : _typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n}; // Mocking the Performance Object (and User Timing APIs) for testing is fragile.\n// This API allows tests to directly override the User Timing APIs.\n\nfunction setPerformanceMock_ONLY_FOR_TESTING(performanceMock) {\n  performanceTarget = performanceMock;\n  supportsUserTiming = performanceMock !== null;\n  supportsUserTimingV3 = performanceMock !== null;\n}\nfunction createProfilingHooks(_ref) {\n  var getDisplayNameForFiber = _ref.getDisplayNameForFiber,\n      getIsProfiling = _ref.getIsProfiling,\n      getLaneLabelMap = _ref.getLaneLabelMap,\n      workTagMap = _ref.workTagMap,\n      currentDispatcherRef = _ref.currentDispatcherRef,\n      reactVersion = _ref.reactVersion;\n  var currentBatchUID = 0;\n  var currentReactComponentMeasure = null;\n  var currentReactMeasuresStack = [];\n  var currentTimelineData = null;\n  var currentFiberStacks = new Map();\n  var isProfiling = false;\n  var nextRenderShouldStartNewBatch = false;\n\n  function getRelativeTime() {\n    var currentTime = getCurrentTime();\n\n    if (currentTimelineData) {\n      if (currentTimelineData.startTime === 0) {\n        currentTimelineData.startTime = currentTime - TIME_OFFSET;\n      }\n\n      return currentTime - currentTimelineData.startTime;\n    }\n\n    return 0;\n  }\n\n  function getInternalModuleRanges() {\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges === 'function') {\n      // Ask the DevTools hook for module ranges that may have been reported by the current renderer(s).\n      // Don't do this eagerly like the laneToLabelMap,\n      // because some modules might not yet have registered their boundaries when the renderer is injected.\n      var ranges = __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges(); // This check would not be required,\n      // except that it's possible for things to override __REACT_DEVTOOLS_GLOBAL_HOOK__.\n\n\n      if ((0,shared_isArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(ranges)) {\n        return ranges;\n      }\n    }\n\n    return null;\n  }\n\n  function getTimelineData() {\n    return currentTimelineData;\n  }\n\n  function laneToLanesArray(lanes) {\n    var lanesArray = [];\n    var lane = 1;\n\n    for (var index = 0; index < react_devtools_timeline_src_constants__WEBPACK_IMPORTED_MODULE_1__.REACT_TOTAL_NUM_LANES; index++) {\n      if (lane & lanes) {\n        lanesArray.push(lane);\n      }\n\n      lane *= 2;\n    }\n\n    return lanesArray;\n  }\n\n  var laneToLabelMap = typeof getLaneLabelMap === 'function' ? getLaneLabelMap() : null;\n\n  function markMetadata() {\n    markAndClear(\"--react-version-\".concat(reactVersion));\n    markAndClear(\"--profiler-version-\".concat(react_devtools_timeline_src_constants__WEBPACK_IMPORTED_MODULE_1__.SCHEDULING_PROFILER_VERSION));\n    var ranges = getInternalModuleRanges();\n\n    if (ranges) {\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n\n        if ((0,shared_isArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(range) && range.length === 2) {\n          var _ranges$i = _slicedToArray(ranges[i], 2),\n              startStackFrame = _ranges$i[0],\n              stopStackFrame = _ranges$i[1];\n\n          markAndClear(\"--react-internal-module-start-\".concat(startStackFrame));\n          markAndClear(\"--react-internal-module-stop-\".concat(stopStackFrame));\n        }\n      }\n    }\n\n    if (laneToLabelMap != null) {\n      var labels = Array.from(laneToLabelMap.values()).join(',');\n      markAndClear(\"--react-lane-labels-\".concat(labels));\n    }\n  }\n\n  function markAndClear(markName) {\n    // This method won't be called unless these functions are defined, so we can skip the extra typeof check.\n    performanceTarget.mark(markName);\n    performanceTarget.clearMarks(markName);\n  }\n\n  function recordReactMeasureStarted(type, lanes) {\n    // Decide what depth thi work should be rendered at, based on what's on the top of the stack.\n    // It's okay to render over top of \"idle\" work but everything else should be on its own row.\n    var depth = 0;\n\n    if (currentReactMeasuresStack.length > 0) {\n      var top = currentReactMeasuresStack[currentReactMeasuresStack.length - 1];\n      depth = top.type === 'render-idle' ? top.depth : top.depth + 1;\n    }\n\n    var lanesArray = laneToLanesArray(lanes);\n    var reactMeasure = {\n      type: type,\n      batchUID: currentBatchUID,\n      depth: depth,\n      lanes: lanesArray,\n      timestamp: getRelativeTime(),\n      duration: 0\n    };\n    currentReactMeasuresStack.push(reactMeasure);\n\n    if (currentTimelineData) {\n      var _currentTimelineData = currentTimelineData,\n          batchUIDToMeasuresMap = _currentTimelineData.batchUIDToMeasuresMap,\n          laneToReactMeasureMap = _currentTimelineData.laneToReactMeasureMap;\n      var reactMeasures = batchUIDToMeasuresMap.get(currentBatchUID);\n\n      if (reactMeasures != null) {\n        reactMeasures.push(reactMeasure);\n      } else {\n        batchUIDToMeasuresMap.set(currentBatchUID, [reactMeasure]);\n      }\n\n      lanesArray.forEach(function (lane) {\n        reactMeasures = laneToReactMeasureMap.get(lane);\n\n        if (reactMeasures) {\n          reactMeasures.push(reactMeasure);\n        }\n      });\n    }\n  }\n\n  function recordReactMeasureCompleted(type) {\n    var currentTime = getRelativeTime();\n\n    if (currentReactMeasuresStack.length === 0) {\n      console.error('Unexpected type \"%s\" completed at %sms while currentReactMeasuresStack is empty.', type, currentTime); // Ignore work \"completion\" user timing mark that doesn't complete anything\n\n      return;\n    }\n\n    var top = currentReactMeasuresStack.pop(); // $FlowFixMe[incompatible-type]\n\n    if (top.type !== type) {\n      console.error('Unexpected type \"%s\" completed at %sms before \"%s\" completed.', type, currentTime, // $FlowFixMe[incompatible-use]\n      top.type);\n    } // $FlowFixMe[cannot-write] This property should not be writable outside of this function.\n    // $FlowFixMe[incompatible-use]\n\n\n    top.duration = currentTime - top.timestamp;\n\n    if (currentTimelineData) {\n      currentTimelineData.duration = getRelativeTime() + TIME_OFFSET;\n    }\n  }\n\n  function markCommitStarted(lanes) {\n    if (isProfiling) {\n      recordReactMeasureStarted('commit', lanes); // TODO (timeline) Re-think this approach to \"batching\"; I don't think it works for Suspense or pre-rendering.\n      // This issue applies to the User Timing data also.\n\n      nextRenderShouldStartNewBatch = true;\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear(\"--commit-start-\".concat(lanes)); // Some metadata only needs to be logged once per session,\n      // but if profiling information is being recorded via the Performance tab,\n      // DevTools has no way of knowing when the recording starts.\n      // Because of that, we log thie type of data periodically (once per commit).\n\n      markMetadata();\n    }\n  }\n\n  function markCommitStopped() {\n    if (isProfiling) {\n      recordReactMeasureCompleted('commit');\n      recordReactMeasureCompleted('render-idle');\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--commit-stop');\n    }\n  }\n\n  function markComponentRenderStarted(fiber) {\n    if (isProfiling || supportsUserTimingV3) {\n      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';\n\n      if (isProfiling) {\n        // TODO (timeline) Record and cache component stack\n        if (isProfiling) {\n          currentReactComponentMeasure = {\n            componentName: componentName,\n            duration: 0,\n            timestamp: getRelativeTime(),\n            type: 'render',\n            warning: null\n          };\n        }\n      }\n\n      if (supportsUserTimingV3) {\n        markAndClear(\"--component-render-start-\".concat(componentName));\n      }\n    }\n  }\n\n  function markComponentRenderStopped() {\n    if (isProfiling) {\n      if (currentReactComponentMeasure) {\n        if (currentTimelineData) {\n          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);\n        } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n        currentReactComponentMeasure.duration = // $FlowFixMe[incompatible-use] found when upgrading Flow\n        getRelativeTime() - currentReactComponentMeasure.timestamp;\n        currentReactComponentMeasure = null;\n      }\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--component-render-stop');\n    }\n  }\n\n  function markComponentLayoutEffectMountStarted(fiber) {\n    if (isProfiling || supportsUserTimingV3) {\n      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';\n\n      if (isProfiling) {\n        // TODO (timeline) Record and cache component stack\n        if (isProfiling) {\n          currentReactComponentMeasure = {\n            componentName: componentName,\n            duration: 0,\n            timestamp: getRelativeTime(),\n            type: 'layout-effect-mount',\n            warning: null\n          };\n        }\n      }\n\n      if (supportsUserTimingV3) {\n        markAndClear(\"--component-layout-effect-mount-start-\".concat(componentName));\n      }\n    }\n  }\n\n  function markComponentLayoutEffectMountStopped() {\n    if (isProfiling) {\n      if (currentReactComponentMeasure) {\n        if (currentTimelineData) {\n          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);\n        } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n        currentReactComponentMeasure.duration = // $FlowFixMe[incompatible-use] found when upgrading Flow\n        getRelativeTime() - currentReactComponentMeasure.timestamp;\n        currentReactComponentMeasure = null;\n      }\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--component-layout-effect-mount-stop');\n    }\n  }\n\n  function markComponentLayoutEffectUnmountStarted(fiber) {\n    if (isProfiling || supportsUserTimingV3) {\n      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';\n\n      if (isProfiling) {\n        // TODO (timeline) Record and cache component stack\n        if (isProfiling) {\n          currentReactComponentMeasure = {\n            componentName: componentName,\n            duration: 0,\n            timestamp: getRelativeTime(),\n            type: 'layout-effect-unmount',\n            warning: null\n          };\n        }\n      }\n\n      if (supportsUserTimingV3) {\n        markAndClear(\"--component-layout-effect-unmount-start-\".concat(componentName));\n      }\n    }\n  }\n\n  function markComponentLayoutEffectUnmountStopped() {\n    if (isProfiling) {\n      if (currentReactComponentMeasure) {\n        if (currentTimelineData) {\n          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);\n        } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n        currentReactComponentMeasure.duration = // $FlowFixMe[incompatible-use] found when upgrading Flow\n        getRelativeTime() - currentReactComponentMeasure.timestamp;\n        currentReactComponentMeasure = null;\n      }\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--component-layout-effect-unmount-stop');\n    }\n  }\n\n  function markComponentPassiveEffectMountStarted(fiber) {\n    if (isProfiling || supportsUserTimingV3) {\n      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';\n\n      if (isProfiling) {\n        // TODO (timeline) Record and cache component stack\n        if (isProfiling) {\n          currentReactComponentMeasure = {\n            componentName: componentName,\n            duration: 0,\n            timestamp: getRelativeTime(),\n            type: 'passive-effect-mount',\n            warning: null\n          };\n        }\n      }\n\n      if (supportsUserTimingV3) {\n        markAndClear(\"--component-passive-effect-mount-start-\".concat(componentName));\n      }\n    }\n  }\n\n  function markComponentPassiveEffectMountStopped() {\n    if (isProfiling) {\n      if (currentReactComponentMeasure) {\n        if (currentTimelineData) {\n          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);\n        } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n        currentReactComponentMeasure.duration = // $FlowFixMe[incompatible-use] found when upgrading Flow\n        getRelativeTime() - currentReactComponentMeasure.timestamp;\n        currentReactComponentMeasure = null;\n      }\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--component-passive-effect-mount-stop');\n    }\n  }\n\n  function markComponentPassiveEffectUnmountStarted(fiber) {\n    if (isProfiling || supportsUserTimingV3) {\n      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';\n\n      if (isProfiling) {\n        // TODO (timeline) Record and cache component stack\n        if (isProfiling) {\n          currentReactComponentMeasure = {\n            componentName: componentName,\n            duration: 0,\n            timestamp: getRelativeTime(),\n            type: 'passive-effect-unmount',\n            warning: null\n          };\n        }\n      }\n\n      if (supportsUserTimingV3) {\n        markAndClear(\"--component-passive-effect-unmount-start-\".concat(componentName));\n      }\n    }\n  }\n\n  function markComponentPassiveEffectUnmountStopped() {\n    if (isProfiling) {\n      if (currentReactComponentMeasure) {\n        if (currentTimelineData) {\n          currentTimelineData.componentMeasures.push(currentReactComponentMeasure);\n        } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n        currentReactComponentMeasure.duration = // $FlowFixMe[incompatible-use] found when upgrading Flow\n        getRelativeTime() - currentReactComponentMeasure.timestamp;\n        currentReactComponentMeasure = null;\n      }\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--component-passive-effect-unmount-stop');\n    }\n  }\n\n  function markComponentErrored(fiber, thrownValue, lanes) {\n    if (isProfiling || supportsUserTimingV3) {\n      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';\n      var phase = fiber.alternate === null ? 'mount' : 'update';\n      var message = '';\n\n      if (thrownValue !== null && _typeof(thrownValue) === 'object' && typeof thrownValue.message === 'string') {\n        message = thrownValue.message;\n      } else if (typeof thrownValue === 'string') {\n        message = thrownValue;\n      }\n\n      if (isProfiling) {\n        // TODO (timeline) Record and cache component stack\n        if (currentTimelineData) {\n          currentTimelineData.thrownErrors.push({\n            componentName: componentName,\n            message: message,\n            phase: phase,\n            timestamp: getRelativeTime(),\n            type: 'thrown-error'\n          });\n        }\n      }\n\n      if (supportsUserTimingV3) {\n        markAndClear(\"--error-\".concat(componentName, \"-\").concat(phase, \"-\").concat(message));\n      }\n    }\n  }\n\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // $FlowFixMe[incompatible-type]: Flow cannot handle polymorphic WeakMaps\n\n  var wakeableIDs = new PossiblyWeakMap();\n  var wakeableID = 0;\n\n  function getWakeableID(wakeable) {\n    if (!wakeableIDs.has(wakeable)) {\n      wakeableIDs.set(wakeable, wakeableID++);\n    }\n\n    return wakeableIDs.get(wakeable);\n  }\n\n  function markComponentSuspended(fiber, wakeable, lanes) {\n    if (isProfiling || supportsUserTimingV3) {\n      var eventType = wakeableIDs.has(wakeable) ? 'resuspend' : 'suspend';\n      var id = getWakeableID(wakeable);\n      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';\n      var phase = fiber.alternate === null ? 'mount' : 'update'; // Following the non-standard fn.displayName convention,\n      // frameworks like Relay may also annotate Promises with a displayName,\n      // describing what operation/data the thrown Promise is related to.\n      // When this is available we should pass it along to the Timeline.\n\n      var displayName = wakeable.displayName || '';\n      var suspenseEvent = null;\n\n      if (isProfiling) {\n        // TODO (timeline) Record and cache component stack\n        suspenseEvent = {\n          componentName: componentName,\n          depth: 0,\n          duration: 0,\n          id: \"\".concat(id),\n          phase: phase,\n          promiseName: displayName,\n          resolution: 'unresolved',\n          timestamp: getRelativeTime(),\n          type: 'suspense',\n          warning: null\n        };\n\n        if (currentTimelineData) {\n          currentTimelineData.suspenseEvents.push(suspenseEvent);\n        }\n      }\n\n      if (supportsUserTimingV3) {\n        markAndClear(\"--suspense-\".concat(eventType, \"-\").concat(id, \"-\").concat(componentName, \"-\").concat(phase, \"-\").concat(lanes, \"-\").concat(displayName));\n      }\n\n      wakeable.then(function () {\n        if (suspenseEvent) {\n          suspenseEvent.duration = getRelativeTime() - suspenseEvent.timestamp;\n          suspenseEvent.resolution = 'resolved';\n        }\n\n        if (supportsUserTimingV3) {\n          markAndClear(\"--suspense-resolved-\".concat(id, \"-\").concat(componentName));\n        }\n      }, function () {\n        if (suspenseEvent) {\n          suspenseEvent.duration = getRelativeTime() - suspenseEvent.timestamp;\n          suspenseEvent.resolution = 'rejected';\n        }\n\n        if (supportsUserTimingV3) {\n          markAndClear(\"--suspense-rejected-\".concat(id, \"-\").concat(componentName));\n        }\n      });\n    }\n  }\n\n  function markLayoutEffectsStarted(lanes) {\n    if (isProfiling) {\n      recordReactMeasureStarted('layout-effects', lanes);\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear(\"--layout-effects-start-\".concat(lanes));\n    }\n  }\n\n  function markLayoutEffectsStopped() {\n    if (isProfiling) {\n      recordReactMeasureCompleted('layout-effects');\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--layout-effects-stop');\n    }\n  }\n\n  function markPassiveEffectsStarted(lanes) {\n    if (isProfiling) {\n      recordReactMeasureStarted('passive-effects', lanes);\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear(\"--passive-effects-start-\".concat(lanes));\n    }\n  }\n\n  function markPassiveEffectsStopped() {\n    if (isProfiling) {\n      recordReactMeasureCompleted('passive-effects');\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--passive-effects-stop');\n    }\n  }\n\n  function markRenderStarted(lanes) {\n    if (isProfiling) {\n      if (nextRenderShouldStartNewBatch) {\n        nextRenderShouldStartNewBatch = false;\n        currentBatchUID++;\n      } // If this is a new batch of work, wrap an \"idle\" measure around it.\n      // Log it before the \"render\" measure to preserve the stack ordering.\n\n\n      if (currentReactMeasuresStack.length === 0 || currentReactMeasuresStack[currentReactMeasuresStack.length - 1].type !== 'render-idle') {\n        recordReactMeasureStarted('render-idle', lanes);\n      }\n\n      recordReactMeasureStarted('render', lanes);\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear(\"--render-start-\".concat(lanes));\n    }\n  }\n\n  function markRenderYielded() {\n    if (isProfiling) {\n      recordReactMeasureCompleted('render');\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--render-yield');\n    }\n  }\n\n  function markRenderStopped() {\n    if (isProfiling) {\n      recordReactMeasureCompleted('render');\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear('--render-stop');\n    }\n  }\n\n  function markRenderScheduled(lane) {\n    if (isProfiling) {\n      if (currentTimelineData) {\n        currentTimelineData.schedulingEvents.push({\n          lanes: laneToLanesArray(lane),\n          timestamp: getRelativeTime(),\n          type: 'schedule-render',\n          warning: null\n        });\n      }\n    }\n\n    if (supportsUserTimingV3) {\n      markAndClear(\"--schedule-render-\".concat(lane));\n    }\n  }\n\n  function markForceUpdateScheduled(fiber, lane) {\n    if (isProfiling || supportsUserTimingV3) {\n      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';\n\n      if (isProfiling) {\n        // TODO (timeline) Record and cache component stack\n        if (currentTimelineData) {\n          currentTimelineData.schedulingEvents.push({\n            componentName: componentName,\n            lanes: laneToLanesArray(lane),\n            timestamp: getRelativeTime(),\n            type: 'schedule-force-update',\n            warning: null\n          });\n        }\n      }\n\n      if (supportsUserTimingV3) {\n        markAndClear(\"--schedule-forced-update-\".concat(lane, \"-\").concat(componentName));\n      }\n    }\n  }\n\n  function getParentFibers(fiber) {\n    var parents = [];\n    var parent = fiber;\n\n    while (parent !== null) {\n      parents.push(parent);\n      parent = parent.return;\n    }\n\n    return parents;\n  }\n\n  function markStateUpdateScheduled(fiber, lane) {\n    if (isProfiling || supportsUserTimingV3) {\n      var componentName = getDisplayNameForFiber(fiber) || 'Unknown';\n\n      if (isProfiling) {\n        // TODO (timeline) Record and cache component stack\n        if (currentTimelineData) {\n          var event = {\n            componentName: componentName,\n            // Store the parent fibers so we can post process\n            // them after we finish profiling\n            lanes: laneToLanesArray(lane),\n            timestamp: getRelativeTime(),\n            type: 'schedule-state-update',\n            warning: null\n          };\n          currentFiberStacks.set(event, getParentFibers(fiber)); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          currentTimelineData.schedulingEvents.push(event);\n        }\n      }\n\n      if (supportsUserTimingV3) {\n        markAndClear(\"--schedule-state-update-\".concat(lane, \"-\").concat(componentName));\n      }\n    }\n  }\n\n  function toggleProfilingStatus(value) {\n    var recordTimeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (isProfiling !== value) {\n      isProfiling = value;\n\n      if (isProfiling) {\n        var internalModuleSourceToRanges = new Map();\n\n        if (supportsUserTimingV3) {\n          var ranges = getInternalModuleRanges();\n\n          if (ranges) {\n            for (var i = 0; i < ranges.length; i++) {\n              var range = ranges[i];\n\n              if ((0,shared_isArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(range) && range.length === 2) {\n                var _ranges$i2 = _slicedToArray(ranges[i], 2),\n                    startStackFrame = _ranges$i2[0],\n                    stopStackFrame = _ranges$i2[1];\n\n                markAndClear(\"--react-internal-module-start-\".concat(startStackFrame));\n                markAndClear(\"--react-internal-module-stop-\".concat(stopStackFrame));\n              }\n            }\n          }\n        }\n\n        var laneToReactMeasureMap = new Map();\n        var lane = 1;\n\n        for (var index = 0; index < react_devtools_timeline_src_constants__WEBPACK_IMPORTED_MODULE_1__.REACT_TOTAL_NUM_LANES; index++) {\n          laneToReactMeasureMap.set(lane, []);\n          lane *= 2;\n        }\n\n        currentBatchUID = 0;\n        currentReactComponentMeasure = null;\n        currentReactMeasuresStack = [];\n        currentFiberStacks = new Map();\n\n        if (recordTimeline) {\n          currentTimelineData = {\n            // Session wide metadata; only collected once.\n            internalModuleSourceToRanges: internalModuleSourceToRanges,\n            laneToLabelMap: laneToLabelMap || new Map(),\n            reactVersion: reactVersion,\n            // Data logged by React during profiling session.\n            componentMeasures: [],\n            schedulingEvents: [],\n            suspenseEvents: [],\n            thrownErrors: [],\n            // Data inferred based on what React logs.\n            batchUIDToMeasuresMap: new Map(),\n            duration: 0,\n            laneToReactMeasureMap: laneToReactMeasureMap,\n            startTime: 0,\n            // Data only available in Chrome profiles.\n            flamechart: [],\n            nativeEvents: [],\n            networkMeasures: [],\n            otherUserTimingMarks: [],\n            snapshots: [],\n            snapshotHeight: 0\n          };\n        }\n\n        nextRenderShouldStartNewBatch = true;\n      } else {\n        // This is __EXPENSIVE__.\n        // We could end up with hundreds of state updated, and for each one of them\n        // would try to create a component stack with possibly hundreds of Fibers.\n        // Creating a cache of component stacks won't help, generating a single stack is already expensive enough.\n        // We should find a way to lazily generate component stacks on demand, when user inspects a specific event.\n        // If we succeed with moving React DevTools Timeline Profiler to Performance panel, then Timeline Profiler would probably be removed.\n        // If not, then once enableOwnerStacks is adopted, revisit this again and cache component stacks per Fiber,\n        // but only return them when needed, sending hundreds of component stacks is beyond the Bridge's bandwidth.\n        // Postprocess Profile data\n        if (currentTimelineData !== null) {\n          currentTimelineData.schedulingEvents.forEach(function (event) {\n            if (event.type === 'schedule-state-update') {\n              // TODO(luna): We can optimize this by creating a map of\n              // fiber to component stack instead of generating the stack\n              // for every fiber every time\n              var fiberStack = currentFiberStacks.get(event);\n\n              if (fiberStack && currentDispatcherRef != null) {\n                event.componentStack = fiberStack.reduce(function (trace, fiber) {\n                  return trace + (0,_fiber_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__.describeFiber)(workTagMap, fiber, currentDispatcherRef);\n                }, '');\n              }\n            }\n          });\n        } // Clear the current fiber stacks so we don't hold onto the fibers\n        // in memory after profiling finishes\n\n\n        currentFiberStacks.clear();\n      }\n    }\n  }\n\n  return {\n    getTimelineData: getTimelineData,\n    profilingHooks: {\n      markCommitStarted: markCommitStarted,\n      markCommitStopped: markCommitStopped,\n      markComponentRenderStarted: markComponentRenderStarted,\n      markComponentRenderStopped: markComponentRenderStopped,\n      markComponentPassiveEffectMountStarted: markComponentPassiveEffectMountStarted,\n      markComponentPassiveEffectMountStopped: markComponentPassiveEffectMountStopped,\n      markComponentPassiveEffectUnmountStarted: markComponentPassiveEffectUnmountStarted,\n      markComponentPassiveEffectUnmountStopped: markComponentPassiveEffectUnmountStopped,\n      markComponentLayoutEffectMountStarted: markComponentLayoutEffectMountStarted,\n      markComponentLayoutEffectMountStopped: markComponentLayoutEffectMountStopped,\n      markComponentLayoutEffectUnmountStarted: markComponentLayoutEffectUnmountStarted,\n      markComponentLayoutEffectUnmountStopped: markComponentLayoutEffectUnmountStopped,\n      markComponentErrored: markComponentErrored,\n      markComponentSuspended: markComponentSuspended,\n      markLayoutEffectsStarted: markLayoutEffectsStarted,\n      markLayoutEffectsStopped: markLayoutEffectsStopped,\n      markPassiveEffectsStarted: markPassiveEffectsStarted,\n      markPassiveEffectsStopped: markPassiveEffectsStopped,\n      markRenderStarted: markRenderStarted,\n      markRenderYielded: markRenderYielded,\n      markRenderStopped: markRenderStopped,\n      markRenderScheduled: markRenderScheduled,\n      markForceUpdateScheduled: markForceUpdateScheduled,\n      markStateUpdateScheduled: markStateUpdateScheduled\n    },\n    toggleProfilingStatus: toggleProfilingStatus\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/profilingHooks.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/shared/DevToolsComponentStackFrame.js":
/*!**********************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/shared/DevToolsComponentStackFrame.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"describeBuiltInComponentFrame\": () => (/* binding */ describeBuiltInComponentFrame),\n/* harmony export */   \"describeClassComponentFrame\": () => (/* binding */ describeClassComponentFrame),\n/* harmony export */   \"describeDebugInfoFrame\": () => (/* binding */ describeDebugInfoFrame),\n/* harmony export */   \"describeFunctionComponentFrame\": () => (/* binding */ describeFunctionComponentFrame),\n/* harmony export */   \"describeNativeComponentFrame\": () => (/* binding */ describeNativeComponentFrame)\n/* harmony export */ });\n/* harmony import */ var _DevToolsConsolePatching__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DevToolsConsolePatching */ \"../react-devtools-shared/src/backend/shared/DevToolsConsolePatching.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This is a DevTools fork of ReactComponentStackFrame.\n// This fork enables DevTools to use the same \"native\" component stack format,\n// while still maintaining support for multiple renderer versions\n// (which use different values for ReactTypeOfWork).\n// The shared console patching code is DEV-only.\n// We can't use it since DevTools only ships production builds.\n\nvar prefix;\nfunction describeBuiltInComponentFrame(name) {\n  if (prefix === undefined) {\n    // Extract the VM specific prefix used by each line.\n    try {\n      throw Error();\n    } catch (x) {\n      var match = x.stack.trim().match(/\\n( *(at )?)/);\n      prefix = match && match[1] || '';\n    }\n  }\n\n  var suffix = '';\n\n  if (true) {\n    suffix = ' (<anonymous>)';\n  } else {} // We use the prefix to ensure our stacks line up with native stack frames.\n  // We use a suffix to ensure it gets parsed natively.\n\n\n  return '\\n' + prefix + name + suffix;\n}\nfunction describeDebugInfoFrame(name, env) {\n  return describeBuiltInComponentFrame(name + (env ? ' [' + env + ']' : ''));\n}\nvar reentry = false;\nvar componentFrameCache;\n\nif (true) {\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct, currentDispatcherRef) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  if (true) {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  reentry = true; // Override the dispatcher so effects scheduled by this shallow render are thrown away.\n  //\n  // Note that unlike the code this was forked from (in ReactComponentStackFrame)\n  // DevTools should override the dispatcher even when DevTools is compiled in production mode,\n  // because the app itself may be in development mode and log errors/warnings.\n\n  var previousDispatcher = currentDispatcherRef.H;\n  currentDispatcherRef.H = null;\n  (0,_DevToolsConsolePatching__WEBPACK_IMPORTED_MODULE_0__.disableLogs)();\n\n  try {\n    // NOTE: keep in sync with the implementation in ReactComponentStackFrame\n\n    /**\n     * Finding a common stack frame between sample and control errors can be\n     * tricky given the different types and levels of stack trace truncation from\n     * different JS VMs. So instead we'll attempt to control what that common\n     * frame should be through this object method:\n     * Having both the sample and control errors be in the function under the\n     * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n     * `displayName` properties of the function ensures that a stack\n     * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n     * it for both control and sample stacks.\n     */\n    var RunInRootFrame = {\n      DetermineComponentFrameRoot: function DetermineComponentFrameRoot() {\n        var control;\n\n        try {\n          // This should throw.\n          if (construct) {\n            // Something should be setting the props in the constructor.\n            var Fake = function Fake() {\n              throw Error();\n            }; // $FlowFixMe[prop-missing]\n\n\n            Object.defineProperty(Fake.prototype, 'props', {\n              set: function set() {\n                // We use a throwing setter instead of frozen or non-writable props\n                // because that won't throw in a non-strict mode function.\n                throw Error();\n              }\n            });\n\n            if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === 'object' && Reflect.construct) {\n              // We construct a different control for this case to include any extra\n              // frames added by the construct call.\n              try {\n                Reflect.construct(Fake, []);\n              } catch (x) {\n                control = x;\n              }\n\n              Reflect.construct(fn, [], Fake);\n            } else {\n              try {\n                Fake.call();\n              } catch (x) {\n                control = x;\n              } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n              fn.call(Fake.prototype);\n            }\n          } else {\n            try {\n              throw Error();\n            } catch (x) {\n              control = x;\n            } // TODO(luna): This will currently only throw if the function component\n            // tries to access React/ReactDOM/props. We should probably make this throw\n            // in simple components too\n\n\n            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n            // component, which we don't yet support. Attach a noop catch handler to\n            // silence the error.\n            // TODO: Implement component stacks for async client components?\n\n            if (maybePromise && typeof maybePromise.catch === 'function') {\n              maybePromise.catch(function () {});\n            }\n          }\n        } catch (sample) {\n          // This is inlined manually because closure doesn't do it for us.\n          if (sample && control && typeof sample.stack === 'string') {\n            return [sample.stack, control.stack];\n          }\n        }\n\n        return [null, null];\n      }\n    }; // $FlowFixMe[prop-missing]\n\n    RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n    var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n    if (namePropDescriptor && namePropDescriptor.configurable) {\n      // V8 utilizes a function's `name` property when generating a stack trace.\n      Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n      // is set to `false`.\n      // $FlowFixMe[cannot-write]\n      'name', {\n        value: 'DetermineComponentFrameRoot'\n      });\n    }\n\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        _RunInRootFrame$Deter2 = _slicedToArray(_RunInRootFrame$Deter, 2),\n        sampleStack = _RunInRootFrame$Deter2[0],\n        controlStack = _RunInRootFrame$Deter2[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    Error.prepareStackTrace = previousPrepareStackTrace;\n    currentDispatcherRef.H = previousDispatcher;\n    (0,_DevToolsConsolePatching__WEBPACK_IMPORTED_MODULE_0__.reenableLogs)();\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  if (true) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeClassComponentFrame(ctor, currentDispatcherRef) {\n  return describeNativeComponentFrame(ctor, true, currentDispatcherRef);\n}\nfunction describeFunctionComponentFrame(fn, currentDispatcherRef) {\n  return describeNativeComponentFrame(fn, false, currentDispatcherRef);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/shared/DevToolsComponentStackFrame.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/shared/DevToolsConsolePatching.js":
/*!******************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/shared/DevToolsConsolePatching.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"disableLogs\": () => (/* binding */ disableLogs),\n/* harmony export */   \"reenableLogs\": () => (/* binding */ reenableLogs)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This is a DevTools fork of shared/ConsolePatchingDev.\n// The shared console patching code is DEV-only.\n// We can't use it since DevTools only ships production builds.\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  if (disabledDepth === 0) {\n    prevLog = console.log;\n    prevInfo = console.info;\n    prevWarn = console.warn;\n    prevError = console.error;\n    prevGroup = console.group;\n    prevGroupCollapsed = console.groupCollapsed;\n    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n    var props = {\n      configurable: true,\n      enumerable: true,\n      value: disabledLog,\n      writable: true\n    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n    Object.defineProperties(console, {\n      info: props,\n      log: props,\n      warn: props,\n      error: props,\n      group: props,\n      groupCollapsed: props,\n      groupEnd: props\n    });\n    /* eslint-enable react-internal/no-production-logging */\n  }\n\n  disabledDepth++;\n}\nfunction reenableLogs() {\n  disabledDepth--;\n\n  if (disabledDepth === 0) {\n    var props = {\n      configurable: true,\n      enumerable: true,\n      writable: true\n    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n    Object.defineProperties(console, {\n      log: _objectSpread(_objectSpread({}, props), {}, {\n        value: prevLog\n      }),\n      info: _objectSpread(_objectSpread({}, props), {}, {\n        value: prevInfo\n      }),\n      warn: _objectSpread(_objectSpread({}, props), {}, {\n        value: prevWarn\n      }),\n      error: _objectSpread(_objectSpread({}, props), {}, {\n        value: prevError\n      }),\n      group: _objectSpread(_objectSpread({}, props), {}, {\n        value: prevGroup\n      }),\n      groupCollapsed: _objectSpread(_objectSpread({}, props), {}, {\n        value: prevGroupCollapsed\n      }),\n      groupEnd: _objectSpread(_objectSpread({}, props), {}, {\n        value: prevGroupEnd\n      })\n    });\n    /* eslint-enable react-internal/no-production-logging */\n  }\n\n  if (disabledDepth < 0) {\n    console.error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3NoYXJlZC9EZXZUb29sc0NvbnNvbGVQYXRjaGluZy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOzs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTs7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7O0FBTUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFQQTtBQVNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUlBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvc2hhcmVkL0RldlRvb2xzQ29uc29sZVBhdGNoaW5nLmpzP2MyM2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuLy8gVGhpcyBpcyBhIERldlRvb2xzIGZvcmsgb2Ygc2hhcmVkL0NvbnNvbGVQYXRjaGluZ0Rldi5cbi8vIFRoZSBzaGFyZWQgY29uc29sZSBwYXRjaGluZyBjb2RlIGlzIERFVi1vbmx5LlxuLy8gV2UgY2FuJ3QgdXNlIGl0IHNpbmNlIERldlRvb2xzIG9ubHkgc2hpcHMgcHJvZHVjdGlvbiBidWlsZHMuXG5cbi8vIEhlbHBlcnMgdG8gcGF0Y2ggY29uc29sZS5sb2dzIHRvIGF2b2lkIGxvZ2dpbmcgZHVyaW5nIHNpZGUtZWZmZWN0IGZyZWVcbi8vIHJlcGxheWluZyBvbiByZW5kZXIgZnVuY3Rpb24uIFRoaXMgY3VycmVudGx5IG9ubHkgcGF0Y2hlcyB0aGUgb2JqZWN0XG4vLyBsYXppbHkgd2hpY2ggd29uJ3QgY292ZXIgaWYgdGhlIGxvZyBmdW5jdGlvbiB3YXMgZXh0cmFjdGVkIGVhZ2VybHkuXG4vLyBXZSBjb3VsZCBhbHNvIGVhZ2VybHkgcGF0Y2ggdGhlIG1ldGhvZC5cblxubGV0IGRpc2FibGVkRGVwdGggPSAwO1xubGV0IHByZXZMb2c7XG5sZXQgcHJldkluZm87XG5sZXQgcHJldldhcm47XG5sZXQgcHJldkVycm9yO1xubGV0IHByZXZHcm91cDtcbmxldCBwcmV2R3JvdXBDb2xsYXBzZWQ7XG5sZXQgcHJldkdyb3VwRW5kO1xuXG5mdW5jdGlvbiBkaXNhYmxlZExvZygpIHt9XG5kaXNhYmxlZExvZy5fX3JlYWN0RGlzYWJsZWRMb2cgPSB0cnVlO1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZUxvZ3MoKTogdm9pZCB7XG4gIGlmIChkaXNhYmxlZERlcHRoID09PSAwKSB7XG4gICAgcHJldkxvZyA9IGNvbnNvbGUubG9nO1xuICAgIHByZXZJbmZvID0gY29uc29sZS5pbmZvO1xuICAgIHByZXZXYXJuID0gY29uc29sZS53YXJuO1xuICAgIHByZXZFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG4gICAgcHJldkdyb3VwID0gY29uc29sZS5ncm91cDtcbiAgICBwcmV2R3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkO1xuICAgIHByZXZHcm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQ7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xOTA5OVxuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBkaXNhYmxlZExvZyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIH07XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdIEZsb3cgdGhpbmtzIGNvbnNvbGUgaXMgaW1tdXRhYmxlLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHtcbiAgICAgIGluZm86IHByb3BzLFxuICAgICAgbG9nOiBwcm9wcyxcbiAgICAgIHdhcm46IHByb3BzLFxuICAgICAgZXJyb3I6IHByb3BzLFxuICAgICAgZ3JvdXA6IHByb3BzLFxuICAgICAgZ3JvdXBDb2xsYXBzZWQ6IHByb3BzLFxuICAgICAgZ3JvdXBFbmQ6IHByb3BzLFxuICAgIH0pO1xuICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gIH1cbiAgZGlzYWJsZWREZXB0aCsrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVlbmFibGVMb2dzKCk6IHZvaWQge1xuICBkaXNhYmxlZERlcHRoLS07XG4gIGlmIChkaXNhYmxlZERlcHRoID09PSAwKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgfTtcbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV0gRmxvdyB0aGlua3MgY29uc29sZSBpcyBpbW11dGFibGUuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY29uc29sZSwge1xuICAgICAgbG9nOiB7Li4ucHJvcHMsIHZhbHVlOiBwcmV2TG9nfSxcbiAgICAgIGluZm86IHsuLi5wcm9wcywgdmFsdWU6IHByZXZJbmZvfSxcbiAgICAgIHdhcm46IHsuLi5wcm9wcywgdmFsdWU6IHByZXZXYXJufSxcbiAgICAgIGVycm9yOiB7Li4ucHJvcHMsIHZhbHVlOiBwcmV2RXJyb3J9LFxuICAgICAgZ3JvdXA6IHsuLi5wcm9wcywgdmFsdWU6IHByZXZHcm91cH0sXG4gICAgICBncm91cENvbGxhcHNlZDogey4uLnByb3BzLCB2YWx1ZTogcHJldkdyb3VwQ29sbGFwc2VkfSxcbiAgICAgIGdyb3VwRW5kOiB7Li4ucHJvcHMsIHZhbHVlOiBwcmV2R3JvdXBFbmR9LFxuICAgIH0pO1xuICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gIH1cbiAgaWYgKGRpc2FibGVkRGVwdGggPCAwKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgICdkaXNhYmxlZERlcHRoIGZlbGwgYmVsb3cgemVyby4gJyArXG4gICAgICAgICdUaGlzIGlzIGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLFxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/shared/DevToolsConsolePatching.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/shared/DevToolsOwnerStack.js":
/*!*************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/shared/DevToolsOwnerStack.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"formatOwnerStack\": () => (/* binding */ formatOwnerStack)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This is a DevTools fork of shared/ReactOwnerStackFrames.\nfunction formatOwnerStack(error) {\n  var prevPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var stack = error.stack;\n  Error.prepareStackTrace = prevPrepareStackTrace;\n\n  if (stack.startsWith('Error: react-stack-top-frame\\n')) {\n    // V8's default formatting prefixes with the error message which we\n    // don't want/need.\n    stack = stack.slice(29);\n  }\n\n  var idx = stack.indexOf('\\n');\n\n  if (idx !== -1) {\n    // Pop the JSX frame.\n    stack = stack.slice(idx + 1);\n  }\n\n  idx = stack.indexOf('react-stack-bottom-frame');\n\n  if (idx !== -1) {\n    idx = stack.lastIndexOf('\\n', idx);\n  }\n\n  if (idx !== -1) {\n    // Cut off everything after the bottom frame since it'll be internals.\n    stack = stack.slice(0, idx);\n  } else {\n    // We didn't find any internal callsite out to user space.\n    // This means that this was called outside an owner or the owner is fully internal.\n    // To keep things light we exclude the entire trace in this case.\n    return '';\n  }\n\n  return stack;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3NoYXJlZC9EZXZUb29sc093bmVyU3RhY2suanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7OztBQVNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvc2hhcmVkL0RldlRvb2xzT3duZXJTdGFjay5qcz9iMDBlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8vIFRoaXMgaXMgYSBEZXZUb29scyBmb3JrIG9mIHNoYXJlZC9SZWFjdE93bmVyU3RhY2tGcmFtZXMuXG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRPd25lclN0YWNrKGVycm9yOiBFcnJvcik6IHN0cmluZyB7XG4gIGNvbnN0IHByZXZQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXSBJdCBkb2VzIGFjY2VwdCB1bmRlZmluZWQuXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gdW5kZWZpbmVkO1xuICBsZXQgc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmV2UHJlcGFyZVN0YWNrVHJhY2U7XG4gIGlmIChzdGFjay5zdGFydHNXaXRoKCdFcnJvcjogcmVhY3Qtc3RhY2stdG9wLWZyYW1lXFxuJykpIHtcbiAgICAvLyBWOCdzIGRlZmF1bHQgZm9ybWF0dGluZyBwcmVmaXhlcyB3aXRoIHRoZSBlcnJvciBtZXNzYWdlIHdoaWNoIHdlXG4gICAgLy8gZG9uJ3Qgd2FudC9uZWVkLlxuICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMjkpO1xuICB9XG4gIGxldCBpZHggPSBzdGFjay5pbmRleE9mKCdcXG4nKTtcbiAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAvLyBQb3AgdGhlIEpTWCBmcmFtZS5cbiAgICBzdGFjayA9IHN0YWNrLnNsaWNlKGlkeCArIDEpO1xuICB9XG4gIGlkeCA9IHN0YWNrLmluZGV4T2YoJ3JlYWN0LXN0YWNrLWJvdHRvbS1mcmFtZScpO1xuICBpZiAoaWR4ICE9PSAtMSkge1xuICAgIGlkeCA9IHN0YWNrLmxhc3RJbmRleE9mKCdcXG4nLCBpZHgpO1xuICB9XG4gIGlmIChpZHggIT09IC0xKSB7XG4gICAgLy8gQ3V0IG9mZiBldmVyeXRoaW5nIGFmdGVyIHRoZSBib3R0b20gZnJhbWUgc2luY2UgaXQnbGwgYmUgaW50ZXJuYWxzLlxuICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMCwgaWR4KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBkaWRuJ3QgZmluZCBhbnkgaW50ZXJuYWwgY2FsbHNpdGUgb3V0IHRvIHVzZXIgc3BhY2UuXG4gICAgLy8gVGhpcyBtZWFucyB0aGF0IHRoaXMgd2FzIGNhbGxlZCBvdXRzaWRlIGFuIG93bmVyIG9yIHRoZSBvd25lciBpcyBmdWxseSBpbnRlcm5hbC5cbiAgICAvLyBUbyBrZWVwIHRoaW5ncyBsaWdodCB3ZSBleGNsdWRlIHRoZSBlbnRpcmUgdHJhY2UgaW4gdGhpcyBjYXNlLlxuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gc3RhY2s7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/shared/DevToolsOwnerStack.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/shared/DevToolsServerComponentLogs.js":
/*!**********************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/shared/DevToolsServerComponentLogs.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"componentInfoToComponentLogsMap\": () => (/* binding */ componentInfoToComponentLogsMap)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This keeps track of Server Component logs which may come from.\n// This is in a shared module because Server Component logs don't come from a specific renderer\n// but can become associated with a Virtual Instance of any renderer.\n// This keeps it around as long as the ComponentInfo is alive which\n// lets the Fiber get reparented/remounted and still observe the previous errors/warnings.\n// Unless we explicitly clear the logs from a Fiber.\nvar componentInfoToComponentLogsMap = new WeakMap();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3NoYXJlZC9EZXZUb29sc1NlcnZlckNvbXBvbmVudExvZ3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vUmVhY3REZXZUb29sc0JhY2tlbmQvLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3NoYXJlZC9EZXZUb29sc1NlcnZlckNvbXBvbmVudExvZ3MuanM/MDNhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vLyBUaGlzIGtlZXBzIHRyYWNrIG9mIFNlcnZlciBDb21wb25lbnQgbG9ncyB3aGljaCBtYXkgY29tZSBmcm9tLlxuLy8gVGhpcyBpcyBpbiBhIHNoYXJlZCBtb2R1bGUgYmVjYXVzZSBTZXJ2ZXIgQ29tcG9uZW50IGxvZ3MgZG9uJ3QgY29tZSBmcm9tIGEgc3BlY2lmaWMgcmVuZGVyZXJcbi8vIGJ1dCBjYW4gYmVjb21lIGFzc29jaWF0ZWQgd2l0aCBhIFZpcnR1YWwgSW5zdGFuY2Ugb2YgYW55IHJlbmRlcmVyLlxuXG5pbXBvcnQgdHlwZSB7UmVhY3RDb21wb25lbnRJbmZvfSBmcm9tICdzaGFyZWQvUmVhY3RUeXBlcyc7XG5cbnR5cGUgQ29tcG9uZW50TG9ncyA9IHtcbiAgZXJyb3JzOiBNYXA8c3RyaW5nLCBudW1iZXI+LFxuICBlcnJvcnNDb3VudDogbnVtYmVyLFxuICB3YXJuaW5nczogTWFwPHN0cmluZywgbnVtYmVyPixcbiAgd2FybmluZ3NDb3VudDogbnVtYmVyLFxufTtcblxuLy8gVGhpcyBrZWVwcyBpdCBhcm91bmQgYXMgbG9uZyBhcyB0aGUgQ29tcG9uZW50SW5mbyBpcyBhbGl2ZSB3aGljaFxuLy8gbGV0cyB0aGUgRmliZXIgZ2V0IHJlcGFyZW50ZWQvcmVtb3VudGVkIGFuZCBzdGlsbCBvYnNlcnZlIHRoZSBwcmV2aW91cyBlcnJvcnMvd2FybmluZ3MuXG4vLyBVbmxlc3Mgd2UgZXhwbGljaXRseSBjbGVhciB0aGUgbG9ncyBmcm9tIGEgRmliZXIuXG5leHBvcnQgY29uc3QgY29tcG9uZW50SW5mb1RvQ29tcG9uZW50TG9nc01hcDogV2Vha01hcDxcbiAgUmVhY3RDb21wb25lbnRJbmZvLFxuICBDb21wb25lbnRMb2dzLFxuPiA9IG5ldyBXZWFrTWFwKCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/shared/DevToolsServerComponentLogs.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/shared/ReactSymbols.js":
/*!*******************************************************************!*\
  !*** ../react-devtools-shared/src/backend/shared/ReactSymbols.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONCURRENT_MODE_NUMBER\": () => (/* binding */ CONCURRENT_MODE_NUMBER),\n/* harmony export */   \"CONCURRENT_MODE_SYMBOL_STRING\": () => (/* binding */ CONCURRENT_MODE_SYMBOL_STRING),\n/* harmony export */   \"CONSUMER_SYMBOL_STRING\": () => (/* binding */ CONSUMER_SYMBOL_STRING),\n/* harmony export */   \"CONTEXT_NUMBER\": () => (/* binding */ CONTEXT_NUMBER),\n/* harmony export */   \"CONTEXT_SYMBOL_STRING\": () => (/* binding */ CONTEXT_SYMBOL_STRING),\n/* harmony export */   \"DEBUG_TRACING_MODE_NUMBER\": () => (/* binding */ DEBUG_TRACING_MODE_NUMBER),\n/* harmony export */   \"DEBUG_TRACING_MODE_SYMBOL_STRING\": () => (/* binding */ DEBUG_TRACING_MODE_SYMBOL_STRING),\n/* harmony export */   \"DEPRECATED_ASYNC_MODE_SYMBOL_STRING\": () => (/* binding */ DEPRECATED_ASYNC_MODE_SYMBOL_STRING),\n/* harmony export */   \"ELEMENT_SYMBOL_STRING\": () => (/* binding */ ELEMENT_SYMBOL_STRING),\n/* harmony export */   \"FORWARD_REF_NUMBER\": () => (/* binding */ FORWARD_REF_NUMBER),\n/* harmony export */   \"FORWARD_REF_SYMBOL_STRING\": () => (/* binding */ FORWARD_REF_SYMBOL_STRING),\n/* harmony export */   \"FRAGMENT_NUMBER\": () => (/* binding */ FRAGMENT_NUMBER),\n/* harmony export */   \"FRAGMENT_SYMBOL_STRING\": () => (/* binding */ FRAGMENT_SYMBOL_STRING),\n/* harmony export */   \"LAZY_NUMBER\": () => (/* binding */ LAZY_NUMBER),\n/* harmony export */   \"LAZY_SYMBOL_STRING\": () => (/* binding */ LAZY_SYMBOL_STRING),\n/* harmony export */   \"LEGACY_ELEMENT_NUMBER\": () => (/* binding */ LEGACY_ELEMENT_NUMBER),\n/* harmony export */   \"LEGACY_ELEMENT_SYMBOL_STRING\": () => (/* binding */ LEGACY_ELEMENT_SYMBOL_STRING),\n/* harmony export */   \"MEMO_NUMBER\": () => (/* binding */ MEMO_NUMBER),\n/* harmony export */   \"MEMO_SYMBOL_STRING\": () => (/* binding */ MEMO_SYMBOL_STRING),\n/* harmony export */   \"PORTAL_NUMBER\": () => (/* binding */ PORTAL_NUMBER),\n/* harmony export */   \"PORTAL_SYMBOL_STRING\": () => (/* binding */ PORTAL_SYMBOL_STRING),\n/* harmony export */   \"PROFILER_NUMBER\": () => (/* binding */ PROFILER_NUMBER),\n/* harmony export */   \"PROFILER_SYMBOL_STRING\": () => (/* binding */ PROFILER_SYMBOL_STRING),\n/* harmony export */   \"PROVIDER_NUMBER\": () => (/* binding */ PROVIDER_NUMBER),\n/* harmony export */   \"PROVIDER_SYMBOL_STRING\": () => (/* binding */ PROVIDER_SYMBOL_STRING),\n/* harmony export */   \"REACT_MEMO_CACHE_SENTINEL\": () => (/* binding */ REACT_MEMO_CACHE_SENTINEL),\n/* harmony export */   \"SCOPE_NUMBER\": () => (/* binding */ SCOPE_NUMBER),\n/* harmony export */   \"SCOPE_SYMBOL_STRING\": () => (/* binding */ SCOPE_SYMBOL_STRING),\n/* harmony export */   \"SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED_SYMBOL_STRING\": () => (/* binding */ SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED_SYMBOL_STRING),\n/* harmony export */   \"SERVER_CONTEXT_SYMBOL_STRING\": () => (/* binding */ SERVER_CONTEXT_SYMBOL_STRING),\n/* harmony export */   \"STRICT_MODE_NUMBER\": () => (/* binding */ STRICT_MODE_NUMBER),\n/* harmony export */   \"STRICT_MODE_SYMBOL_STRING\": () => (/* binding */ STRICT_MODE_SYMBOL_STRING),\n/* harmony export */   \"SUSPENSE_LIST_NUMBER\": () => (/* binding */ SUSPENSE_LIST_NUMBER),\n/* harmony export */   \"SUSPENSE_LIST_SYMBOL_STRING\": () => (/* binding */ SUSPENSE_LIST_SYMBOL_STRING),\n/* harmony export */   \"SUSPENSE_NUMBER\": () => (/* binding */ SUSPENSE_NUMBER),\n/* harmony export */   \"SUSPENSE_SYMBOL_STRING\": () => (/* binding */ SUSPENSE_SYMBOL_STRING)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This list should be kept updated to reflect additions to 'shared/ReactSymbols'.\n// DevTools can't import symbols from 'shared/ReactSymbols' directly for two reasons:\n// 1. DevTools requires symbols which may have been deleted in more recent versions (e.g. concurrent mode)\n// 2. DevTools must support both Symbol and numeric forms of each symbol;\n//    Since e.g. standalone DevTools runs in a separate process, it can't rely on its own ES capabilities.\nvar CONCURRENT_MODE_NUMBER = 0xeacf;\nvar CONCURRENT_MODE_SYMBOL_STRING = 'Symbol(react.concurrent_mode)';\nvar CONTEXT_NUMBER = 0xeace;\nvar CONTEXT_SYMBOL_STRING = 'Symbol(react.context)';\nvar SERVER_CONTEXT_SYMBOL_STRING = 'Symbol(react.server_context)';\nvar DEPRECATED_ASYNC_MODE_SYMBOL_STRING = 'Symbol(react.async_mode)';\nvar ELEMENT_SYMBOL_STRING = 'Symbol(react.transitional.element)';\nvar LEGACY_ELEMENT_NUMBER = 0xeac7;\nvar LEGACY_ELEMENT_SYMBOL_STRING = 'Symbol(react.element)';\nvar DEBUG_TRACING_MODE_NUMBER = 0xeae1;\nvar DEBUG_TRACING_MODE_SYMBOL_STRING = 'Symbol(react.debug_trace_mode)';\nvar FORWARD_REF_NUMBER = 0xead0;\nvar FORWARD_REF_SYMBOL_STRING = 'Symbol(react.forward_ref)';\nvar FRAGMENT_NUMBER = 0xeacb;\nvar FRAGMENT_SYMBOL_STRING = 'Symbol(react.fragment)';\nvar LAZY_NUMBER = 0xead4;\nvar LAZY_SYMBOL_STRING = 'Symbol(react.lazy)';\nvar MEMO_NUMBER = 0xead3;\nvar MEMO_SYMBOL_STRING = 'Symbol(react.memo)';\nvar PORTAL_NUMBER = 0xeaca;\nvar PORTAL_SYMBOL_STRING = 'Symbol(react.portal)';\nvar PROFILER_NUMBER = 0xead2;\nvar PROFILER_SYMBOL_STRING = 'Symbol(react.profiler)';\nvar PROVIDER_NUMBER = 0xeacd;\nvar PROVIDER_SYMBOL_STRING = 'Symbol(react.provider)';\nvar CONSUMER_SYMBOL_STRING = 'Symbol(react.consumer)';\nvar SCOPE_NUMBER = 0xead7;\nvar SCOPE_SYMBOL_STRING = 'Symbol(react.scope)';\nvar STRICT_MODE_NUMBER = 0xeacc;\nvar STRICT_MODE_SYMBOL_STRING = 'Symbol(react.strict_mode)';\nvar SUSPENSE_NUMBER = 0xead1;\nvar SUSPENSE_SYMBOL_STRING = 'Symbol(react.suspense)';\nvar SUSPENSE_LIST_NUMBER = 0xead8;\nvar SUSPENSE_LIST_SYMBOL_STRING = 'Symbol(react.suspense_list)';\nvar SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED_SYMBOL_STRING = 'Symbol(react.server_context.defaultValue)';\nvar REACT_MEMO_CACHE_SENTINEL = Symbol.for('react.memo_cache_sentinel');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3NoYXJlZC9SZWFjdFN5bWJvbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9zaGFyZWQvUmVhY3RTeW1ib2xzLmpzPzBlN2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuLy8gVGhpcyBsaXN0IHNob3VsZCBiZSBrZXB0IHVwZGF0ZWQgdG8gcmVmbGVjdCBhZGRpdGlvbnMgdG8gJ3NoYXJlZC9SZWFjdFN5bWJvbHMnLlxuLy8gRGV2VG9vbHMgY2FuJ3QgaW1wb3J0IHN5bWJvbHMgZnJvbSAnc2hhcmVkL1JlYWN0U3ltYm9scycgZGlyZWN0bHkgZm9yIHR3byByZWFzb25zOlxuLy8gMS4gRGV2VG9vbHMgcmVxdWlyZXMgc3ltYm9scyB3aGljaCBtYXkgaGF2ZSBiZWVuIGRlbGV0ZWQgaW4gbW9yZSByZWNlbnQgdmVyc2lvbnMgKGUuZy4gY29uY3VycmVudCBtb2RlKVxuLy8gMi4gRGV2VG9vbHMgbXVzdCBzdXBwb3J0IGJvdGggU3ltYm9sIGFuZCBudW1lcmljIGZvcm1zIG9mIGVhY2ggc3ltYm9sO1xuLy8gICAgU2luY2UgZS5nLiBzdGFuZGFsb25lIERldlRvb2xzIHJ1bnMgaW4gYSBzZXBhcmF0ZSBwcm9jZXNzLCBpdCBjYW4ndCByZWx5IG9uIGl0cyBvd24gRVMgY2FwYWJpbGl0aWVzLlxuXG5leHBvcnQgY29uc3QgQ09OQ1VSUkVOVF9NT0RFX05VTUJFUiA9IDB4ZWFjZjtcbmV4cG9ydCBjb25zdCBDT05DVVJSRU5UX01PREVfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3QuY29uY3VycmVudF9tb2RlKSc7XG5cbmV4cG9ydCBjb25zdCBDT05URVhUX05VTUJFUiA9IDB4ZWFjZTtcbmV4cG9ydCBjb25zdCBDT05URVhUX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LmNvbnRleHQpJztcblxuZXhwb3J0IGNvbnN0IFNFUlZFUl9DT05URVhUX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LnNlcnZlcl9jb250ZXh0KSc7XG5cbmV4cG9ydCBjb25zdCBERVBSRUNBVEVEX0FTWU5DX01PREVfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3QuYXN5bmNfbW9kZSknO1xuXG5leHBvcnQgY29uc3QgRUxFTUVOVF9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudCknO1xuZXhwb3J0IGNvbnN0IExFR0FDWV9FTEVNRU5UX05VTUJFUiA9IDB4ZWFjNztcbmV4cG9ydCBjb25zdCBMRUdBQ1lfRUxFTUVOVF9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC5lbGVtZW50KSc7XG5cbmV4cG9ydCBjb25zdCBERUJVR19UUkFDSU5HX01PREVfTlVNQkVSID0gMHhlYWUxO1xuZXhwb3J0IGNvbnN0IERFQlVHX1RSQUNJTkdfTU9ERV9TWU1CT0xfU1RSSU5HID1cbiAgJ1N5bWJvbChyZWFjdC5kZWJ1Z190cmFjZV9tb2RlKSc7XG5cbmV4cG9ydCBjb25zdCBGT1JXQVJEX1JFRl9OVU1CRVIgPSAweGVhZDA7XG5leHBvcnQgY29uc3QgRk9SV0FSRF9SRUZfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3QuZm9yd2FyZF9yZWYpJztcblxuZXhwb3J0IGNvbnN0IEZSQUdNRU5UX05VTUJFUiA9IDB4ZWFjYjtcbmV4cG9ydCBjb25zdCBGUkFHTUVOVF9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC5mcmFnbWVudCknO1xuXG5leHBvcnQgY29uc3QgTEFaWV9OVU1CRVIgPSAweGVhZDQ7XG5leHBvcnQgY29uc3QgTEFaWV9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC5sYXp5KSc7XG5cbmV4cG9ydCBjb25zdCBNRU1PX05VTUJFUiA9IDB4ZWFkMztcbmV4cG9ydCBjb25zdCBNRU1PX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0Lm1lbW8pJztcblxuZXhwb3J0IGNvbnN0IFBPUlRBTF9OVU1CRVIgPSAweGVhY2E7XG5leHBvcnQgY29uc3QgUE9SVEFMX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LnBvcnRhbCknO1xuXG5leHBvcnQgY29uc3QgUFJPRklMRVJfTlVNQkVSID0gMHhlYWQyO1xuZXhwb3J0IGNvbnN0IFBST0ZJTEVSX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LnByb2ZpbGVyKSc7XG5cbmV4cG9ydCBjb25zdCBQUk9WSURFUl9OVU1CRVIgPSAweGVhY2Q7XG5leHBvcnQgY29uc3QgUFJPVklERVJfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3QucHJvdmlkZXIpJztcblxuZXhwb3J0IGNvbnN0IENPTlNVTUVSX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LmNvbnN1bWVyKSc7XG5cbmV4cG9ydCBjb25zdCBTQ09QRV9OVU1CRVIgPSAweGVhZDc7XG5leHBvcnQgY29uc3QgU0NPUEVfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3Quc2NvcGUpJztcblxuZXhwb3J0IGNvbnN0IFNUUklDVF9NT0RFX05VTUJFUiA9IDB4ZWFjYztcbmV4cG9ydCBjb25zdCBTVFJJQ1RfTU9ERV9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC5zdHJpY3RfbW9kZSknO1xuXG5leHBvcnQgY29uc3QgU1VTUEVOU0VfTlVNQkVSID0gMHhlYWQxO1xuZXhwb3J0IGNvbnN0IFNVU1BFTlNFX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LnN1c3BlbnNlKSc7XG5cbmV4cG9ydCBjb25zdCBTVVNQRU5TRV9MSVNUX05VTUJFUiA9IDB4ZWFkODtcbmV4cG9ydCBjb25zdCBTVVNQRU5TRV9MSVNUX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LnN1c3BlbnNlX2xpc3QpJztcblxuZXhwb3J0IGNvbnN0IFNFUlZFUl9DT05URVhUX0RFRkFVTFRfVkFMVUVfTk9UX0xPQURFRF9TWU1CT0xfU1RSSU5HID1cbiAgJ1N5bWJvbChyZWFjdC5zZXJ2ZXJfY29udGV4dC5kZWZhdWx0VmFsdWUpJztcblxuZXhwb3J0IGNvbnN0IFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUw6IHN5bWJvbCA9IFN5bWJvbC5mb3IoXG4gICdyZWFjdC5tZW1vX2NhY2hlX3NlbnRpbmVsJyxcbik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/shared/ReactSymbols.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/utils/formatConsoleArguments.js":
/*!****************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/utils/formatConsoleArguments.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ formatConsoleArguments)\n/* harmony export */ });\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// Do not add / import anything to this file.\n// This function could be used from multiple places, including hook.\n// Skips CSS and object arguments, inlines other in the first argument as a template string\nfunction formatConsoleArguments(maybeMessage) {\n  for (var _len = arguments.length, inputArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    inputArgs[_key - 1] = arguments[_key];\n  }\n\n  if (inputArgs.length === 0 || typeof maybeMessage !== 'string') {\n    return [maybeMessage].concat(inputArgs);\n  }\n\n  var args = inputArgs.slice();\n  var template = '';\n  var argumentsPointer = 0;\n\n  for (var i = 0; i < maybeMessage.length; ++i) {\n    var currentChar = maybeMessage[i];\n\n    if (currentChar !== '%') {\n      template += currentChar;\n      continue;\n    }\n\n    var nextChar = maybeMessage[i + 1];\n    ++i; // Only keep CSS and objects, inline other arguments\n\n    switch (nextChar) {\n      case 'c':\n      case 'O':\n      case 'o':\n        {\n          ++argumentsPointer;\n          template += \"%\".concat(nextChar);\n          break;\n        }\n\n      case 'd':\n      case 'i':\n        {\n          var _args$splice = args.splice(argumentsPointer, 1),\n              _args$splice2 = _slicedToArray(_args$splice, 1),\n              arg = _args$splice2[0];\n\n          template += parseInt(arg, 10).toString();\n          break;\n        }\n\n      case 'f':\n        {\n          var _args$splice3 = args.splice(argumentsPointer, 1),\n              _args$splice4 = _slicedToArray(_args$splice3, 1),\n              _arg = _args$splice4[0];\n\n          template += parseFloat(_arg).toString();\n          break;\n        }\n\n      case 's':\n        {\n          var _args$splice5 = args.splice(argumentsPointer, 1),\n              _args$splice6 = _slicedToArray(_args$splice5, 1),\n              _arg2 = _args$splice6[0];\n\n          template += _arg2.toString();\n          break;\n        }\n\n      default:\n        template += \"%\".concat(nextChar);\n    }\n  }\n\n  return [template].concat(_toConsumableArray(args));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3V0aWxzL2Zvcm1hdENvbnNvbGVBcmd1bWVudHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBU0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQURBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUE7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUVBO0FBQ0E7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUVBO0FBQ0E7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQTlCQTtBQWdDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vUmVhY3REZXZUb29sc0JhY2tlbmQvLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3V0aWxzL2Zvcm1hdENvbnNvbGVBcmd1bWVudHMuanM/NTkwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vLyBEbyBub3QgYWRkIC8gaW1wb3J0IGFueXRoaW5nIHRvIHRoaXMgZmlsZS5cbi8vIFRoaXMgZnVuY3Rpb24gY291bGQgYmUgdXNlZCBmcm9tIG11bHRpcGxlIHBsYWNlcywgaW5jbHVkaW5nIGhvb2suXG5cbi8vIFNraXBzIENTUyBhbmQgb2JqZWN0IGFyZ3VtZW50cywgaW5saW5lcyBvdGhlciBpbiB0aGUgZmlyc3QgYXJndW1lbnQgYXMgYSB0ZW1wbGF0ZSBzdHJpbmdcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdENvbnNvbGVBcmd1bWVudHMoXG4gIG1heWJlTWVzc2FnZTogYW55LFxuICAuLi5pbnB1dEFyZ3M6ICRSZWFkT25seUFycmF5PGFueT5cbik6ICRSZWFkT25seUFycmF5PGFueT4ge1xuICBpZiAoaW5wdXRBcmdzLmxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgbWF5YmVNZXNzYWdlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBbbWF5YmVNZXNzYWdlLCAuLi5pbnB1dEFyZ3NdO1xuICB9XG5cbiAgY29uc3QgYXJncyA9IGlucHV0QXJncy5zbGljZSgpO1xuXG4gIGxldCB0ZW1wbGF0ZSA9ICcnO1xuICBsZXQgYXJndW1lbnRzUG9pbnRlciA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF5YmVNZXNzYWdlLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgY3VycmVudENoYXIgPSBtYXliZU1lc3NhZ2VbaV07XG4gICAgaWYgKGN1cnJlbnRDaGFyICE9PSAnJScpIHtcbiAgICAgIHRlbXBsYXRlICs9IGN1cnJlbnRDaGFyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgbmV4dENoYXIgPSBtYXliZU1lc3NhZ2VbaSArIDFdO1xuICAgICsraTtcblxuICAgIC8vIE9ubHkga2VlcCBDU1MgYW5kIG9iamVjdHMsIGlubGluZSBvdGhlciBhcmd1bWVudHNcbiAgICBzd2l0Y2ggKG5leHRDaGFyKSB7XG4gICAgICBjYXNlICdjJzpcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnbyc6IHtcbiAgICAgICAgKythcmd1bWVudHNQb2ludGVyO1xuICAgICAgICB0ZW1wbGF0ZSArPSBgJSR7bmV4dENoYXJ9YDtcblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2QnOlxuICAgICAgY2FzZSAnaSc6IHtcbiAgICAgICAgY29uc3QgW2FyZ10gPSBhcmdzLnNwbGljZShhcmd1bWVudHNQb2ludGVyLCAxKTtcbiAgICAgICAgdGVtcGxhdGUgKz0gcGFyc2VJbnQoYXJnLCAxMCkudG9TdHJpbmcoKTtcblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2YnOiB7XG4gICAgICAgIGNvbnN0IFthcmddID0gYXJncy5zcGxpY2UoYXJndW1lbnRzUG9pbnRlciwgMSk7XG4gICAgICAgIHRlbXBsYXRlICs9IHBhcnNlRmxvYXQoYXJnKS50b1N0cmluZygpO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAncyc6IHtcbiAgICAgICAgY29uc3QgW2FyZ10gPSBhcmdzLnNwbGljZShhcmd1bWVudHNQb2ludGVyLCAxKTtcbiAgICAgICAgdGVtcGxhdGUgKz0gYXJnLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRlbXBsYXRlICs9IGAlJHtuZXh0Q2hhcn1gO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbdGVtcGxhdGUsIC4uLmFyZ3NdO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/utils/formatConsoleArguments.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/utils/formatWithStyles.js":
/*!**********************************************************************!*\
  !*** ../react-devtools-shared/src/backend/utils/formatWithStyles.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ formatWithStyles)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// Do not add / import anything to this file.\n// This function could be used from multiple places, including hook.\n// Formats an array of args with a style for console methods, using\n// the following algorithm:\n//     1. The first param is a string that contains %c\n//          - Bail out and return the args without modifying the styles.\n//            We don't want to affect styles that the developer deliberately set.\n//     2. The first param is a string that doesn't contain %c but contains\n//        string formatting\n//          - [`%c${args[0]}`, style, ...args.slice(1)]\n//          - Note: we assume that the string formatting that the developer uses\n//            is correct.\n//     3. The first param is a string that doesn't contain string formatting\n//        OR is not a string\n//          - Create a formatting string where:\n//                 boolean, string, symbol -> %s\n//                 number -> %f OR %i depending on if it's an int or float\n//                 default -> %o\nfunction formatWithStyles(inputArgs, style) {\n  if (inputArgs === undefined || inputArgs === null || inputArgs.length === 0 || // Matches any of %c but not %%c\n  typeof inputArgs[0] === 'string' && inputArgs[0].match(/([^%]|^)(%c)/g) || style === undefined) {\n    return inputArgs;\n  } // Matches any of %(o|O|d|i|s|f), but not %%(o|O|d|i|s|f)\n\n\n  var REGEXP = /([^%]|^)((%%)*)(%([oOdisf]))/g;\n\n  if (typeof inputArgs[0] === 'string' && inputArgs[0].match(REGEXP)) {\n    return [\"%c\".concat(inputArgs[0]), style].concat(_toConsumableArray(inputArgs.slice(1)));\n  } else {\n    var firstArg = inputArgs.reduce(function (formatStr, elem, i) {\n      if (i > 0) {\n        formatStr += ' ';\n      }\n\n      switch (_typeof(elem)) {\n        case 'string':\n        case 'boolean':\n        case 'symbol':\n          return formatStr += '%s';\n\n        case 'number':\n          var formatting = Number.isInteger(elem) ? '%i' : '%f';\n          return formatStr += formatting;\n\n        default:\n          return formatStr += '%o';\n      }\n    }, '%c');\n    return [firstArg, style].concat(_toConsumableArray(inputArgs));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3V0aWxzL2Zvcm1hdFdpdGhTdHlsZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBU0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUtBO0FBR0E7QUFDQTs7O0FBR0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQVRBO0FBV0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvdXRpbHMvZm9ybWF0V2l0aFN0eWxlcy5qcz85YzBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8vIERvIG5vdCBhZGQgLyBpbXBvcnQgYW55dGhpbmcgdG8gdGhpcyBmaWxlLlxuLy8gVGhpcyBmdW5jdGlvbiBjb3VsZCBiZSB1c2VkIGZyb20gbXVsdGlwbGUgcGxhY2VzLCBpbmNsdWRpbmcgaG9vay5cblxuLy8gRm9ybWF0cyBhbiBhcnJheSBvZiBhcmdzIHdpdGggYSBzdHlsZSBmb3IgY29uc29sZSBtZXRob2RzLCB1c2luZ1xuLy8gdGhlIGZvbGxvd2luZyBhbGdvcml0aG06XG4vLyAgICAgMS4gVGhlIGZpcnN0IHBhcmFtIGlzIGEgc3RyaW5nIHRoYXQgY29udGFpbnMgJWNcbi8vICAgICAgICAgIC0gQmFpbCBvdXQgYW5kIHJldHVybiB0aGUgYXJncyB3aXRob3V0IG1vZGlmeWluZyB0aGUgc3R5bGVzLlxuLy8gICAgICAgICAgICBXZSBkb24ndCB3YW50IHRvIGFmZmVjdCBzdHlsZXMgdGhhdCB0aGUgZGV2ZWxvcGVyIGRlbGliZXJhdGVseSBzZXQuXG4vLyAgICAgMi4gVGhlIGZpcnN0IHBhcmFtIGlzIGEgc3RyaW5nIHRoYXQgZG9lc24ndCBjb250YWluICVjIGJ1dCBjb250YWluc1xuLy8gICAgICAgIHN0cmluZyBmb3JtYXR0aW5nXG4vLyAgICAgICAgICAtIFtgJWMke2FyZ3NbMF19YCwgc3R5bGUsIC4uLmFyZ3Muc2xpY2UoMSldXG4vLyAgICAgICAgICAtIE5vdGU6IHdlIGFzc3VtZSB0aGF0IHRoZSBzdHJpbmcgZm9ybWF0dGluZyB0aGF0IHRoZSBkZXZlbG9wZXIgdXNlc1xuLy8gICAgICAgICAgICBpcyBjb3JyZWN0LlxuLy8gICAgIDMuIFRoZSBmaXJzdCBwYXJhbSBpcyBhIHN0cmluZyB0aGF0IGRvZXNuJ3QgY29udGFpbiBzdHJpbmcgZm9ybWF0dGluZ1xuLy8gICAgICAgIE9SIGlzIG5vdCBhIHN0cmluZ1xuLy8gICAgICAgICAgLSBDcmVhdGUgYSBmb3JtYXR0aW5nIHN0cmluZyB3aGVyZTpcbi8vICAgICAgICAgICAgICAgICBib29sZWFuLCBzdHJpbmcsIHN5bWJvbCAtPiAlc1xuLy8gICAgICAgICAgICAgICAgIG51bWJlciAtPiAlZiBPUiAlaSBkZXBlbmRpbmcgb24gaWYgaXQncyBhbiBpbnQgb3IgZmxvYXRcbi8vICAgICAgICAgICAgICAgICBkZWZhdWx0IC0+ICVvXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRXaXRoU3R5bGVzKFxuICBpbnB1dEFyZ3M6ICRSZWFkT25seUFycmF5PGFueT4sXG4gIHN0eWxlPzogc3RyaW5nLFxuKTogJFJlYWRPbmx5QXJyYXk8YW55PiB7XG4gIGlmIChcbiAgICBpbnB1dEFyZ3MgPT09IHVuZGVmaW5lZCB8fFxuICAgIGlucHV0QXJncyA9PT0gbnVsbCB8fFxuICAgIGlucHV0QXJncy5sZW5ndGggPT09IDAgfHxcbiAgICAvLyBNYXRjaGVzIGFueSBvZiAlYyBidXQgbm90ICUlY1xuICAgICh0eXBlb2YgaW5wdXRBcmdzWzBdID09PSAnc3RyaW5nJyAmJiBpbnB1dEFyZ3NbMF0ubWF0Y2goLyhbXiVdfF4pKCVjKS9nKSkgfHxcbiAgICBzdHlsZSA9PT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiBpbnB1dEFyZ3M7XG4gIH1cblxuICAvLyBNYXRjaGVzIGFueSBvZiAlKG98T3xkfGl8c3xmKSwgYnV0IG5vdCAlJShvfE98ZHxpfHN8ZilcbiAgY29uc3QgUkVHRVhQID0gLyhbXiVdfF4pKCglJSkqKSglKFtvT2Rpc2ZdKSkvZztcbiAgaWYgKHR5cGVvZiBpbnB1dEFyZ3NbMF0gPT09ICdzdHJpbmcnICYmIGlucHV0QXJnc1swXS5tYXRjaChSRUdFWFApKSB7XG4gICAgcmV0dXJuIFtgJWMke2lucHV0QXJnc1swXX1gLCBzdHlsZSwgLi4uaW5wdXRBcmdzLnNsaWNlKDEpXTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBmaXJzdEFyZyA9IGlucHV0QXJncy5yZWR1Y2UoKGZvcm1hdFN0ciwgZWxlbSwgaSkgPT4ge1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGZvcm1hdFN0ciArPSAnICc7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHR5cGVvZiBlbGVtKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgICAgIHJldHVybiAoZm9ybWF0U3RyICs9ICclcycpO1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgIGNvbnN0IGZvcm1hdHRpbmcgPSBOdW1iZXIuaXNJbnRlZ2VyKGVsZW0pID8gJyVpJyA6ICclZic7XG4gICAgICAgICAgcmV0dXJuIChmb3JtYXRTdHIgKz0gZm9ybWF0dGluZyk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIChmb3JtYXRTdHIgKz0gJyVvJyk7XG4gICAgICB9XG4gICAgfSwgJyVjJyk7XG4gICAgcmV0dXJuIFtmaXJzdEFyZywgc3R5bGUsIC4uLmlucHV0QXJnc107XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/utils/formatWithStyles.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/utils/index.js":
/*!***********************************************************!*\
  !*** ../react-devtools-shared/src/backend/utils/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cleanForBridge\": () => (/* binding */ cleanForBridge),\n/* harmony export */   \"copyWithDelete\": () => (/* binding */ copyWithDelete),\n/* harmony export */   \"copyWithRename\": () => (/* binding */ copyWithRename),\n/* harmony export */   \"copyWithSet\": () => (/* binding */ copyWithSet),\n/* harmony export */   \"formatConsoleArguments\": () => (/* reexport safe */ _formatConsoleArguments__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   \"formatConsoleArgumentsToSingleString\": () => (/* binding */ formatConsoleArgumentsToSingleString),\n/* harmony export */   \"formatDurationToMicrosecondsGranularity\": () => (/* binding */ formatDurationToMicrosecondsGranularity),\n/* harmony export */   \"formatWithStyles\": () => (/* reexport safe */ _formatWithStyles__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   \"getEffectDurations\": () => (/* binding */ getEffectDurations),\n/* harmony export */   \"gt\": () => (/* binding */ gt),\n/* harmony export */   \"gte\": () => (/* binding */ gte),\n/* harmony export */   \"hasAssignedBackend\": () => (/* binding */ hasAssignedBackend),\n/* harmony export */   \"isReactNativeEnvironment\": () => (/* binding */ isReactNativeEnvironment),\n/* harmony export */   \"isSynchronousXHRSupported\": () => (/* binding */ isSynchronousXHRSupported),\n/* harmony export */   \"parseSourceFromComponentStack\": () => (/* binding */ parseSourceFromComponentStack),\n/* harmony export */   \"serializeToString\": () => (/* binding */ serializeToString)\n/* harmony export */ });\n/* harmony import */ var compare_versions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! compare-versions */ \"../../node_modules/compare-versions/lib/esm/index.js\");\n/* harmony import */ var react_devtools_shared_src_hydration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/hydration */ \"../react-devtools-shared/src/hydration.js\");\n/* harmony import */ var shared_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/isArray */ \"../shared/isArray.js\");\n/* harmony import */ var _formatWithStyles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatWithStyles */ \"../react-devtools-shared/src/backend/utils/formatWithStyles.js\");\n/* harmony import */ var _formatConsoleArguments__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatConsoleArguments */ \"../react-devtools-shared/src/backend/utils/formatConsoleArguments.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\n // TODO: update this to the first React version that has a corresponding DevTools backend\n\nvar FIRST_DEVTOOLS_BACKEND_LOCKSTEP_VER = '999.9.9';\nfunction hasAssignedBackend(version) {\n  if (version == null || version === '') {\n    return false;\n  }\n\n  return gte(version, FIRST_DEVTOOLS_BACKEND_LOCKSTEP_VER);\n}\nfunction cleanForBridge(data, isPathAllowed) {\n  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  if (data !== null) {\n    var cleanedPaths = [];\n    var unserializablePaths = [];\n    var cleanedData = (0,react_devtools_shared_src_hydration__WEBPACK_IMPORTED_MODULE_0__.dehydrate)(data, cleanedPaths, unserializablePaths, path, isPathAllowed);\n    return {\n      data: cleanedData,\n      cleaned: cleanedPaths,\n      unserializable: unserializablePaths\n    };\n  } else {\n    return null;\n  }\n}\nfunction copyWithDelete(obj, path) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var key = path[index];\n  var updated = (0,shared_isArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(obj) ? obj.slice() : _objectSpread({}, obj);\n\n  if (index + 1 === path.length) {\n    if ((0,shared_isArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(updated)) {\n      updated.splice(key, 1);\n    } else {\n      delete updated[key];\n    }\n  } else {\n    // $FlowFixMe[incompatible-use] number or string is fine here\n    updated[key] = copyWithDelete(obj[key], path, index + 1);\n  }\n\n  return updated;\n} // This function expects paths to be the same except for the final value.\n// e.g. ['path', 'to', 'foo'] and ['path', 'to', 'bar']\n\nfunction copyWithRename(obj, oldPath, newPath) {\n  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var oldKey = oldPath[index];\n  var updated = (0,shared_isArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(obj) ? obj.slice() : _objectSpread({}, obj);\n\n  if (index + 1 === oldPath.length) {\n    var newKey = newPath[index]; // $FlowFixMe[incompatible-use] number or string is fine here\n\n    updated[newKey] = updated[oldKey];\n\n    if ((0,shared_isArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(updated)) {\n      updated.splice(oldKey, 1);\n    } else {\n      delete updated[oldKey];\n    }\n  } else {\n    // $FlowFixMe[incompatible-use] number or string is fine here\n    updated[oldKey] = copyWithRename(obj[oldKey], oldPath, newPath, index + 1);\n  }\n\n  return updated;\n}\nfunction copyWithSet(obj, path, value) {\n  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (index >= path.length) {\n    return value;\n  }\n\n  var key = path[index];\n  var updated = (0,shared_isArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(obj) ? obj.slice() : _objectSpread({}, obj); // $FlowFixMe[incompatible-use] number or string is fine here\n\n  updated[key] = copyWithSet(obj[key], path, value, index + 1);\n  return updated;\n}\nfunction getEffectDurations(root) {\n  // Profiling durations are only available for certain builds.\n  // If available, they'll be stored on the HostRoot.\n  var effectDuration = null;\n  var passiveEffectDuration = null;\n  var hostRoot = root.current;\n\n  if (hostRoot != null) {\n    var stateNode = hostRoot.stateNode;\n\n    if (stateNode != null) {\n      effectDuration = stateNode.effectDuration != null ? stateNode.effectDuration : null;\n      passiveEffectDuration = stateNode.passiveEffectDuration != null ? stateNode.passiveEffectDuration : null;\n    }\n  }\n\n  return {\n    effectDuration: effectDuration,\n    passiveEffectDuration: passiveEffectDuration\n  };\n}\nfunction serializeToString(data) {\n  if (data === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof data === 'function') {\n    return data.toString();\n  }\n\n  var cache = new Set(); // Use a custom replacer function to protect against circular references.\n\n  return JSON.stringify(data, function (key, value) {\n    if (_typeof(value) === 'object' && value !== null) {\n      if (cache.has(value)) {\n        return;\n      }\n\n      cache.add(value);\n    }\n\n    if (typeof value === 'bigint') {\n      return value.toString() + 'n';\n    }\n\n    return value;\n  }, 2);\n}\n\nfunction safeToString(val) {\n  try {\n    return String(val);\n  } catch (err) {\n    if (_typeof(val) === 'object') {\n      // An object with no prototype and no `[Symbol.toPrimitive]()`, `toString()`, and `valueOf()` methods would throw.\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion\n      return '[object Object]';\n    }\n\n    throw err;\n  }\n} // based on https://github.com/tmpfs/format-util/blob/0e62d430efb0a1c51448709abd3e2406c14d8401/format.js#L1\n// based on https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions\n// Implements s, d, i and f placeholders\n\n\nfunction formatConsoleArgumentsToSingleString(maybeMessage) {\n  for (var _len = arguments.length, inputArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    inputArgs[_key - 1] = arguments[_key];\n  }\n\n  var args = inputArgs.slice();\n  var formatted = safeToString(maybeMessage); // If the first argument is a string, check for substitutions.\n\n  if (typeof maybeMessage === 'string') {\n    if (args.length) {\n      var REGEXP = /(%?)(%([jds]))/g; // $FlowFixMe[incompatible-call]\n\n      formatted = formatted.replace(REGEXP, function (match, escaped, ptn, flag) {\n        var arg = args.shift();\n\n        switch (flag) {\n          case 's':\n            // $FlowFixMe[unsafe-addition]\n            arg += '';\n            break;\n\n          case 'd':\n          case 'i':\n            arg = parseInt(arg, 10).toString();\n            break;\n\n          case 'f':\n            arg = parseFloat(arg).toString();\n            break;\n        }\n\n        if (!escaped) {\n          return arg;\n        }\n\n        args.unshift(arg);\n        return match;\n      });\n    }\n  } // Arguments that remain after formatting.\n\n\n  if (args.length) {\n    for (var i = 0; i < args.length; i++) {\n      formatted += ' ' + safeToString(args[i]);\n    }\n  } // Update escaped %% values.\n\n\n  formatted = formatted.replace(/%{2,2}/g, '%');\n  return String(formatted);\n}\nfunction isSynchronousXHRSupported() {\n  return !!(window.document && window.document.featurePolicy && window.document.featurePolicy.allowsFeature('sync-xhr'));\n}\nfunction gt() {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return (0,compare_versions__WEBPACK_IMPORTED_MODULE_4__.compareVersions)(a, b) === 1;\n}\nfunction gte() {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return (0,compare_versions__WEBPACK_IMPORTED_MODULE_4__.compareVersions)(a, b) > -1;\n}\nvar isReactNativeEnvironment = function isReactNativeEnvironment() {\n  // We've been relying on this for such a long time\n  // We should probably define the client for DevTools on the backend side and share it with the frontend\n  return window.document == null;\n};\n\nfunction extractLocation(url) {\n  if (url.indexOf(':') === -1) {\n    return null;\n  } // remove any parentheses from start and end\n\n\n  var withoutParentheses = url.replace(/^\\(+/, '').replace(/\\)+$/, '');\n  var locationParts = /(at )?(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(withoutParentheses);\n\n  if (locationParts == null) {\n    return null;\n  }\n\n  var _locationParts = _slicedToArray(locationParts, 5),\n      sourceURL = _locationParts[2],\n      line = _locationParts[3],\n      column = _locationParts[4];\n\n  return {\n    sourceURL: sourceURL,\n    line: line,\n    column: column\n  };\n}\n\nvar CHROME_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\n\nfunction parseSourceFromChromeStack(stack) {\n  var frames = stack.split('\\n'); // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n  var _iterator = _createForOfIteratorHelper(frames),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var frame = _step.value;\n      var sanitizedFrame = frame.trim();\n      var locationInParenthesesMatch = sanitizedFrame.match(/ (\\(.+\\)$)/);\n      var possibleLocation = locationInParenthesesMatch ? locationInParenthesesMatch[1] : sanitizedFrame;\n      var location = extractLocation(possibleLocation); // Continue the search until at least sourceURL is found\n\n      if (location == null) {\n        continue;\n      }\n\n      var sourceURL = location.sourceURL,\n          _location$line = location.line,\n          line = _location$line === void 0 ? '1' : _location$line,\n          _location$column = location.column,\n          column = _location$column === void 0 ? '1' : _location$column;\n      return {\n        sourceURL: sourceURL,\n        line: parseInt(line, 10),\n        column: parseInt(column, 10)\n      };\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return null;\n}\n\nfunction parseSourceFromFirefoxStack(stack) {\n  var frames = stack.split('\\n'); // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n  var _iterator2 = _createForOfIteratorHelper(frames),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var frame = _step2.value;\n      var sanitizedFrame = frame.trim();\n      var frameWithoutFunctionName = sanitizedFrame.replace(/((.*\".+\"[^@]*)?[^@]*)(?:@)/, '');\n      var location = extractLocation(frameWithoutFunctionName); // Continue the search until at least sourceURL is found\n\n      if (location == null) {\n        continue;\n      }\n\n      var sourceURL = location.sourceURL,\n          _location$line2 = location.line,\n          line = _location$line2 === void 0 ? '1' : _location$line2,\n          _location$column2 = location.column,\n          column = _location$column2 === void 0 ? '1' : _location$column2;\n      return {\n        sourceURL: sourceURL,\n        line: parseInt(line, 10),\n        column: parseInt(column, 10)\n      };\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return null;\n}\n\nfunction parseSourceFromComponentStack(componentStack) {\n  if (componentStack.match(CHROME_STACK_REGEXP)) {\n    return parseSourceFromChromeStack(componentStack);\n  }\n\n  return parseSourceFromFirefoxStack(componentStack);\n} // 0.123456789 => 0.123\n// Expects high-resolution timestamp in milliseconds, like from performance.now()\n// Mainly used for optimizing the size of serialized profiling payload\n\nfunction formatDurationToMicrosecondsGranularity(duration) {\n  return Math.round(duration * 1000) / 1000;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/utils/index.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/views/Highlighter/Highlighter.js":
/*!*****************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/views/Highlighter/Highlighter.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hideOverlay\": () => (/* binding */ hideOverlay),\n/* harmony export */   \"showOverlay\": () => (/* binding */ showOverlay)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/backend/utils */ \"../react-devtools-shared/src/backend/utils/index.js\");\n/* harmony import */ var _Overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Overlay */ \"../react-devtools-shared/src/backend/views/Highlighter/Overlay.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nvar SHOW_DURATION = 2000;\nvar timeoutID = null;\nvar overlay = null;\n\nfunction hideOverlayNative(agent) {\n  agent.emit('hideNativeHighlight');\n}\n\nfunction hideOverlayWeb() {\n  timeoutID = null;\n\n  if (overlay !== null) {\n    overlay.remove();\n    overlay = null;\n  }\n}\n\nfunction hideOverlay(agent) {\n  return (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_0__.isReactNativeEnvironment)() ? hideOverlayNative(agent) : hideOverlayWeb();\n}\n\nfunction showOverlayNative(elements, agent) {\n  agent.emit('showNativeHighlight', elements);\n}\n\nfunction showOverlayWeb(elements, componentName, agent, hideAfterTimeout) {\n  if (timeoutID !== null) {\n    clearTimeout(timeoutID);\n  }\n\n  if (overlay === null) {\n    overlay = new _Overlay__WEBPACK_IMPORTED_MODULE_1__[\"default\"](agent);\n  }\n\n  overlay.inspect(elements, componentName);\n\n  if (hideAfterTimeout) {\n    timeoutID = setTimeout(function () {\n      return hideOverlay(agent);\n    }, SHOW_DURATION);\n  }\n}\n\nfunction showOverlay(elements, componentName, agent, hideAfterTimeout) {\n  return (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_0__.isReactNativeEnvironment)() ? showOverlayNative(elements, agent) : showOverlayWeb(elements, componentName, agent, hideAfterTimeout);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3ZpZXdzL0hpZ2hsaWdodGVyL0hpZ2hsaWdodGVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7QUFZQTtBQUVBO0FBRUE7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUdBOztBQUVBO0FBSUE7QUFDQTs7QUFFQTtBQU1BO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBTUE7QUFRQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC92aWV3cy9IaWdobGlnaHRlci9IaWdobGlnaHRlci5qcz84YTFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIEFnZW50IGZyb20gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9hZ2VudCc7XG5pbXBvcnQgdHlwZSB7SG9zdEluc3RhbmNlfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmltcG9ydCB7aXNSZWFjdE5hdGl2ZUVudmlyb25tZW50fSBmcm9tICdyZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvdXRpbHMnO1xuXG5pbXBvcnQgT3ZlcmxheSBmcm9tICcuL092ZXJsYXknO1xuXG5jb25zdCBTSE9XX0RVUkFUSU9OID0gMjAwMDtcblxubGV0IHRpbWVvdXRJRDogVGltZW91dElEIHwgbnVsbCA9IG51bGw7XG5sZXQgb3ZlcmxheTogT3ZlcmxheSB8IG51bGwgPSBudWxsO1xuXG5mdW5jdGlvbiBoaWRlT3ZlcmxheU5hdGl2ZShhZ2VudDogQWdlbnQpOiB2b2lkIHtcbiAgYWdlbnQuZW1pdCgnaGlkZU5hdGl2ZUhpZ2hsaWdodCcpO1xufVxuXG5mdW5jdGlvbiBoaWRlT3ZlcmxheVdlYigpOiB2b2lkIHtcbiAgdGltZW91dElEID0gbnVsbDtcblxuICBpZiAob3ZlcmxheSAhPT0gbnVsbCkge1xuICAgIG92ZXJsYXkucmVtb3ZlKCk7XG4gICAgb3ZlcmxheSA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhpZGVPdmVybGF5KGFnZW50OiBBZ2VudCk6IHZvaWQge1xuICByZXR1cm4gaXNSZWFjdE5hdGl2ZUVudmlyb25tZW50KClcbiAgICA/IGhpZGVPdmVybGF5TmF0aXZlKGFnZW50KVxuICAgIDogaGlkZU92ZXJsYXlXZWIoKTtcbn1cblxuZnVuY3Rpb24gc2hvd092ZXJsYXlOYXRpdmUoXG4gIGVsZW1lbnRzOiAkUmVhZE9ubHlBcnJheTxIb3N0SW5zdGFuY2U+LFxuICBhZ2VudDogQWdlbnQsXG4pOiB2b2lkIHtcbiAgYWdlbnQuZW1pdCgnc2hvd05hdGl2ZUhpZ2hsaWdodCcsIGVsZW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gc2hvd092ZXJsYXlXZWIoXG4gIGVsZW1lbnRzOiAkUmVhZE9ubHlBcnJheTxIVE1MRWxlbWVudD4sXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyB8IG51bGwsXG4gIGFnZW50OiBBZ2VudCxcbiAgaGlkZUFmdGVyVGltZW91dDogYm9vbGVhbixcbik6IHZvaWQge1xuICBpZiAodGltZW91dElEICE9PSBudWxsKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XG4gIH1cblxuICBpZiAob3ZlcmxheSA9PT0gbnVsbCkge1xuICAgIG92ZXJsYXkgPSBuZXcgT3ZlcmxheShhZ2VudCk7XG4gIH1cblxuICBvdmVybGF5Lmluc3BlY3QoZWxlbWVudHMsIGNvbXBvbmVudE5hbWUpO1xuXG4gIGlmIChoaWRlQWZ0ZXJUaW1lb3V0KSB7XG4gICAgdGltZW91dElEID0gc2V0VGltZW91dCgoKSA9PiBoaWRlT3ZlcmxheShhZ2VudCksIFNIT1dfRFVSQVRJT04pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93T3ZlcmxheShcbiAgZWxlbWVudHM6ICRSZWFkT25seUFycmF5PEhvc3RJbnN0YW5jZT4sXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyB8IG51bGwsXG4gIGFnZW50OiBBZ2VudCxcbiAgaGlkZUFmdGVyVGltZW91dDogYm9vbGVhbixcbik6IHZvaWQge1xuICByZXR1cm4gaXNSZWFjdE5hdGl2ZUVudmlyb25tZW50KClcbiAgICA/IHNob3dPdmVybGF5TmF0aXZlKGVsZW1lbnRzLCBhZ2VudClcbiAgICA6IHNob3dPdmVybGF5V2ViKFxuICAgICAgICAoZWxlbWVudHM6ICRSZWFkT25seUFycmF5PGFueT4pLFxuICAgICAgICBjb21wb25lbnROYW1lLFxuICAgICAgICBhZ2VudCxcbiAgICAgICAgaGlkZUFmdGVyVGltZW91dCxcbiAgICAgICk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/views/Highlighter/Highlighter.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/views/Highlighter/Overlay.js":
/*!*************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/views/Highlighter/Overlay.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Overlay)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ \"../react-devtools-shared/src/backend/views/utils.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar assign = Object.assign; // Note that the Overlay components are not affected by the active Theme,\n// because they highlight elements in the main Chrome window (outside of devtools).\n// The colors below were chosen to roughly match those used by Chrome devtools.\n\nvar OverlayRect = /*#__PURE__*/function () {\n  function OverlayRect(doc, container) {\n    _classCallCheck(this, OverlayRect);\n\n    this.node = doc.createElement('div');\n    this.border = doc.createElement('div');\n    this.padding = doc.createElement('div');\n    this.content = doc.createElement('div');\n    this.border.style.borderColor = overlayStyles.border;\n    this.padding.style.borderColor = overlayStyles.padding;\n    this.content.style.backgroundColor = overlayStyles.background;\n    assign(this.node.style, {\n      borderColor: overlayStyles.margin,\n      pointerEvents: 'none',\n      position: 'fixed'\n    });\n    this.node.style.zIndex = '10000000';\n    this.node.appendChild(this.border);\n    this.border.appendChild(this.padding);\n    this.padding.appendChild(this.content);\n    container.appendChild(this.node);\n  }\n\n  _createClass(OverlayRect, [{\n    key: \"remove\",\n    value: function remove() {\n      if (this.node.parentNode) {\n        this.node.parentNode.removeChild(this.node);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(box, dims) {\n      boxWrap(dims, 'margin', this.node);\n      boxWrap(dims, 'border', this.border);\n      boxWrap(dims, 'padding', this.padding);\n      assign(this.content.style, {\n        height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + 'px',\n        width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + 'px'\n      });\n      assign(this.node.style, {\n        top: box.top - dims.marginTop + 'px',\n        left: box.left - dims.marginLeft + 'px'\n      });\n    }\n  }]);\n\n  return OverlayRect;\n}();\n\nvar OverlayTip = /*#__PURE__*/function () {\n  function OverlayTip(doc, container) {\n    _classCallCheck(this, OverlayTip);\n\n    this.tip = doc.createElement('div');\n    assign(this.tip.style, {\n      display: 'flex',\n      flexFlow: 'row nowrap',\n      backgroundColor: '#333740',\n      borderRadius: '2px',\n      fontFamily: '\"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace',\n      fontWeight: 'bold',\n      padding: '3px 5px',\n      pointerEvents: 'none',\n      position: 'fixed',\n      fontSize: '12px',\n      whiteSpace: 'nowrap'\n    });\n    this.nameSpan = doc.createElement('span');\n    this.tip.appendChild(this.nameSpan);\n    assign(this.nameSpan.style, {\n      color: '#ee78e6',\n      borderRight: '1px solid #aaaaaa',\n      paddingRight: '0.5rem',\n      marginRight: '0.5rem'\n    });\n    this.dimSpan = doc.createElement('span');\n    this.tip.appendChild(this.dimSpan);\n    assign(this.dimSpan.style, {\n      color: '#d7d7d7'\n    });\n    this.tip.style.zIndex = '10000000';\n    container.appendChild(this.tip);\n  }\n\n  _createClass(OverlayTip, [{\n    key: \"remove\",\n    value: function remove() {\n      if (this.tip.parentNode) {\n        this.tip.parentNode.removeChild(this.tip);\n      }\n    }\n  }, {\n    key: \"updateText\",\n    value: function updateText(name, width, height) {\n      this.nameSpan.textContent = name;\n      this.dimSpan.textContent = Math.round(width) + 'px × ' + Math.round(height) + 'px';\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(dims, bounds) {\n      var tipRect = this.tip.getBoundingClientRect();\n      var tipPos = findTipPos(dims, bounds, {\n        width: tipRect.width,\n        height: tipRect.height\n      });\n      assign(this.tip.style, tipPos.style);\n    }\n  }]);\n\n  return OverlayTip;\n}();\n\nvar Overlay = /*#__PURE__*/function () {\n  function Overlay(agent) {\n    _classCallCheck(this, Overlay);\n\n    // Find the root window, because overlays are positioned relative to it.\n    var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;\n    this.window = currentWindow; // When opened in shells/dev, the tooltip should be bound by the app iframe, not by the topmost window.\n\n    var tipBoundsWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;\n    this.tipBoundsWindow = tipBoundsWindow;\n    var doc = currentWindow.document;\n    this.container = doc.createElement('div');\n    this.container.style.zIndex = '10000000';\n    this.tip = new OverlayTip(doc, this.container);\n    this.rects = [];\n    this.agent = agent;\n    doc.body.appendChild(this.container);\n  }\n\n  _createClass(Overlay, [{\n    key: \"remove\",\n    value: function remove() {\n      this.tip.remove();\n      this.rects.forEach(function (rect) {\n        rect.remove();\n      });\n      this.rects.length = 0;\n\n      if (this.container.parentNode) {\n        this.container.parentNode.removeChild(this.container);\n      }\n    }\n  }, {\n    key: \"inspect\",\n    value: function inspect(nodes, name) {\n      var _this = this;\n\n      // We can't get the size of text nodes or comment nodes. React as of v15\n      // heavily uses comment nodes to delimit text.\n      var elements = nodes.filter(function (node) {\n        return node.nodeType === Node.ELEMENT_NODE;\n      });\n\n      while (this.rects.length > elements.length) {\n        var rect = this.rects.pop(); // $FlowFixMe[incompatible-use]\n\n        rect.remove();\n      }\n\n      if (elements.length === 0) {\n        return;\n      }\n\n      while (this.rects.length < elements.length) {\n        this.rects.push(new OverlayRect(this.window.document, this.container));\n      }\n\n      var outerBox = {\n        top: Number.POSITIVE_INFINITY,\n        right: Number.NEGATIVE_INFINITY,\n        bottom: Number.NEGATIVE_INFINITY,\n        left: Number.POSITIVE_INFINITY\n      };\n      elements.forEach(function (element, index) {\n        var box = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getNestedBoundingClientRect)(element, _this.window);\n        var dims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getElementDimensions)(element);\n        outerBox.top = Math.min(outerBox.top, box.top - dims.marginTop);\n        outerBox.right = Math.max(outerBox.right, box.left + box.width + dims.marginRight);\n        outerBox.bottom = Math.max(outerBox.bottom, box.top + box.height + dims.marginBottom);\n        outerBox.left = Math.min(outerBox.left, box.left - dims.marginLeft);\n        var rect = _this.rects[index];\n        rect.update(box, dims);\n      });\n\n      if (!name) {\n        name = elements[0].nodeName.toLowerCase();\n        var node = elements[0];\n        var ownerName = this.agent.getComponentNameForHostInstance(node);\n\n        if (ownerName) {\n          name += ' (in ' + ownerName + ')';\n        }\n      }\n\n      this.tip.updateText(name, outerBox.right - outerBox.left, outerBox.bottom - outerBox.top);\n      var tipBounds = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getNestedBoundingClientRect)(this.tipBoundsWindow.document.documentElement, this.window);\n      this.tip.updatePosition({\n        top: outerBox.top,\n        left: outerBox.left,\n        height: outerBox.bottom - outerBox.top,\n        width: outerBox.right - outerBox.left\n      }, {\n        top: tipBounds.top + this.tipBoundsWindow.scrollY,\n        left: tipBounds.left + this.tipBoundsWindow.scrollX,\n        height: this.tipBoundsWindow.innerHeight,\n        width: this.tipBoundsWindow.innerWidth\n      });\n    }\n  }]);\n\n  return Overlay;\n}();\n\n\n\nfunction findTipPos(dims, bounds, tipSize) {\n  var tipHeight = Math.max(tipSize.height, 20);\n  var tipWidth = Math.max(tipSize.width, 60);\n  var margin = 5;\n  var top;\n\n  if (dims.top + dims.height + tipHeight <= bounds.top + bounds.height) {\n    if (dims.top + dims.height < bounds.top + 0) {\n      top = bounds.top + margin;\n    } else {\n      top = dims.top + dims.height + margin;\n    }\n  } else if (dims.top - tipHeight <= bounds.top + bounds.height) {\n    if (dims.top - tipHeight - margin < bounds.top + margin) {\n      top = bounds.top + margin;\n    } else {\n      top = dims.top - tipHeight - margin;\n    }\n  } else {\n    top = bounds.top + bounds.height - tipHeight - margin;\n  }\n\n  var left = dims.left + margin;\n\n  if (dims.left < bounds.left) {\n    left = bounds.left + margin;\n  }\n\n  if (dims.left + tipWidth > bounds.left + bounds.width) {\n    left = bounds.left + bounds.width - tipWidth - margin;\n  }\n\n  top += 'px';\n  left += 'px';\n  return {\n    style: {\n      top: top,\n      left: left\n    }\n  };\n}\n\nfunction boxWrap(dims, what, node) {\n  assign(node.style, {\n    borderTopWidth: dims[what + 'Top'] + 'px',\n    borderLeftWidth: dims[what + 'Left'] + 'px',\n    borderRightWidth: dims[what + 'Right'] + 'px',\n    borderBottomWidth: dims[what + 'Bottom'] + 'px',\n    borderStyle: 'solid'\n  });\n}\n\nvar overlayStyles = {\n  background: 'rgba(120, 170, 210, 0.7)',\n  padding: 'rgba(77, 200, 0, 0.3)',\n  margin: 'rgba(255, 155, 0, 0.3)',\n  border: 'rgba(255, 200, 50, 0.3)'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/views/Highlighter/Overlay.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/views/Highlighter/index.js":
/*!***********************************************************************!*\
  !*** ../react-devtools-shared/src/backend/views/Highlighter/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ setupHighlighter)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_backend_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/backend/agent */ \"../react-devtools-shared/src/backend/agent.js\");\n/* harmony import */ var _Highlighter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Highlighter */ \"../react-devtools-shared/src/backend/views/Highlighter/Highlighter.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n// This plug-in provides in-page highlighting of the selected element.\n// It is used by the browser extension and the standalone DevTools shell (when connected to a browser).\n// It is not currently the mechanism used to highlight React Native views.\n// That is done by the React Native Inspector component.\nvar iframesListeningTo = new Set();\nfunction setupHighlighter(bridge, agent) {\n  bridge.addListener('clearHostInstanceHighlight', clearHostInstanceHighlight);\n  bridge.addListener('highlightHostInstance', highlightHostInstance);\n  bridge.addListener('shutdown', stopInspectingHost);\n  bridge.addListener('startInspectingHost', startInspectingHost);\n  bridge.addListener('stopInspectingHost', stopInspectingHost);\n\n  function startInspectingHost() {\n    registerListenersOnWindow(window);\n  }\n\n  function registerListenersOnWindow(window) {\n    // This plug-in may run in non-DOM environments (e.g. React Native).\n    if (window && typeof window.addEventListener === 'function') {\n      window.addEventListener('click', onClick, true);\n      window.addEventListener('mousedown', onMouseEvent, true);\n      window.addEventListener('mouseover', onMouseEvent, true);\n      window.addEventListener('mouseup', onMouseEvent, true);\n      window.addEventListener('pointerdown', onPointerDown, true);\n      window.addEventListener('pointermove', onPointerMove, true);\n      window.addEventListener('pointerup', onPointerUp, true);\n    } else {\n      agent.emit('startInspectingNative');\n    }\n  }\n\n  function stopInspectingHost() {\n    (0,_Highlighter__WEBPACK_IMPORTED_MODULE_1__.hideOverlay)(agent);\n    removeListenersOnWindow(window);\n    iframesListeningTo.forEach(function (frame) {\n      try {\n        removeListenersOnWindow(frame.contentWindow);\n      } catch (error) {// This can error when the iframe is on a cross-origin.\n      }\n    });\n    iframesListeningTo = new Set();\n  }\n\n  function removeListenersOnWindow(window) {\n    // This plug-in may run in non-DOM environments (e.g. React Native).\n    if (window && typeof window.removeEventListener === 'function') {\n      window.removeEventListener('click', onClick, true);\n      window.removeEventListener('mousedown', onMouseEvent, true);\n      window.removeEventListener('mouseover', onMouseEvent, true);\n      window.removeEventListener('mouseup', onMouseEvent, true);\n      window.removeEventListener('pointerdown', onPointerDown, true);\n      window.removeEventListener('pointermove', onPointerMove, true);\n      window.removeEventListener('pointerup', onPointerUp, true);\n    } else {\n      agent.emit('stopInspectingNative');\n    }\n  }\n\n  function clearHostInstanceHighlight() {\n    (0,_Highlighter__WEBPACK_IMPORTED_MODULE_1__.hideOverlay)(agent);\n  }\n\n  function highlightHostInstance(_ref) {\n    var displayName = _ref.displayName,\n        hideAfterTimeout = _ref.hideAfterTimeout,\n        id = _ref.id,\n        openBuiltinElementsPanel = _ref.openBuiltinElementsPanel,\n        rendererID = _ref.rendererID,\n        scrollIntoView = _ref.scrollIntoView;\n    var renderer = agent.rendererInterfaces[rendererID];\n\n    if (renderer == null) {\n      console.warn(\"Invalid renderer id \\\"\".concat(rendererID, \"\\\" for element \\\"\").concat(id, \"\\\"\"));\n      (0,_Highlighter__WEBPACK_IMPORTED_MODULE_1__.hideOverlay)(agent);\n      return;\n    } // In some cases fiber may already be unmounted\n\n\n    if (!renderer.hasElementWithId(id)) {\n      (0,_Highlighter__WEBPACK_IMPORTED_MODULE_1__.hideOverlay)(agent);\n      return;\n    }\n\n    var nodes = renderer.findHostInstancesForElementID(id);\n\n    if (nodes != null && nodes[0] != null) {\n      var node = nodes[0]; // $FlowFixMe[method-unbinding]\n\n      if (scrollIntoView && typeof node.scrollIntoView === 'function') {\n        // If the node isn't visible show it before highlighting it.\n        // We may want to reconsider this; it might be a little disruptive.\n        node.scrollIntoView({\n          block: 'nearest',\n          inline: 'nearest'\n        });\n      }\n\n      (0,_Highlighter__WEBPACK_IMPORTED_MODULE_1__.showOverlay)(nodes, displayName, agent, hideAfterTimeout);\n\n      if (openBuiltinElementsPanel) {\n        window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0 = node;\n        bridge.send('syncSelectionToBuiltinElementsPanel');\n      }\n    } else {\n      (0,_Highlighter__WEBPACK_IMPORTED_MODULE_1__.hideOverlay)(agent);\n    }\n  }\n\n  function onClick(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    stopInspectingHost();\n    bridge.send('stopInspectingHost', true);\n  }\n\n  function onMouseEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  function onPointerDown(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    selectElementForNode(getEventTarget(event));\n  }\n\n  var lastHoveredNode = null;\n\n  function onPointerMove(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    var target = getEventTarget(event);\n    if (lastHoveredNode === target) return;\n    lastHoveredNode = target;\n\n    if (target.tagName === 'IFRAME') {\n      var iframe = target;\n\n      try {\n        if (!iframesListeningTo.has(iframe)) {\n          var _window = iframe.contentWindow;\n          registerListenersOnWindow(_window);\n          iframesListeningTo.add(iframe);\n        }\n      } catch (error) {// This can error when the iframe is on a cross-origin.\n      }\n    } // Don't pass the name explicitly.\n    // It will be inferred from DOM tag and Fiber owner.\n\n\n    (0,_Highlighter__WEBPACK_IMPORTED_MODULE_1__.showOverlay)([target], null, agent, false);\n    selectElementForNode(target);\n  }\n\n  function onPointerUp(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  var selectElementForNode = function selectElementForNode(node) {\n    var id = agent.getIDForHostInstance(node);\n\n    if (id !== null) {\n      bridge.send('selectElement', id);\n    }\n  };\n\n  function getEventTarget(event) {\n    if (event.composed) {\n      return event.composedPath()[0];\n    }\n\n    return event.target;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/views/Highlighter/index.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/views/TraceUpdates/canvas.js":
/*!*************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/views/TraceUpdates/canvas.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"destroy\": () => (/* binding */ destroy),\n/* harmony export */   \"draw\": () => (/* binding */ draw),\n/* harmony export */   \"groupAndSortNodes\": () => (/* binding */ groupAndSortNodes)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/backend/utils */ \"../react-devtools-shared/src/backend/utils/index.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n // Note these colors are in sync with DevTools Profiler chart colors.\n\nvar COLORS = ['#37afa9', '#63b19e', '#80b393', '#97b488', '#abb67d', '#beb771', '#cfb965', '#dfba57', '#efbb49', '#febc38'];\nvar canvas = null;\n\nfunction drawNative(nodeToData, agent) {\n  var nodesToDraw = [];\n  iterateNodes(nodeToData, function (_ref) {\n    var color = _ref.color,\n        node = _ref.node;\n    nodesToDraw.push({\n      node: node,\n      color: color\n    });\n  });\n  agent.emit('drawTraceUpdates', nodesToDraw);\n  var mergedNodes = groupAndSortNodes(nodeToData);\n  agent.emit('drawGroupedTraceUpdatesWithNames', mergedNodes);\n}\n\nfunction drawWeb(nodeToData) {\n  if (canvas === null) {\n    initialize();\n  }\n\n  var dpr = window.devicePixelRatio || 1;\n  var canvasFlow = canvas;\n  canvasFlow.width = window.innerWidth * dpr;\n  canvasFlow.height = window.innerHeight * dpr;\n  canvasFlow.style.width = \"\".concat(window.innerWidth, \"px\");\n  canvasFlow.style.height = \"\".concat(window.innerHeight, \"px\");\n  var context = canvasFlow.getContext('2d');\n  context.scale(dpr, dpr);\n  context.clearRect(0, 0, canvasFlow.width / dpr, canvasFlow.height / dpr);\n  var mergedNodes = groupAndSortNodes(nodeToData);\n  mergedNodes.forEach(function (group) {\n    drawGroupBorders(context, group);\n    drawGroupLabel(context, group);\n  });\n}\n\nfunction groupAndSortNodes(nodeToData) {\n  var positionGroups = new Map();\n  iterateNodes(nodeToData, function (_ref2) {\n    var _positionGroups$get;\n\n    var rect = _ref2.rect,\n        color = _ref2.color,\n        displayName = _ref2.displayName,\n        count = _ref2.count;\n    if (!rect) return;\n    var key = \"\".concat(rect.left, \",\").concat(rect.top);\n    if (!positionGroups.has(key)) positionGroups.set(key, []);\n    (_positionGroups$get = positionGroups.get(key)) === null || _positionGroups$get === void 0 ? void 0 : _positionGroups$get.push({\n      rect: rect,\n      color: color,\n      displayName: displayName,\n      count: count\n    });\n  });\n  return Array.from(positionGroups.values()).sort(function (groupA, groupB) {\n    var maxCountA = Math.max.apply(Math, _toConsumableArray(groupA.map(function (item) {\n      return item.count;\n    })));\n    var maxCountB = Math.max.apply(Math, _toConsumableArray(groupB.map(function (item) {\n      return item.count;\n    })));\n    return maxCountA - maxCountB;\n  });\n}\n\nfunction drawGroupBorders(context, group) {\n  group.forEach(function (_ref3) {\n    var color = _ref3.color,\n        rect = _ref3.rect;\n    context.beginPath();\n    context.strokeStyle = color;\n    context.rect(rect.left, rect.top, rect.width - 1, rect.height - 1);\n    context.stroke();\n  });\n}\n\nfunction drawGroupLabel(context, group) {\n  var mergedName = group.map(function (_ref4) {\n    var displayName = _ref4.displayName,\n        count = _ref4.count;\n    return displayName ? \"\".concat(displayName).concat(count > 1 ? \" x\".concat(count) : '') : '';\n  }).filter(Boolean).join(', ');\n\n  if (mergedName) {\n    drawLabel(context, group[0].rect, mergedName, group[0].color);\n  }\n}\n\nfunction draw(nodeToData, agent) {\n  return (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_0__.isReactNativeEnvironment)() ? drawNative(nodeToData, agent) : drawWeb(nodeToData);\n}\n\nfunction iterateNodes(nodeToData, execute) {\n  nodeToData.forEach(function (data, node) {\n    var colorIndex = Math.min(COLORS.length - 1, data.count - 1);\n    var color = COLORS[colorIndex];\n    execute({\n      color: color,\n      node: node,\n      count: data.count,\n      displayName: data.displayName,\n      expirationTime: data.expirationTime,\n      lastMeasuredAt: data.lastMeasuredAt,\n      rect: data.rect\n    });\n  });\n}\n\nfunction drawLabel(context, rect, text, color) {\n  var left = rect.left,\n      top = rect.top;\n  context.font = '10px monospace';\n  context.textBaseline = 'middle';\n  context.textAlign = 'center';\n  var padding = 2;\n  var textHeight = 14;\n  var metrics = context.measureText(text);\n  var backgroundWidth = metrics.width + padding * 2;\n  var backgroundHeight = textHeight;\n  var labelX = left;\n  var labelY = top - backgroundHeight;\n  context.fillStyle = color;\n  context.fillRect(labelX, labelY, backgroundWidth, backgroundHeight);\n  context.fillStyle = '#000000';\n  context.fillText(text, labelX + backgroundWidth / 2, labelY + backgroundHeight / 2);\n}\n\nfunction destroyNative(agent) {\n  agent.emit('disableTraceUpdates');\n}\n\nfunction destroyWeb() {\n  if (canvas !== null) {\n    if (canvas.parentNode != null) {\n      canvas.parentNode.removeChild(canvas);\n    }\n\n    canvas = null;\n  }\n}\n\nfunction destroy(agent) {\n  return (0,react_devtools_shared_src_backend_utils__WEBPACK_IMPORTED_MODULE_0__.isReactNativeEnvironment)() ? destroyNative(agent) : destroyWeb();\n}\n\nfunction initialize() {\n  canvas = window.document.createElement('canvas');\n  canvas.style.cssText = \"\\n    xx-background-color: red;\\n    xx-opacity: 0.5;\\n    bottom: 0;\\n    left: 0;\\n    pointer-events: none;\\n    position: fixed;\\n    right: 0;\\n    top: 0;\\n    z-index: 1000000000;\\n  \";\n  var root = window.document.documentElement;\n  root.insertBefore(canvas, root.firstChild);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/views/TraceUpdates/canvas.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/views/TraceUpdates/index.js":
/*!************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/views/TraceUpdates/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initialize\": () => (/* binding */ initialize),\n/* harmony export */   \"toggleEnabled\": () => (/* binding */ toggleEnabled)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_backend_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/backend/agent */ \"../react-devtools-shared/src/backend/agent.js\");\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas */ \"../react-devtools-shared/src/backend/views/TraceUpdates/canvas.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"../react-devtools-shared/src/backend/views/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n// How long the rect should be shown for?\nvar DISPLAY_DURATION = 250; // What's the longest we are willing to show the overlay for?\n// This can be important if we're getting a flurry of events (e.g. scroll update).\n\nvar MAX_DISPLAY_DURATION = 3000; // How long should a rect be considered valid for?\n\nvar REMEASUREMENT_AFTER_DURATION = 250; // Markers for different types of HOCs\n\nvar HOC_MARKERS = new Map([['Forget', '✨'], ['Memo', '🧠']]); // Some environments (e.g. React Native / Hermes) don't support the performance API yet.\n\nvar getCurrentTime = // $FlowFixMe[method-unbinding]\n(typeof performance === \"undefined\" ? \"undefined\" : _typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nvar nodeToData = new Map();\nvar agent = null;\nvar drawAnimationFrameID = null;\nvar isEnabled = false;\nvar redrawTimeoutID = null;\nfunction initialize(injectedAgent) {\n  agent = injectedAgent;\n  agent.addListener('traceUpdates', traceUpdates);\n}\nfunction toggleEnabled(value) {\n  isEnabled = value;\n\n  if (!isEnabled) {\n    nodeToData.clear();\n\n    if (drawAnimationFrameID !== null) {\n      cancelAnimationFrame(drawAnimationFrameID);\n      drawAnimationFrameID = null;\n    }\n\n    if (redrawTimeoutID !== null) {\n      clearTimeout(redrawTimeoutID);\n      redrawTimeoutID = null;\n    }\n\n    (0,_canvas__WEBPACK_IMPORTED_MODULE_1__.destroy)(agent);\n  }\n}\n\nfunction traceUpdates(nodes) {\n  if (!isEnabled) return;\n  nodes.forEach(function (node) {\n    var data = nodeToData.get(node);\n    var now = getCurrentTime();\n    var lastMeasuredAt = data != null ? data.lastMeasuredAt : 0;\n    var rect = data != null ? data.rect : null;\n\n    if (rect === null || lastMeasuredAt + REMEASUREMENT_AFTER_DURATION < now) {\n      lastMeasuredAt = now;\n      rect = measureNode(node);\n    }\n\n    var displayName = agent.getComponentNameForHostInstance(node);\n\n    if (displayName) {\n      var _extractHOCNames = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.extractHOCNames)(displayName),\n          baseComponentName = _extractHOCNames.baseComponentName,\n          hocNames = _extractHOCNames.hocNames;\n\n      var markers = hocNames.map(function (hoc) {\n        return HOC_MARKERS.get(hoc) || '';\n      }).join('');\n      var enhancedDisplayName = markers ? \"\".concat(markers).concat(baseComponentName) : baseComponentName;\n      displayName = enhancedDisplayName;\n    }\n\n    nodeToData.set(node, {\n      count: data != null ? data.count + 1 : 1,\n      expirationTime: data != null ? Math.min(now + MAX_DISPLAY_DURATION, data.expirationTime + DISPLAY_DURATION) : now + DISPLAY_DURATION,\n      lastMeasuredAt: lastMeasuredAt,\n      rect: rect,\n      displayName: displayName\n    });\n  });\n\n  if (redrawTimeoutID !== null) {\n    clearTimeout(redrawTimeoutID);\n    redrawTimeoutID = null;\n  }\n\n  if (drawAnimationFrameID === null) {\n    drawAnimationFrameID = requestAnimationFrame(prepareToDraw);\n  }\n}\n\nfunction prepareToDraw() {\n  drawAnimationFrameID = null;\n  redrawTimeoutID = null;\n  var now = getCurrentTime();\n  var earliestExpiration = Number.MAX_VALUE; // Remove any items that have already expired.\n\n  nodeToData.forEach(function (data, node) {\n    if (data.expirationTime < now) {\n      nodeToData.delete(node);\n    } else {\n      earliestExpiration = Math.min(earliestExpiration, data.expirationTime);\n    }\n  });\n  (0,_canvas__WEBPACK_IMPORTED_MODULE_1__.draw)(nodeToData, agent);\n\n  if (earliestExpiration !== Number.MAX_VALUE) {\n    redrawTimeoutID = setTimeout(prepareToDraw, earliestExpiration - now);\n  }\n}\n\nfunction measureNode(node) {\n  if (!node || typeof node.getBoundingClientRect !== 'function') {\n    return null;\n  }\n\n  var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getNestedBoundingClientRect)(node, currentWindow);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL3ZpZXdzL1RyYWNlVXBkYXRlcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUdBOztBQUNBOztBQUdBOztBQUdBOztBQU1BO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQVVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBR0E7QUFBQTtBQUFBO0FBRUE7QUFJQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQVhBO0FBYUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC92aWV3cy9UcmFjZVVwZGF0ZXMvaW5kZXguanM/NzUyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgQWdlbnQgZnJvbSAncmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL2FnZW50JztcbmltcG9ydCB7ZGVzdHJveSBhcyBkZXN0cm95Q2FudmFzLCBkcmF3fSBmcm9tICcuL2NhbnZhcyc7XG5pbXBvcnQge2V4dHJhY3RIT0NOYW1lcywgZ2V0TmVzdGVkQm91bmRpbmdDbGllbnRSZWN0fSBmcm9tICcuLi91dGlscyc7XG5cbmltcG9ydCB0eXBlIHtIb3N0SW5zdGFuY2V9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB0eXBlIHtSZWN0fSBmcm9tICcuLi91dGlscyc7XG5cbi8vIEhvdyBsb25nIHRoZSByZWN0IHNob3VsZCBiZSBzaG93biBmb3I/XG5jb25zdCBESVNQTEFZX0RVUkFUSU9OID0gMjUwO1xuXG4vLyBXaGF0J3MgdGhlIGxvbmdlc3Qgd2UgYXJlIHdpbGxpbmcgdG8gc2hvdyB0aGUgb3ZlcmxheSBmb3I/XG4vLyBUaGlzIGNhbiBiZSBpbXBvcnRhbnQgaWYgd2UncmUgZ2V0dGluZyBhIGZsdXJyeSBvZiBldmVudHMgKGUuZy4gc2Nyb2xsIHVwZGF0ZSkuXG5jb25zdCBNQVhfRElTUExBWV9EVVJBVElPTiA9IDMwMDA7XG5cbi8vIEhvdyBsb25nIHNob3VsZCBhIHJlY3QgYmUgY29uc2lkZXJlZCB2YWxpZCBmb3I/XG5jb25zdCBSRU1FQVNVUkVNRU5UX0FGVEVSX0RVUkFUSU9OID0gMjUwO1xuXG4vLyBNYXJrZXJzIGZvciBkaWZmZXJlbnQgdHlwZXMgb2YgSE9Dc1xuY29uc3QgSE9DX01BUktFUlMgPSBuZXcgTWFwKFtcbiAgWydGb3JnZXQnLCAn4pyoJ10sXG4gIFsnTWVtbycsICfwn6egJ10sXG5dKTtcblxuLy8gU29tZSBlbnZpcm9ubWVudHMgKGUuZy4gUmVhY3QgTmF0aXZlIC8gSGVybWVzKSBkb24ndCBzdXBwb3J0IHRoZSBwZXJmb3JtYW5jZSBBUEkgeWV0LlxuY29uc3QgZ2V0Q3VycmVudFRpbWUgPVxuICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG4gIHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gKCkgPT4gcGVyZm9ybWFuY2Uubm93KClcbiAgICA6ICgpID0+IERhdGUubm93KCk7XG5cbmV4cG9ydCB0eXBlIERhdGEgPSB7XG4gIGNvdW50OiBudW1iZXIsXG4gIGV4cGlyYXRpb25UaW1lOiBudW1iZXIsXG4gIGxhc3RNZWFzdXJlZEF0OiBudW1iZXIsXG4gIHJlY3Q6IFJlY3QgfCBudWxsLFxuICBkaXNwbGF5TmFtZTogc3RyaW5nIHwgbnVsbCxcbn07XG5cbmNvbnN0IG5vZGVUb0RhdGE6IE1hcDxIb3N0SW5zdGFuY2UsIERhdGE+ID0gbmV3IE1hcCgpO1xuXG5sZXQgYWdlbnQ6IEFnZW50ID0gKChudWxsOiBhbnkpOiBBZ2VudCk7XG5sZXQgZHJhd0FuaW1hdGlvbkZyYW1lSUQ6IEFuaW1hdGlvbkZyYW1lSUQgfCBudWxsID0gbnVsbDtcbmxldCBpc0VuYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbmxldCByZWRyYXdUaW1lb3V0SUQ6IFRpbWVvdXRJRCB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZShpbmplY3RlZEFnZW50OiBBZ2VudCk6IHZvaWQge1xuICBhZ2VudCA9IGluamVjdGVkQWdlbnQ7XG4gIGFnZW50LmFkZExpc3RlbmVyKCd0cmFjZVVwZGF0ZXMnLCB0cmFjZVVwZGF0ZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlRW5hYmxlZCh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICBpc0VuYWJsZWQgPSB2YWx1ZTtcblxuICBpZiAoIWlzRW5hYmxlZCkge1xuICAgIG5vZGVUb0RhdGEuY2xlYXIoKTtcblxuICAgIGlmIChkcmF3QW5pbWF0aW9uRnJhbWVJRCAhPT0gbnVsbCkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZHJhd0FuaW1hdGlvbkZyYW1lSUQpO1xuICAgICAgZHJhd0FuaW1hdGlvbkZyYW1lSUQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChyZWRyYXdUaW1lb3V0SUQgIT09IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dChyZWRyYXdUaW1lb3V0SUQpO1xuICAgICAgcmVkcmF3VGltZW91dElEID0gbnVsbDtcbiAgICB9XG5cbiAgICBkZXN0cm95Q2FudmFzKGFnZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFjZVVwZGF0ZXMobm9kZXM6IFNldDxIb3N0SW5zdGFuY2U+KTogdm9pZCB7XG4gIGlmICghaXNFbmFibGVkKSByZXR1cm47XG5cbiAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICBjb25zdCBkYXRhID0gbm9kZVRvRGF0YS5nZXQobm9kZSk7XG4gICAgY29uc3Qgbm93ID0gZ2V0Q3VycmVudFRpbWUoKTtcblxuICAgIGxldCBsYXN0TWVhc3VyZWRBdCA9IGRhdGEgIT0gbnVsbCA/IGRhdGEubGFzdE1lYXN1cmVkQXQgOiAwO1xuICAgIGxldCByZWN0ID0gZGF0YSAhPSBudWxsID8gZGF0YS5yZWN0IDogbnVsbDtcblxuICAgIGlmIChyZWN0ID09PSBudWxsIHx8IGxhc3RNZWFzdXJlZEF0ICsgUkVNRUFTVVJFTUVOVF9BRlRFUl9EVVJBVElPTiA8IG5vdykge1xuICAgICAgbGFzdE1lYXN1cmVkQXQgPSBub3c7XG4gICAgICByZWN0ID0gbWVhc3VyZU5vZGUobm9kZSk7XG4gICAgfVxuXG4gICAgbGV0IGRpc3BsYXlOYW1lID0gYWdlbnQuZ2V0Q29tcG9uZW50TmFtZUZvckhvc3RJbnN0YW5jZShub2RlKTtcbiAgICBpZiAoZGlzcGxheU5hbWUpIHtcbiAgICAgIGNvbnN0IHtiYXNlQ29tcG9uZW50TmFtZSwgaG9jTmFtZXN9ID0gZXh0cmFjdEhPQ05hbWVzKGRpc3BsYXlOYW1lKTtcblxuICAgICAgY29uc3QgbWFya2VycyA9IGhvY05hbWVzLm1hcChob2MgPT4gSE9DX01BUktFUlMuZ2V0KGhvYykgfHwgJycpLmpvaW4oJycpO1xuXG4gICAgICBjb25zdCBlbmhhbmNlZERpc3BsYXlOYW1lID0gbWFya2Vyc1xuICAgICAgICA/IGAke21hcmtlcnN9JHtiYXNlQ29tcG9uZW50TmFtZX1gXG4gICAgICAgIDogYmFzZUNvbXBvbmVudE5hbWU7XG5cbiAgICAgIGRpc3BsYXlOYW1lID0gZW5oYW5jZWREaXNwbGF5TmFtZTtcbiAgICB9XG5cbiAgICBub2RlVG9EYXRhLnNldChub2RlLCB7XG4gICAgICBjb3VudDogZGF0YSAhPSBudWxsID8gZGF0YS5jb3VudCArIDEgOiAxLFxuICAgICAgZXhwaXJhdGlvblRpbWU6XG4gICAgICAgIGRhdGEgIT0gbnVsbFxuICAgICAgICAgID8gTWF0aC5taW4oXG4gICAgICAgICAgICAgIG5vdyArIE1BWF9ESVNQTEFZX0RVUkFUSU9OLFxuICAgICAgICAgICAgICBkYXRhLmV4cGlyYXRpb25UaW1lICsgRElTUExBWV9EVVJBVElPTixcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IG5vdyArIERJU1BMQVlfRFVSQVRJT04sXG4gICAgICBsYXN0TWVhc3VyZWRBdCxcbiAgICAgIHJlY3QsXG4gICAgICBkaXNwbGF5TmFtZSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaWYgKHJlZHJhd1RpbWVvdXRJRCAhPT0gbnVsbCkge1xuICAgIGNsZWFyVGltZW91dChyZWRyYXdUaW1lb3V0SUQpO1xuICAgIHJlZHJhd1RpbWVvdXRJRCA9IG51bGw7XG4gIH1cblxuICBpZiAoZHJhd0FuaW1hdGlvbkZyYW1lSUQgPT09IG51bGwpIHtcbiAgICBkcmF3QW5pbWF0aW9uRnJhbWVJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShwcmVwYXJlVG9EcmF3KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlVG9EcmF3KCk6IHZvaWQge1xuICBkcmF3QW5pbWF0aW9uRnJhbWVJRCA9IG51bGw7XG4gIHJlZHJhd1RpbWVvdXRJRCA9IG51bGw7XG5cbiAgY29uc3Qgbm93ID0gZ2V0Q3VycmVudFRpbWUoKTtcbiAgbGV0IGVhcmxpZXN0RXhwaXJhdGlvbiA9IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgLy8gUmVtb3ZlIGFueSBpdGVtcyB0aGF0IGhhdmUgYWxyZWFkeSBleHBpcmVkLlxuICBub2RlVG9EYXRhLmZvckVhY2goKGRhdGEsIG5vZGUpID0+IHtcbiAgICBpZiAoZGF0YS5leHBpcmF0aW9uVGltZSA8IG5vdykge1xuICAgICAgbm9kZVRvRGF0YS5kZWxldGUobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVhcmxpZXN0RXhwaXJhdGlvbiA9IE1hdGgubWluKGVhcmxpZXN0RXhwaXJhdGlvbiwgZGF0YS5leHBpcmF0aW9uVGltZSk7XG4gICAgfVxuICB9KTtcblxuICBkcmF3KG5vZGVUb0RhdGEsIGFnZW50KTtcblxuICBpZiAoZWFybGllc3RFeHBpcmF0aW9uICE9PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgcmVkcmF3VGltZW91dElEID0gc2V0VGltZW91dChwcmVwYXJlVG9EcmF3LCBlYXJsaWVzdEV4cGlyYXRpb24gLSBub3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lYXN1cmVOb2RlKG5vZGU6IE9iamVjdCk6IFJlY3QgfCBudWxsIHtcbiAgaWYgKCFub2RlIHx8IHR5cGVvZiBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgY3VycmVudFdpbmRvdyA9IHdpbmRvdy5fX1JFQUNUX0RFVlRPT0xTX1RBUkdFVF9XSU5ET1dfXyB8fCB3aW5kb3c7XG5cbiAgcmV0dXJuIGdldE5lc3RlZEJvdW5kaW5nQ2xpZW50UmVjdChub2RlLCBjdXJyZW50V2luZG93KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/views/TraceUpdates/index.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/views/utils.js":
/*!***********************************************************!*\
  !*** ../react-devtools-shared/src/backend/views/utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extractHOCNames\": () => (/* binding */ extractHOCNames),\n/* harmony export */   \"getBoundingClientRectWithBorderOffset\": () => (/* binding */ getBoundingClientRectWithBorderOffset),\n/* harmony export */   \"getElementDimensions\": () => (/* binding */ getElementDimensions),\n/* harmony export */   \"getNestedBoundingClientRect\": () => (/* binding */ getNestedBoundingClientRect),\n/* harmony export */   \"getOwnerIframe\": () => (/* binding */ getOwnerIframe),\n/* harmony export */   \"getOwnerWindow\": () => (/* binding */ getOwnerWindow),\n/* harmony export */   \"mergeRectOffsets\": () => (/* binding */ mergeRectOffsets)\n/* harmony export */ });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// Get the window object for the document that a node belongs to,\n// or return null if it cannot be found (node not attached to DOM,\n// etc).\nfunction getOwnerWindow(node) {\n  if (!node.ownerDocument) {\n    return null;\n  }\n\n  return node.ownerDocument.defaultView;\n} // Get the iframe containing a node, or return null if it cannot\n// be found (node not within iframe, etc).\n\nfunction getOwnerIframe(node) {\n  var nodeWindow = getOwnerWindow(node);\n\n  if (nodeWindow) {\n    return nodeWindow.frameElement;\n  }\n\n  return null;\n} // Get a bounding client rect for a node, with an\n// offset added to compensate for its border.\n\nfunction getBoundingClientRectWithBorderOffset(node) {\n  var dimensions = getElementDimensions(node);\n  return mergeRectOffsets([node.getBoundingClientRect(), {\n    top: dimensions.borderTop,\n    left: dimensions.borderLeft,\n    bottom: dimensions.borderBottom,\n    right: dimensions.borderRight,\n    // This width and height won't get used by mergeRectOffsets (since this\n    // is not the first rect in the array), but we set them so that this\n    // object type checks as a ClientRect.\n    width: 0,\n    height: 0\n  }]);\n} // Add together the top, left, bottom, and right properties of\n// each ClientRect, but keep the width and height of the first one.\n\nfunction mergeRectOffsets(rects) {\n  return rects.reduce(function (previousRect, rect) {\n    if (previousRect == null) {\n      return rect;\n    }\n\n    return {\n      top: previousRect.top + rect.top,\n      left: previousRect.left + rect.left,\n      width: previousRect.width,\n      height: previousRect.height,\n      bottom: previousRect.bottom + rect.bottom,\n      right: previousRect.right + rect.right\n    };\n  });\n} // Calculate a boundingClientRect for a node relative to boundaryWindow,\n// taking into account any offsets caused by intermediate iframes.\n\nfunction getNestedBoundingClientRect(node, boundaryWindow) {\n  var ownerIframe = getOwnerIframe(node);\n\n  if (ownerIframe && ownerIframe !== boundaryWindow) {\n    var rects = [node.getBoundingClientRect()];\n    var currentIframe = ownerIframe;\n    var onlyOneMore = false;\n\n    while (currentIframe) {\n      var rect = getBoundingClientRectWithBorderOffset(currentIframe);\n      rects.push(rect);\n      currentIframe = getOwnerIframe(currentIframe);\n\n      if (onlyOneMore) {\n        break;\n      } // We don't want to calculate iframe offsets upwards beyond\n      // the iframe containing the boundaryWindow, but we\n      // need to calculate the offset relative to the boundaryWindow.\n\n\n      if (currentIframe && getOwnerWindow(currentIframe) === boundaryWindow) {\n        onlyOneMore = true;\n      }\n    }\n\n    return mergeRectOffsets(rects);\n  } else {\n    return node.getBoundingClientRect();\n  }\n}\nfunction getElementDimensions(domElement) {\n  var calculatedStyle = window.getComputedStyle(domElement);\n  return {\n    borderLeft: parseInt(calculatedStyle.borderLeftWidth, 10),\n    borderRight: parseInt(calculatedStyle.borderRightWidth, 10),\n    borderTop: parseInt(calculatedStyle.borderTopWidth, 10),\n    borderBottom: parseInt(calculatedStyle.borderBottomWidth, 10),\n    marginLeft: parseInt(calculatedStyle.marginLeft, 10),\n    marginRight: parseInt(calculatedStyle.marginRight, 10),\n    marginTop: parseInt(calculatedStyle.marginTop, 10),\n    marginBottom: parseInt(calculatedStyle.marginBottom, 10),\n    paddingLeft: parseInt(calculatedStyle.paddingLeft, 10),\n    paddingRight: parseInt(calculatedStyle.paddingRight, 10),\n    paddingTop: parseInt(calculatedStyle.paddingTop, 10),\n    paddingBottom: parseInt(calculatedStyle.paddingBottom, 10)\n  };\n}\nfunction extractHOCNames(displayName) {\n  if (!displayName) return {\n    baseComponentName: '',\n    hocNames: []\n  };\n  var hocRegex = /([A-Z][a-zA-Z0-9]*?)\\((.*)\\)/g;\n  var hocNames = [];\n  var baseComponentName = displayName;\n  var match;\n\n  while ((match = hocRegex.exec(baseComponentName)) != null) {\n    if (Array.isArray(match)) {\n      var _match = match,\n          _match2 = _slicedToArray(_match, 3),\n          hocName = _match2[1],\n          inner = _match2[2];\n\n      hocNames.push(hocName);\n      baseComponentName = inner;\n    }\n  }\n\n  return {\n    baseComponentName: baseComponentName,\n    hocNames: hocNames\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/views/utils.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/bridge.js":
/*!**********************************************!*\
  !*** ../react-devtools-shared/src/bridge.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BRIDGE_PROTOCOL\": () => (/* binding */ BRIDGE_PROTOCOL),\n/* harmony export */   \"currentBridgeProtocol\": () => (/* binding */ currentBridgeProtocol),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"../react-devtools-shared/src/events.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n// Bump protocol version whenever a backwards breaking change is made\n// in the messages sent between BackendBridge and FrontendBridge.\n// This mapping is embedded in both frontend and backend builds.\n//\n// The backend protocol will always be the latest entry in the BRIDGE_PROTOCOL array.\n//\n// When an older frontend connects to a newer backend,\n// the backend can send the minNpmVersion and the frontend can display an NPM upgrade prompt.\n//\n// When a newer frontend connects with an older protocol version,\n// the frontend can use the embedded minNpmVersion/maxNpmVersion values to display a downgrade prompt.\nvar BRIDGE_PROTOCOL = [// This version technically never existed,\n// but a backwards breaking change was added in 4.11,\n// so the safest guess to downgrade the frontend would be to version 4.10.\n{\n  version: 0,\n  minNpmVersion: '\"<4.11.0\"',\n  maxNpmVersion: '\"<4.11.0\"'\n}, // Versions 4.11.x – 4.12.x contained the backwards breaking change,\n// but we didn't add the \"fix\" of checking the protocol version until 4.13,\n// so we don't recommend downgrading to 4.11 or 4.12.\n{\n  version: 1,\n  minNpmVersion: '4.13.0',\n  maxNpmVersion: '4.21.0'\n}, // Version 2 adds a StrictMode-enabled and supports-StrictMode bits to add-root operation.\n{\n  version: 2,\n  minNpmVersion: '4.22.0',\n  maxNpmVersion: null\n}];\nvar currentBridgeProtocol = BRIDGE_PROTOCOL[BRIDGE_PROTOCOL.length - 1];\n\nvar Bridge = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Bridge, _EventEmitter);\n\n  var _super = _createSuper(Bridge);\n\n  function Bridge(wall) {\n    var _this;\n\n    _classCallCheck(this, Bridge);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"_isShutdown\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_messageQueue\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"_scheduledFlush\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_wallUnlisten\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_flush\", function () {\n      // This method is used after the bridge is marked as destroyed in shutdown sequence,\n      // so we do not bail out if the bridge marked as destroyed.\n      // It is a private method that the bridge ensures is only called at the right times.\n      try {\n        if (_this._messageQueue.length) {\n          for (var i = 0; i < _this._messageQueue.length; i += 2) {\n            var _this$_wall;\n\n            (_this$_wall = _this._wall).send.apply(_this$_wall, [_this._messageQueue[i]].concat(_toConsumableArray(_this._messageQueue[i + 1])));\n          }\n\n          _this._messageQueue.length = 0;\n        }\n      } finally {\n        // We set this at the end in case new messages are added synchronously above.\n        // They're already handled so they shouldn't queue more flushes.\n        _this._scheduledFlush = false;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"overrideValueAtPath\", function (_ref) {\n      var id = _ref.id,\n          path = _ref.path,\n          rendererID = _ref.rendererID,\n          type = _ref.type,\n          value = _ref.value;\n\n      switch (type) {\n        case 'context':\n          _this.send('overrideContext', {\n            id: id,\n            path: path,\n            rendererID: rendererID,\n            wasForwarded: true,\n            value: value\n          });\n\n          break;\n\n        case 'hooks':\n          _this.send('overrideHookState', {\n            id: id,\n            path: path,\n            rendererID: rendererID,\n            wasForwarded: true,\n            value: value\n          });\n\n          break;\n\n        case 'props':\n          _this.send('overrideProps', {\n            id: id,\n            path: path,\n            rendererID: rendererID,\n            wasForwarded: true,\n            value: value\n          });\n\n          break;\n\n        case 'state':\n          _this.send('overrideState', {\n            id: id,\n            path: path,\n            rendererID: rendererID,\n            wasForwarded: true,\n            value: value\n          });\n\n          break;\n      }\n    });\n\n    _this._wall = wall;\n    _this._wallUnlisten = wall.listen(function (message) {\n      if (message && message.event) {\n        _assertThisInitialized(_this).emit(message.event, message.payload);\n      }\n    }) || null; // Temporarily support older standalone front-ends sending commands to newer embedded backends.\n    // We do this because React Native embeds the React DevTools backend,\n    // but cannot control which version of the frontend users use.\n\n    _this.addListener('overrideValueAtPath', _this.overrideValueAtPath);\n\n    return _this;\n  } // Listening directly to the wall isn't advised.\n  // It can be used to listen for legacy (v3) messages (since they use a different format).\n\n\n  _createClass(Bridge, [{\n    key: \"send\",\n    value: function send(event) {\n      if (this._isShutdown) {\n        console.warn(\"Cannot send message \\\"\".concat(event, \"\\\" through a Bridge that has been shutdown.\"));\n        return;\n      } // When we receive a message:\n      // - we add it to our queue of messages to be sent\n      // - if there hasn't been a message recently, we set a timer for 0 ms in\n      //   the future, allowing all messages created in the same tick to be sent\n      //   together\n      // - if there *has* been a message flushed in the last BATCH_DURATION ms\n      //   (or we're waiting for our setTimeout-0 to fire), then _timeoutID will\n      //   be set, and we'll simply add to the queue and wait for that\n\n\n      for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        payload[_key - 1] = arguments[_key];\n      }\n\n      this._messageQueue.push(event, payload);\n\n      if (!this._scheduledFlush) {\n        this._scheduledFlush = true; // $FlowFixMe\n\n        if (typeof devtoolsJestTestScheduler === 'function') {\n          // This exists just for our own jest tests.\n          // They're written in such a way that we can neither mock queueMicrotask\n          // because then we break React DOM and we can't not mock it because then\n          // we can't synchronously flush it. So they need to be rewritten.\n          // $FlowFixMe\n          devtoolsJestTestScheduler(this._flush); // eslint-disable-line no-undef\n        } else {\n          queueMicrotask(this._flush);\n        }\n      }\n    }\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {\n      if (this._isShutdown) {\n        console.warn('Bridge was already shutdown.');\n        return;\n      } // Queue the shutdown outgoing message for subscribers.\n\n\n      this.emit('shutdown');\n      this.send('shutdown'); // Mark this bridge as destroyed, i.e. disable its public API.\n\n      this._isShutdown = true; // Disable the API inherited from EventEmitter that can add more listeners and send more messages.\n      // $FlowFixMe[cannot-write] This property is not writable.\n\n      this.addListener = function () {}; // $FlowFixMe[cannot-write] This property is not writable.\n\n\n      this.emit = function () {}; // NOTE: There's also EventEmitter API like `on` and `prependListener` that we didn't add to our Flow type of EventEmitter.\n      // Unsubscribe this bridge incoming message listeners to be sure, and so they don't have to do that.\n\n\n      this.removeAllListeners(); // Stop accepting and emitting incoming messages from the wall.\n\n      var wallUnlisten = this._wallUnlisten;\n\n      if (wallUnlisten) {\n        wallUnlisten();\n      } // Synchronously flush all queued outgoing messages.\n      // At this step the subscribers' code may run in this call stack.\n\n\n      do {\n        this._flush();\n      } while (this._messageQueue.length);\n    }\n  }, {\n    key: \"wall\",\n    get: function get() {\n      return this._wall;\n    }\n  }]);\n\n  return Bridge;\n}(_events__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Bridge);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/bridge.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/config/DevToolsFeatureFlags.core-oss.js":
/*!****************************************************************************!*\
  !*** ../react-devtools-shared/src/config/DevToolsFeatureFlags.core-oss.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"enableLogger\": () => (/* binding */ enableLogger),\n/* harmony export */   \"enableStyleXFeatures\": () => (/* binding */ enableStyleXFeatures),\n/* harmony export */   \"isInternalFacebookBuild\": () => (/* binding */ isInternalFacebookBuild)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/************************************************************************\n * This file is forked between different DevTools implementations.\n * It should never be imported directly!\n * It should always be imported from \"react-devtools-feature-flags\".\n ************************************************************************/\nvar enableLogger = false;\nvar enableStyleXFeatures = false;\nvar isInternalFacebookBuild = false;\n/************************************************************************\n * Do not edit the code below.\n * It ensures this fork exports the same types as the default flags file.\n ************************************************************************/\n\n// Flow magic to verify the exports of this file match the original version.\nnull;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9jb25maWcvRGV2VG9vbHNGZWF0dXJlRmxhZ3MuY29yZS1vc3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7OztBQVNBOzs7OztBQU1BO0FBQ0E7QUFDQTtBQUVBOzs7OztBQVFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2NvbmZpZy9EZXZUb29sc0ZlYXR1cmVGbGFncy5jb3JlLW9zcy5qcz8wYWU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIFRoaXMgZmlsZSBpcyBmb3JrZWQgYmV0d2VlbiBkaWZmZXJlbnQgRGV2VG9vbHMgaW1wbGVtZW50YXRpb25zLlxuICogSXQgc2hvdWxkIG5ldmVyIGJlIGltcG9ydGVkIGRpcmVjdGx5IVxuICogSXQgc2hvdWxkIGFsd2F5cyBiZSBpbXBvcnRlZCBmcm9tIFwicmVhY3QtZGV2dG9vbHMtZmVhdHVyZS1mbGFnc1wiLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuZXhwb3J0IGNvbnN0IGVuYWJsZUxvZ2dlciA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IGVuYWJsZVN0eWxlWEZlYXR1cmVzID0gZmFsc2U7XG5leHBvcnQgY29uc3QgaXNJbnRlcm5hbEZhY2Vib29rQnVpbGQgPSBmYWxzZTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogRG8gbm90IGVkaXQgdGhlIGNvZGUgYmVsb3cuXG4gKiBJdCBlbnN1cmVzIHRoaXMgZm9yayBleHBvcnRzIHRoZSBzYW1lIHR5cGVzIGFzIHRoZSBkZWZhdWx0IGZsYWdzIGZpbGUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgdHlwZW9mICogYXMgRmVhdHVyZUZsYWdzVHlwZSBmcm9tICcuL0RldlRvb2xzRmVhdHVyZUZsYWdzLmRlZmF1bHQnO1xuaW1wb3J0IHR5cGVvZiAqIGFzIEV4cG9ydHNUeXBlIGZyb20gJy4vRGV2VG9vbHNGZWF0dXJlRmxhZ3MuY29yZS1vc3MnO1xuXG4vLyBGbG93IG1hZ2ljIHRvIHZlcmlmeSB0aGUgZXhwb3J0cyBvZiB0aGlzIGZpbGUgbWF0Y2ggdGhlIG9yaWdpbmFsIHZlcnNpb24uXG4oKCgobnVsbDogYW55KTogRXhwb3J0c1R5cGUpOiBGZWF0dXJlRmxhZ3NUeXBlKTogRXhwb3J0c1R5cGUpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/config/DevToolsFeatureFlags.core-oss.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/constants.js":
/*!*************************************************!*\
  !*** ../react-devtools-shared/src/constants.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ANSI_STYLE_DIMMING_TEMPLATE\": () => (/* binding */ ANSI_STYLE_DIMMING_TEMPLATE),\n/* harmony export */   \"ANSI_STYLE_DIMMING_TEMPLATE_WITH_COMPONENT_STACK\": () => (/* binding */ ANSI_STYLE_DIMMING_TEMPLATE_WITH_COMPONENT_STACK),\n/* harmony export */   \"CHROME_WEBSTORE_EXTENSION_ID\": () => (/* binding */ CHROME_WEBSTORE_EXTENSION_ID),\n/* harmony export */   \"FIREFOX_CONSOLE_DIMMING_COLOR\": () => (/* binding */ FIREFOX_CONSOLE_DIMMING_COLOR),\n/* harmony export */   \"INTERNAL_EXTENSION_ID\": () => (/* binding */ INTERNAL_EXTENSION_ID),\n/* harmony export */   \"LOCAL_EXTENSION_ID\": () => (/* binding */ LOCAL_EXTENSION_ID),\n/* harmony export */   \"LOCAL_STORAGE_BROWSER_THEME\": () => (/* binding */ LOCAL_STORAGE_BROWSER_THEME),\n/* harmony export */   \"LOCAL_STORAGE_COMPONENT_FILTER_PREFERENCES_KEY\": () => (/* binding */ LOCAL_STORAGE_COMPONENT_FILTER_PREFERENCES_KEY),\n/* harmony export */   \"LOCAL_STORAGE_DEFAULT_TAB_KEY\": () => (/* binding */ LOCAL_STORAGE_DEFAULT_TAB_KEY),\n/* harmony export */   \"LOCAL_STORAGE_OPEN_IN_EDITOR_URL\": () => (/* binding */ LOCAL_STORAGE_OPEN_IN_EDITOR_URL),\n/* harmony export */   \"LOCAL_STORAGE_OPEN_IN_EDITOR_URL_PRESET\": () => (/* binding */ LOCAL_STORAGE_OPEN_IN_EDITOR_URL_PRESET),\n/* harmony export */   \"LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY\": () => (/* binding */ LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY),\n/* harmony export */   \"LOCAL_STORAGE_SUPPORTS_PROFILING_KEY\": () => (/* binding */ LOCAL_STORAGE_SUPPORTS_PROFILING_KEY),\n/* harmony export */   \"LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY\": () => (/* binding */ LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY),\n/* harmony export */   \"PROFILER_EXPORT_VERSION\": () => (/* binding */ PROFILER_EXPORT_VERSION),\n/* harmony export */   \"PROFILING_FLAG_BASIC_SUPPORT\": () => (/* binding */ PROFILING_FLAG_BASIC_SUPPORT),\n/* harmony export */   \"PROFILING_FLAG_TIMELINE_SUPPORT\": () => (/* binding */ PROFILING_FLAG_TIMELINE_SUPPORT),\n/* harmony export */   \"SESSION_STORAGE_LAST_SELECTION_KEY\": () => (/* binding */ SESSION_STORAGE_LAST_SELECTION_KEY),\n/* harmony export */   \"SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY\": () => (/* binding */ SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY),\n/* harmony export */   \"SESSION_STORAGE_RECORD_TIMELINE_KEY\": () => (/* binding */ SESSION_STORAGE_RECORD_TIMELINE_KEY),\n/* harmony export */   \"SESSION_STORAGE_RELOAD_AND_PROFILE_KEY\": () => (/* binding */ SESSION_STORAGE_RELOAD_AND_PROFILE_KEY),\n/* harmony export */   \"TREE_OPERATION_ADD\": () => (/* binding */ TREE_OPERATION_ADD),\n/* harmony export */   \"TREE_OPERATION_REMOVE\": () => (/* binding */ TREE_OPERATION_REMOVE),\n/* harmony export */   \"TREE_OPERATION_REMOVE_ROOT\": () => (/* binding */ TREE_OPERATION_REMOVE_ROOT),\n/* harmony export */   \"TREE_OPERATION_REORDER_CHILDREN\": () => (/* binding */ TREE_OPERATION_REORDER_CHILDREN),\n/* harmony export */   \"TREE_OPERATION_SET_SUBTREE_MODE\": () => (/* binding */ TREE_OPERATION_SET_SUBTREE_MODE),\n/* harmony export */   \"TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS\": () => (/* binding */ TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS),\n/* harmony export */   \"TREE_OPERATION_UPDATE_TREE_BASE_DURATION\": () => (/* binding */ TREE_OPERATION_UPDATE_TREE_BASE_DURATION),\n/* harmony export */   \"__DEBUG__\": () => (/* binding */ __DEBUG__),\n/* harmony export */   \"__PERFORMANCE_PROFILE__\": () => (/* binding */ __PERFORMANCE_PROFILE__)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar CHROME_WEBSTORE_EXTENSION_ID = 'fmkadmapgofadopljbjfkapdkoienihi';\nvar INTERNAL_EXTENSION_ID = 'dnjnjgbfilfphmojnmhliehogmojhclc';\nvar LOCAL_EXTENSION_ID = 'ikiahnapldjmdmpkmfhjdjilojjhgcbf'; // Flip this flag to true to enable verbose console debug logging.\n\nvar __DEBUG__ = false; // Flip this flag to true to enable performance.mark() and performance.measure() timings.\n\nvar __PERFORMANCE_PROFILE__ = false;\nvar TREE_OPERATION_ADD = 1;\nvar TREE_OPERATION_REMOVE = 2;\nvar TREE_OPERATION_REORDER_CHILDREN = 3;\nvar TREE_OPERATION_UPDATE_TREE_BASE_DURATION = 4;\nvar TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS = 5;\nvar TREE_OPERATION_REMOVE_ROOT = 6;\nvar TREE_OPERATION_SET_SUBTREE_MODE = 7;\nvar PROFILING_FLAG_BASIC_SUPPORT = 1;\nvar PROFILING_FLAG_TIMELINE_SUPPORT = 2;\nvar LOCAL_STORAGE_DEFAULT_TAB_KEY = 'React::DevTools::defaultTab';\nvar LOCAL_STORAGE_COMPONENT_FILTER_PREFERENCES_KEY = 'React::DevTools::componentFilters';\nvar SESSION_STORAGE_LAST_SELECTION_KEY = 'React::DevTools::lastSelection';\nvar LOCAL_STORAGE_OPEN_IN_EDITOR_URL = 'React::DevTools::openInEditorUrl';\nvar LOCAL_STORAGE_OPEN_IN_EDITOR_URL_PRESET = 'React::DevTools::openInEditorUrlPreset';\nvar LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY = 'React::DevTools::parseHookNames';\nvar SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY = 'React::DevTools::recordChangeDescriptions';\nvar SESSION_STORAGE_RECORD_TIMELINE_KEY = 'React::DevTools::recordTimeline';\nvar SESSION_STORAGE_RELOAD_AND_PROFILE_KEY = 'React::DevTools::reloadAndProfile';\nvar LOCAL_STORAGE_BROWSER_THEME = 'React::DevTools::theme';\nvar LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY = 'React::DevTools::traceUpdatesEnabled';\nvar LOCAL_STORAGE_SUPPORTS_PROFILING_KEY = 'React::DevTools::supportsProfiling';\nvar PROFILER_EXPORT_VERSION = 5;\nvar FIREFOX_CONSOLE_DIMMING_COLOR = 'color: rgba(124, 124, 124, 0.75)';\nvar ANSI_STYLE_DIMMING_TEMPLATE = '\\x1b[2;38;2;124;124;124m%s\\x1b[0m';\nvar ANSI_STYLE_DIMMING_TEMPLATE_WITH_COMPONENT_STACK = '\\x1b[2;38;2;124;124;124m%s %o\\x1b[0m';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9jb25zdGFudHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBOztBQUdBOztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBR0E7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2NvbnN0YW50cy5qcz9hMzA5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmV4cG9ydCBjb25zdCBDSFJPTUVfV0VCU1RPUkVfRVhURU5TSU9OX0lEID0gJ2Zta2FkbWFwZ29mYWRvcGxqYmpma2FwZGtvaWVuaWhpJztcbmV4cG9ydCBjb25zdCBJTlRFUk5BTF9FWFRFTlNJT05fSUQgPSAnZG5qbmpnYmZpbGZwaG1vam5taGxpZWhvZ21vamhjbGMnO1xuZXhwb3J0IGNvbnN0IExPQ0FMX0VYVEVOU0lPTl9JRCA9ICdpa2lhaG5hcGxkam1kbXBrbWZoamRqaWxvampoZ2NiZic7XG5cbi8vIEZsaXAgdGhpcyBmbGFnIHRvIHRydWUgdG8gZW5hYmxlIHZlcmJvc2UgY29uc29sZSBkZWJ1ZyBsb2dnaW5nLlxuZXhwb3J0IGNvbnN0IF9fREVCVUdfXyA9IGZhbHNlO1xuXG4vLyBGbGlwIHRoaXMgZmxhZyB0byB0cnVlIHRvIGVuYWJsZSBwZXJmb3JtYW5jZS5tYXJrKCkgYW5kIHBlcmZvcm1hbmNlLm1lYXN1cmUoKSB0aW1pbmdzLlxuZXhwb3J0IGNvbnN0IF9fUEVSRk9STUFOQ0VfUFJPRklMRV9fID0gZmFsc2U7XG5cbmV4cG9ydCBjb25zdCBUUkVFX09QRVJBVElPTl9BREQgPSAxO1xuZXhwb3J0IGNvbnN0IFRSRUVfT1BFUkFUSU9OX1JFTU9WRSA9IDI7XG5leHBvcnQgY29uc3QgVFJFRV9PUEVSQVRJT05fUkVPUkRFUl9DSElMRFJFTiA9IDM7XG5leHBvcnQgY29uc3QgVFJFRV9PUEVSQVRJT05fVVBEQVRFX1RSRUVfQkFTRV9EVVJBVElPTiA9IDQ7XG5leHBvcnQgY29uc3QgVFJFRV9PUEVSQVRJT05fVVBEQVRFX0VSUk9SU19PUl9XQVJOSU5HUyA9IDU7XG5leHBvcnQgY29uc3QgVFJFRV9PUEVSQVRJT05fUkVNT1ZFX1JPT1QgPSA2O1xuZXhwb3J0IGNvbnN0IFRSRUVfT1BFUkFUSU9OX1NFVF9TVUJUUkVFX01PREUgPSA3O1xuXG5leHBvcnQgY29uc3QgUFJPRklMSU5HX0ZMQUdfQkFTSUNfU1VQUE9SVCA9IDBiMDE7XG5leHBvcnQgY29uc3QgUFJPRklMSU5HX0ZMQUdfVElNRUxJTkVfU1VQUE9SVCA9IDBiMTA7XG5cbmV4cG9ydCBjb25zdCBMT0NBTF9TVE9SQUdFX0RFRkFVTFRfVEFCX0tFWSA9ICdSZWFjdDo6RGV2VG9vbHM6OmRlZmF1bHRUYWInO1xuZXhwb3J0IGNvbnN0IExPQ0FMX1NUT1JBR0VfQ09NUE9ORU5UX0ZJTFRFUl9QUkVGRVJFTkNFU19LRVkgPVxuICAnUmVhY3Q6OkRldlRvb2xzOjpjb21wb25lbnRGaWx0ZXJzJztcbmV4cG9ydCBjb25zdCBTRVNTSU9OX1NUT1JBR0VfTEFTVF9TRUxFQ1RJT05fS0VZID1cbiAgJ1JlYWN0OjpEZXZUb29sczo6bGFzdFNlbGVjdGlvbic7XG5leHBvcnQgY29uc3QgTE9DQUxfU1RPUkFHRV9PUEVOX0lOX0VESVRPUl9VUkwgPVxuICAnUmVhY3Q6OkRldlRvb2xzOjpvcGVuSW5FZGl0b3JVcmwnO1xuZXhwb3J0IGNvbnN0IExPQ0FMX1NUT1JBR0VfT1BFTl9JTl9FRElUT1JfVVJMX1BSRVNFVCA9XG4gICdSZWFjdDo6RGV2VG9vbHM6Om9wZW5JbkVkaXRvclVybFByZXNldCc7XG5leHBvcnQgY29uc3QgTE9DQUxfU1RPUkFHRV9QQVJTRV9IT09LX05BTUVTX0tFWSA9XG4gICdSZWFjdDo6RGV2VG9vbHM6OnBhcnNlSG9va05hbWVzJztcbmV4cG9ydCBjb25zdCBTRVNTSU9OX1NUT1JBR0VfUkVDT1JEX0NIQU5HRV9ERVNDUklQVElPTlNfS0VZID1cbiAgJ1JlYWN0OjpEZXZUb29sczo6cmVjb3JkQ2hhbmdlRGVzY3JpcHRpb25zJztcbmV4cG9ydCBjb25zdCBTRVNTSU9OX1NUT1JBR0VfUkVDT1JEX1RJTUVMSU5FX0tFWSA9XG4gICdSZWFjdDo6RGV2VG9vbHM6OnJlY29yZFRpbWVsaW5lJztcbmV4cG9ydCBjb25zdCBTRVNTSU9OX1NUT1JBR0VfUkVMT0FEX0FORF9QUk9GSUxFX0tFWSA9XG4gICdSZWFjdDo6RGV2VG9vbHM6OnJlbG9hZEFuZFByb2ZpbGUnO1xuZXhwb3J0IGNvbnN0IExPQ0FMX1NUT1JBR0VfQlJPV1NFUl9USEVNRSA9ICdSZWFjdDo6RGV2VG9vbHM6OnRoZW1lJztcbmV4cG9ydCBjb25zdCBMT0NBTF9TVE9SQUdFX1RSQUNFX1VQREFURVNfRU5BQkxFRF9LRVkgPVxuICAnUmVhY3Q6OkRldlRvb2xzOjp0cmFjZVVwZGF0ZXNFbmFibGVkJztcbmV4cG9ydCBjb25zdCBMT0NBTF9TVE9SQUdFX1NVUFBPUlRTX1BST0ZJTElOR19LRVkgPVxuICAnUmVhY3Q6OkRldlRvb2xzOjpzdXBwb3J0c1Byb2ZpbGluZyc7XG5cbmV4cG9ydCBjb25zdCBQUk9GSUxFUl9FWFBPUlRfVkVSU0lPTiA9IDU7XG5cbmV4cG9ydCBjb25zdCBGSVJFRk9YX0NPTlNPTEVfRElNTUlOR19DT0xPUiA9ICdjb2xvcjogcmdiYSgxMjQsIDEyNCwgMTI0LCAwLjc1KSc7XG5leHBvcnQgY29uc3QgQU5TSV9TVFlMRV9ESU1NSU5HX1RFTVBMQVRFID0gJ1xceDFiWzI7Mzg7MjsxMjQ7MTI0OzEyNG0lc1xceDFiWzBtJztcbmV4cG9ydCBjb25zdCBBTlNJX1NUWUxFX0RJTU1JTkdfVEVNUExBVEVfV0lUSF9DT01QT05FTlRfU1RBQ0sgPVxuICAnXFx4MWJbMjszODsyOzEyNDsxMjQ7MTI0bSVzICVvXFx4MWJbMG0nO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/constants.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/devtools/constants.js":
/*!**********************************************************!*\
  !*** ../react-devtools-shared/src/devtools/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CHANGE_LOG_URL\": () => (/* binding */ CHANGE_LOG_URL),\n/* harmony export */   \"COMFORTABLE_LINE_HEIGHT\": () => (/* binding */ COMFORTABLE_LINE_HEIGHT),\n/* harmony export */   \"COMPACT_LINE_HEIGHT\": () => (/* binding */ COMPACT_LINE_HEIGHT),\n/* harmony export */   \"REACT_DEVTOOLS_WORKPLACE_URL\": () => (/* binding */ REACT_DEVTOOLS_WORKPLACE_URL),\n/* harmony export */   \"THEME_STYLES\": () => (/* binding */ THEME_STYLES),\n/* harmony export */   \"UNSUPPORTED_VERSION_URL\": () => (/* binding */ UNSUPPORTED_VERSION_URL)\n/* harmony export */ });\nvar CHANGE_LOG_URL = 'https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md';\nvar UNSUPPORTED_VERSION_URL = 'https://reactjs.org/blog/2019/08/15/new-react-devtools.html#how-do-i-get-the-old-version-back';\nvar REACT_DEVTOOLS_WORKPLACE_URL = 'https://fburl.com/react-devtools-workplace-group';\nvar THEME_STYLES = {\n  light: {\n    '--color-attribute-name': '#ef6632',\n    '--color-attribute-name-not-editable': '#23272f',\n    '--color-attribute-name-inverted': 'rgba(255, 255, 255, 0.7)',\n    '--color-attribute-value': '#1a1aa6',\n    '--color-attribute-value-inverted': '#ffffff',\n    '--color-attribute-editable-value': '#1a1aa6',\n    '--color-background': '#ffffff',\n    '--color-background-hover': 'rgba(0, 136, 250, 0.1)',\n    '--color-background-inactive': '#e5e5e5',\n    '--color-background-invalid': '#fff0f0',\n    '--color-background-selected': '#0088fa',\n    '--color-button-background': '#ffffff',\n    '--color-button-background-focus': '#ededed',\n    '--color-button': '#5f6673',\n    '--color-button-disabled': '#cfd1d5',\n    '--color-button-active': '#0088fa',\n    '--color-button-focus': '#23272f',\n    '--color-button-hover': '#23272f',\n    '--color-border': '#eeeeee',\n    '--color-commit-did-not-render-fill': '#cfd1d5',\n    '--color-commit-did-not-render-fill-text': '#000000',\n    '--color-commit-did-not-render-pattern': '#cfd1d5',\n    '--color-commit-did-not-render-pattern-text': '#333333',\n    '--color-commit-gradient-0': '#37afa9',\n    '--color-commit-gradient-1': '#63b19e',\n    '--color-commit-gradient-2': '#80b393',\n    '--color-commit-gradient-3': '#97b488',\n    '--color-commit-gradient-4': '#abb67d',\n    '--color-commit-gradient-5': '#beb771',\n    '--color-commit-gradient-6': '#cfb965',\n    '--color-commit-gradient-7': '#dfba57',\n    '--color-commit-gradient-8': '#efbb49',\n    '--color-commit-gradient-9': '#febc38',\n    '--color-commit-gradient-text': '#000000',\n    '--color-component-name': '#6a51b2',\n    '--color-component-name-inverted': '#ffffff',\n    '--color-component-badge-background': '#e6e6e6',\n    '--color-component-badge-background-inverted': 'rgba(255, 255, 255, 0.25)',\n    '--color-component-badge-count': '#777d88',\n    '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.7)',\n    '--color-console-error-badge-text': '#ffffff',\n    '--color-console-error-background': '#fff0f0',\n    '--color-console-error-border': '#ffd6d6',\n    '--color-console-error-icon': '#eb3941',\n    '--color-console-error-text': '#fe2e31',\n    '--color-console-warning-badge-text': '#000000',\n    '--color-console-warning-background': '#fffbe5',\n    '--color-console-warning-border': '#fff5c1',\n    '--color-console-warning-icon': '#f4bd00',\n    '--color-console-warning-text': '#64460c',\n    '--color-context-background': 'rgba(0,0,0,.9)',\n    '--color-context-background-hover': 'rgba(255, 255, 255, 0.1)',\n    '--color-context-background-selected': '#178fb9',\n    '--color-context-border': '#3d424a',\n    '--color-context-text': '#ffffff',\n    '--color-context-text-selected': '#ffffff',\n    '--color-dim': '#777d88',\n    '--color-dimmer': '#cfd1d5',\n    '--color-dimmest': '#eff0f1',\n    '--color-error-background': 'hsl(0, 100%, 97%)',\n    '--color-error-border': 'hsl(0, 100%, 92%)',\n    '--color-error-text': '#ff0000',\n    '--color-expand-collapse-toggle': '#777d88',\n    '--color-forget-badge-background': '#2683e2',\n    '--color-forget-badge-background-inverted': '#1a6bbc',\n    '--color-forget-text': '#fff',\n    '--color-link': '#0000ff',\n    '--color-modal-background': 'rgba(255, 255, 255, 0.75)',\n    '--color-bridge-version-npm-background': '#eff0f1',\n    '--color-bridge-version-npm-text': '#000000',\n    '--color-bridge-version-number': '#0088fa',\n    '--color-primitive-hook-badge-background': '#e5e5e5',\n    '--color-primitive-hook-badge-text': '#5f6673',\n    '--color-record-active': '#fc3a4b',\n    '--color-record-hover': '#3578e5',\n    '--color-record-inactive': '#0088fa',\n    '--color-resize-bar': '#eeeeee',\n    '--color-resize-bar-active': '#dcdcdc',\n    '--color-resize-bar-border': '#d1d1d1',\n    '--color-resize-bar-dot': '#333333',\n    '--color-timeline-internal-module': '#d1d1d1',\n    '--color-timeline-internal-module-hover': '#c9c9c9',\n    '--color-timeline-internal-module-text': '#444',\n    '--color-timeline-native-event': '#ccc',\n    '--color-timeline-native-event-hover': '#aaa',\n    '--color-timeline-network-primary': '#fcf3dc',\n    '--color-timeline-network-primary-hover': '#f0e7d1',\n    '--color-timeline-network-secondary': '#efc457',\n    '--color-timeline-network-secondary-hover': '#e3ba52',\n    '--color-timeline-priority-background': '#f6f6f6',\n    '--color-timeline-priority-border': '#eeeeee',\n    '--color-timeline-user-timing': '#c9cacd',\n    '--color-timeline-user-timing-hover': '#93959a',\n    '--color-timeline-react-idle': '#d3e5f6',\n    '--color-timeline-react-idle-hover': '#c3d9ef',\n    '--color-timeline-react-render': '#9fc3f3',\n    '--color-timeline-react-render-hover': '#83afe9',\n    '--color-timeline-react-render-text': '#11365e',\n    '--color-timeline-react-commit': '#c88ff0',\n    '--color-timeline-react-commit-hover': '#b281d6',\n    '--color-timeline-react-commit-text': '#3e2c4a',\n    '--color-timeline-react-layout-effects': '#b281d6',\n    '--color-timeline-react-layout-effects-hover': '#9d71bd',\n    '--color-timeline-react-layout-effects-text': '#3e2c4a',\n    '--color-timeline-react-passive-effects': '#b281d6',\n    '--color-timeline-react-passive-effects-hover': '#9d71bd',\n    '--color-timeline-react-passive-effects-text': '#3e2c4a',\n    '--color-timeline-react-schedule': '#9fc3f3',\n    '--color-timeline-react-schedule-hover': '#2683E2',\n    '--color-timeline-react-suspense-rejected': '#f1cc14',\n    '--color-timeline-react-suspense-rejected-hover': '#ffdf37',\n    '--color-timeline-react-suspense-resolved': '#a6e59f',\n    '--color-timeline-react-suspense-resolved-hover': '#89d281',\n    '--color-timeline-react-suspense-unresolved': '#c9cacd',\n    '--color-timeline-react-suspense-unresolved-hover': '#93959a',\n    '--color-timeline-thrown-error': '#ee1638',\n    '--color-timeline-thrown-error-hover': '#da1030',\n    '--color-timeline-text-color': '#000000',\n    '--color-timeline-text-dim-color': '#ccc',\n    '--color-timeline-react-work-border': '#eeeeee',\n    '--color-search-match': 'yellow',\n    '--color-search-match-current': '#f7923b',\n    '--color-selected-tree-highlight-active': 'rgba(0, 136, 250, 0.1)',\n    '--color-selected-tree-highlight-inactive': 'rgba(0, 0, 0, 0.05)',\n    '--color-scroll-caret': 'rgba(150, 150, 150, 0.5)',\n    '--color-tab-selected-border': '#0088fa',\n    '--color-text': '#000000',\n    '--color-text-invalid': '#ff0000',\n    '--color-text-selected': '#ffffff',\n    '--color-toggle-background-invalid': '#fc3a4b',\n    '--color-toggle-background-on': '#0088fa',\n    '--color-toggle-background-off': '#cfd1d5',\n    '--color-toggle-text': '#ffffff',\n    '--color-warning-background': '#fb3655',\n    '--color-warning-background-hover': '#f82042',\n    '--color-warning-text-color': '#ffffff',\n    '--color-warning-text-color-inverted': '#fd4d69',\n    // The styles below should be kept in sync with 'root.css'\n    // They are repeated there because they're used by e.g. tooltips or context menus\n    // which get rendered outside of the DOM subtree (where normal theme/styles are written).\n    '--color-scroll-thumb': '#c2c2c2',\n    '--color-scroll-track': '#fafafa',\n    '--color-tooltip-background': 'rgba(0, 0, 0, 0.9)',\n    '--color-tooltip-text': '#ffffff'\n  },\n  dark: {\n    '--color-attribute-name': '#9d87d2',\n    '--color-attribute-name-not-editable': '#ededed',\n    '--color-attribute-name-inverted': '#282828',\n    '--color-attribute-value': '#cedae0',\n    '--color-attribute-value-inverted': '#ffffff',\n    '--color-attribute-editable-value': 'yellow',\n    '--color-background': '#282c34',\n    '--color-background-hover': 'rgba(255, 255, 255, 0.1)',\n    '--color-background-inactive': '#3d424a',\n    '--color-background-invalid': '#5c0000',\n    '--color-background-selected': '#178fb9',\n    '--color-button-background': '#282c34',\n    '--color-button-background-focus': '#3d424a',\n    '--color-button': '#afb3b9',\n    '--color-button-active': '#61dafb',\n    '--color-button-disabled': '#4f5766',\n    '--color-button-focus': '#a2e9fc',\n    '--color-button-hover': '#ededed',\n    '--color-border': '#3d424a',\n    '--color-commit-did-not-render-fill': '#777d88',\n    '--color-commit-did-not-render-fill-text': '#000000',\n    '--color-commit-did-not-render-pattern': '#666c77',\n    '--color-commit-did-not-render-pattern-text': '#ffffff',\n    '--color-commit-gradient-0': '#37afa9',\n    '--color-commit-gradient-1': '#63b19e',\n    '--color-commit-gradient-2': '#80b393',\n    '--color-commit-gradient-3': '#97b488',\n    '--color-commit-gradient-4': '#abb67d',\n    '--color-commit-gradient-5': '#beb771',\n    '--color-commit-gradient-6': '#cfb965',\n    '--color-commit-gradient-7': '#dfba57',\n    '--color-commit-gradient-8': '#efbb49',\n    '--color-commit-gradient-9': '#febc38',\n    '--color-commit-gradient-text': '#000000',\n    '--color-component-name': '#61dafb',\n    '--color-component-name-inverted': '#282828',\n    '--color-component-badge-background': '#5e6167',\n    '--color-component-badge-background-inverted': '#46494e',\n    '--color-component-badge-count': '#8f949d',\n    '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.85)',\n    '--color-console-error-badge-text': '#000000',\n    '--color-console-error-background': '#290000',\n    '--color-console-error-border': '#5c0000',\n    '--color-console-error-icon': '#eb3941',\n    '--color-console-error-text': '#fc7f7f',\n    '--color-console-warning-badge-text': '#000000',\n    '--color-console-warning-background': '#332b00',\n    '--color-console-warning-border': '#665500',\n    '--color-console-warning-icon': '#f4bd00',\n    '--color-console-warning-text': '#f5f2ed',\n    '--color-context-background': 'rgba(255,255,255,.95)',\n    '--color-context-background-hover': 'rgba(0, 136, 250, 0.1)',\n    '--color-context-background-selected': '#0088fa',\n    '--color-context-border': '#eeeeee',\n    '--color-context-text': '#000000',\n    '--color-context-text-selected': '#ffffff',\n    '--color-dim': '#8f949d',\n    '--color-dimmer': '#777d88',\n    '--color-dimmest': '#4f5766',\n    '--color-error-background': '#200',\n    '--color-error-border': '#900',\n    '--color-error-text': '#f55',\n    '--color-expand-collapse-toggle': '#8f949d',\n    '--color-forget-badge-background': '#2683e2',\n    '--color-forget-badge-background-inverted': '#1a6bbc',\n    '--color-forget-text': '#fff',\n    '--color-link': '#61dafb',\n    '--color-modal-background': 'rgba(0, 0, 0, 0.75)',\n    '--color-bridge-version-npm-background': 'rgba(0, 0, 0, 0.25)',\n    '--color-bridge-version-npm-text': '#ffffff',\n    '--color-bridge-version-number': 'yellow',\n    '--color-primitive-hook-badge-background': 'rgba(0, 0, 0, 0.25)',\n    '--color-primitive-hook-badge-text': 'rgba(255, 255, 255, 0.7)',\n    '--color-record-active': '#fc3a4b',\n    '--color-record-hover': '#a2e9fc',\n    '--color-record-inactive': '#61dafb',\n    '--color-resize-bar': '#282c34',\n    '--color-resize-bar-active': '#31363f',\n    '--color-resize-bar-border': '#3d424a',\n    '--color-resize-bar-dot': '#cfd1d5',\n    '--color-timeline-internal-module': '#303542',\n    '--color-timeline-internal-module-hover': '#363b4a',\n    '--color-timeline-internal-module-text': '#7f8899',\n    '--color-timeline-native-event': '#b2b2b2',\n    '--color-timeline-native-event-hover': '#949494',\n    '--color-timeline-network-primary': '#fcf3dc',\n    '--color-timeline-network-primary-hover': '#e3dbc5',\n    '--color-timeline-network-secondary': '#efc457',\n    '--color-timeline-network-secondary-hover': '#d6af4d',\n    '--color-timeline-priority-background': '#1d2129',\n    '--color-timeline-priority-border': '#282c34',\n    '--color-timeline-user-timing': '#c9cacd',\n    '--color-timeline-user-timing-hover': '#93959a',\n    '--color-timeline-react-idle': '#3d485b',\n    '--color-timeline-react-idle-hover': '#465269',\n    '--color-timeline-react-render': '#2683E2',\n    '--color-timeline-react-render-hover': '#1a76d4',\n    '--color-timeline-react-render-text': '#11365e',\n    '--color-timeline-react-commit': '#731fad',\n    '--color-timeline-react-commit-hover': '#611b94',\n    '--color-timeline-react-commit-text': '#e5c1ff',\n    '--color-timeline-react-layout-effects': '#611b94',\n    '--color-timeline-react-layout-effects-hover': '#51167a',\n    '--color-timeline-react-layout-effects-text': '#e5c1ff',\n    '--color-timeline-react-passive-effects': '#611b94',\n    '--color-timeline-react-passive-effects-hover': '#51167a',\n    '--color-timeline-react-passive-effects-text': '#e5c1ff',\n    '--color-timeline-react-schedule': '#2683E2',\n    '--color-timeline-react-schedule-hover': '#1a76d4',\n    '--color-timeline-react-suspense-rejected': '#f1cc14',\n    '--color-timeline-react-suspense-rejected-hover': '#e4c00f',\n    '--color-timeline-react-suspense-resolved': '#a6e59f',\n    '--color-timeline-react-suspense-resolved-hover': '#89d281',\n    '--color-timeline-react-suspense-unresolved': '#c9cacd',\n    '--color-timeline-react-suspense-unresolved-hover': '#93959a',\n    '--color-timeline-thrown-error': '#fb3655',\n    '--color-timeline-thrown-error-hover': '#f82042',\n    '--color-timeline-text-color': '#282c34',\n    '--color-timeline-text-dim-color': '#555b66',\n    '--color-timeline-react-work-border': '#3d424a',\n    '--color-search-match': 'yellow',\n    '--color-search-match-current': '#f7923b',\n    '--color-selected-tree-highlight-active': 'rgba(23, 143, 185, 0.15)',\n    '--color-selected-tree-highlight-inactive': 'rgba(255, 255, 255, 0.05)',\n    '--color-scroll-caret': '#4f5766',\n    '--color-shadow': 'rgba(0, 0, 0, 0.5)',\n    '--color-tab-selected-border': '#178fb9',\n    '--color-text': '#ffffff',\n    '--color-text-invalid': '#ff8080',\n    '--color-text-selected': '#ffffff',\n    '--color-toggle-background-invalid': '#fc3a4b',\n    '--color-toggle-background-on': '#178fb9',\n    '--color-toggle-background-off': '#777d88',\n    '--color-toggle-text': '#ffffff',\n    '--color-warning-background': '#ee1638',\n    '--color-warning-background-hover': '#da1030',\n    '--color-warning-text-color': '#ffffff',\n    '--color-warning-text-color-inverted': '#ee1638',\n    // The styles below should be kept in sync with 'root.css'\n    // They are repeated there because they're used by e.g. tooltips or context menus\n    // which get rendered outside of the DOM subtree (where normal theme/styles are written).\n    '--color-scroll-thumb': '#afb3b9',\n    '--color-scroll-track': '#313640',\n    '--color-tooltip-background': 'rgba(255, 255, 255, 0.95)',\n    '--color-tooltip-text': '#000000'\n  },\n  compact: {\n    '--font-size-monospace-small': '9px',\n    '--font-size-monospace-normal': '11px',\n    '--font-size-monospace-large': '15px',\n    '--font-size-sans-small': '10px',\n    '--font-size-sans-normal': '12px',\n    '--font-size-sans-large': '14px',\n    '--line-height-data': '18px'\n  },\n  comfortable: {\n    '--font-size-monospace-small': '10px',\n    '--font-size-monospace-normal': '13px',\n    '--font-size-monospace-large': '17px',\n    '--font-size-sans-small': '12px',\n    '--font-size-sans-normal': '14px',\n    '--font-size-sans-large': '16px',\n    '--line-height-data': '22px'\n  }\n}; // HACK\n//\n// Sometimes the inline target is rendered before root styles are applied,\n// which would result in e.g. NaN itemSize being passed to react-window list.\n\nvar COMFORTABLE_LINE_HEIGHT = parseInt(THEME_STYLES.comfortable['--line-height-data'], 10);\nvar COMPACT_LINE_HEIGHT = parseInt(THEME_STYLES.compact['--line-height-data'], 10);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/devtools/constants.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/events.js":
/*!**********************************************!*\
  !*** ../react-devtools-shared/src/events.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EventEmitter)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar EventEmitter = /*#__PURE__*/function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n\n    _defineProperty(this, \"listenersMap\", new Map());\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(event, listener) {\n      var listeners = this.listenersMap.get(event);\n\n      if (listeners === undefined) {\n        this.listenersMap.set(event, [listener]);\n      } else {\n        var index = listeners.indexOf(listener);\n\n        if (index < 0) {\n          listeners.push(listener);\n        }\n      }\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var listeners = this.listenersMap.get(event);\n\n      if (listeners !== undefined) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        if (listeners.length === 1) {\n          // No need to clone or try/catch\n          var listener = listeners[0];\n          listener.apply(null, args);\n        } else {\n          var didThrow = false;\n          var caughtError = null;\n          var clonedListeners = Array.from(listeners);\n\n          for (var i = 0; i < clonedListeners.length; i++) {\n            var _listener = clonedListeners[i];\n\n            try {\n              _listener.apply(null, args);\n            } catch (error) {\n              if (caughtError === null) {\n                didThrow = true;\n                caughtError = error;\n              }\n            }\n          }\n\n          if (didThrow) {\n            throw caughtError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this.listenersMap.clear();\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(event, listener) {\n      var listeners = this.listenersMap.get(event);\n\n      if (listeners !== undefined) {\n        var index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n          listeners.splice(index, 1);\n        }\n      }\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9ldmVudHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBU0E7Ozs7QUFDQTs7Ozs7QUFHQTtBQUdBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBR0E7O0FBQ0E7QUFBQTtBQUhBO0FBR0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2V2ZW50cy5qcz85ZDIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50RW1pdHRlcjxFdmVudHM6IE9iamVjdD4ge1xuICBsaXN0ZW5lcnNNYXA6IE1hcDxzdHJpbmcsIEFycmF5PEZ1bmN0aW9uPj4gPSBuZXcgTWFwKCk7XG5cbiAgYWRkTGlzdGVuZXI8RXZlbnQ6ICRLZXlzPEV2ZW50cz4+KFxuICAgIGV2ZW50OiBFdmVudCxcbiAgICBsaXN0ZW5lcjogKC4uLiRFbGVtZW50VHlwZTxFdmVudHMsIEV2ZW50PikgPT4gYW55LFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc01hcC5nZXQoZXZlbnQpO1xuICAgIGlmIChsaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5saXN0ZW5lcnNNYXAuc2V0KGV2ZW50LCBbbGlzdGVuZXJdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbWl0PEV2ZW50OiAkS2V5czxFdmVudHM+PihcbiAgICBldmVudDogRXZlbnQsXG4gICAgLi4uYXJnczogJEVsZW1lbnRUeXBlPEV2ZW50cywgRXZlbnQ+XG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzTWFwLmdldChldmVudCk7XG4gICAgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAobGlzdGVuZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBObyBuZWVkIHRvIGNsb25lIG9yIHRyeS9jYXRjaFxuICAgICAgICBjb25zdCBsaXN0ZW5lciA9IGxpc3RlbmVyc1swXTtcbiAgICAgICAgbGlzdGVuZXIuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZGlkVGhyb3cgPSBmYWxzZTtcbiAgICAgICAgbGV0IGNhdWdodEVycm9yID0gbnVsbDtcblxuICAgICAgICBjb25zdCBjbG9uZWRMaXN0ZW5lcnMgPSBBcnJheS5mcm9tKGxpc3RlbmVycyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xvbmVkTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBjbG9uZWRMaXN0ZW5lcnNbaV07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoY2F1Z2h0RXJyb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZGlkVGhyb3cgPSB0cnVlO1xuICAgICAgICAgICAgICBjYXVnaHRFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaWRUaHJvdykge1xuICAgICAgICAgIHRocm93IGNhdWdodEVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIHRoaXMubGlzdGVuZXJzTWFwLmNsZWFyKCk7XG4gIH1cblxuICByZW1vdmVMaXN0ZW5lcihldmVudDogJEtleXM8RXZlbnRzPiwgbGlzdGVuZXI6IEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNNYXAuZ2V0KGV2ZW50KTtcbiAgICBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/events.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/frontend/types.js":
/*!******************************************************!*\
  !*** ../react-devtools-shared/src/frontend/types.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ComponentFilterDisplayName\": () => (/* binding */ ComponentFilterDisplayName),\n/* harmony export */   \"ComponentFilterElementType\": () => (/* binding */ ComponentFilterElementType),\n/* harmony export */   \"ComponentFilterEnvironmentName\": () => (/* binding */ ComponentFilterEnvironmentName),\n/* harmony export */   \"ComponentFilterHOC\": () => (/* binding */ ComponentFilterHOC),\n/* harmony export */   \"ComponentFilterLocation\": () => (/* binding */ ComponentFilterLocation),\n/* harmony export */   \"ElementTypeClass\": () => (/* binding */ ElementTypeClass),\n/* harmony export */   \"ElementTypeContext\": () => (/* binding */ ElementTypeContext),\n/* harmony export */   \"ElementTypeForwardRef\": () => (/* binding */ ElementTypeForwardRef),\n/* harmony export */   \"ElementTypeFunction\": () => (/* binding */ ElementTypeFunction),\n/* harmony export */   \"ElementTypeHostComponent\": () => (/* binding */ ElementTypeHostComponent),\n/* harmony export */   \"ElementTypeMemo\": () => (/* binding */ ElementTypeMemo),\n/* harmony export */   \"ElementTypeOtherOrUnknown\": () => (/* binding */ ElementTypeOtherOrUnknown),\n/* harmony export */   \"ElementTypeProfiler\": () => (/* binding */ ElementTypeProfiler),\n/* harmony export */   \"ElementTypeRoot\": () => (/* binding */ ElementTypeRoot),\n/* harmony export */   \"ElementTypeSuspense\": () => (/* binding */ ElementTypeSuspense),\n/* harmony export */   \"ElementTypeSuspenseList\": () => (/* binding */ ElementTypeSuspenseList),\n/* harmony export */   \"ElementTypeTracingMarker\": () => (/* binding */ ElementTypeTracingMarker),\n/* harmony export */   \"ElementTypeViewTransition\": () => (/* binding */ ElementTypeViewTransition),\n/* harmony export */   \"ElementTypeVirtual\": () => (/* binding */ ElementTypeVirtual),\n/* harmony export */   \"StrictMode\": () => (/* binding */ StrictMode)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * WARNING:\n * This file contains types that are designed for React DevTools UI and how it interacts with the backend.\n * They might be used in different versions of DevTools backends.\n * Be mindful of backwards compatibility when making changes.\n */\n// WARNING\n// The values below are referenced by ComponentFilters (which are saved via localStorage).\n// Do not change them or it will break previously saved user customizations.\n// If new element types are added, use new numbers rather than re-ordering existing ones.\n//\n// Changing these types is also a backwards breaking change for the standalone shell,\n// since the frontend and backend must share the same values-\n// and the backend is embedded in certain environments (like React Native).\nvar ElementTypeClass = 1;\nvar ElementTypeContext = 2;\nvar ElementTypeFunction = 5;\nvar ElementTypeForwardRef = 6;\nvar ElementTypeHostComponent = 7;\nvar ElementTypeMemo = 8;\nvar ElementTypeOtherOrUnknown = 9;\nvar ElementTypeProfiler = 10;\nvar ElementTypeRoot = 11;\nvar ElementTypeSuspense = 12;\nvar ElementTypeSuspenseList = 13;\nvar ElementTypeTracingMarker = 14;\nvar ElementTypeVirtual = 15;\nvar ElementTypeViewTransition = 16; // Different types of elements displayed in the Elements tree.\n// These types may be used to visually distinguish types,\n// or to enable/disable certain functionality.\n\n// WARNING\n// The values below are referenced by ComponentFilters (which are saved via localStorage).\n// Do not change them or it will break previously saved user customizations.\n// If new filter types are added, use new numbers rather than re-ordering existing ones.\nvar ComponentFilterElementType = 1;\nvar ComponentFilterDisplayName = 2;\nvar ComponentFilterLocation = 3;\nvar ComponentFilterHOC = 4;\nvar ComponentFilterEnvironmentName = 5;\nvar StrictMode = 1; // Each element on the frontend corresponds to an ElementID (e.g. a Fiber) on the backend.\n// Some of its information (e.g. id, type, displayName) come from the backend.\n// Other bits (e.g. weight and depth) are computed on the frontend for windowing and display purposes.\n// Elements are updated on a push basis– meaning the backend pushes updates to the frontend when needed.//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/frontend/types.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/hook.js":
/*!********************************************!*\
  !*** ../react-devtools-shared/src/hook.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"installHook\": () => (/* binding */ installHook)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/constants */ \"../react-devtools-shared/src/constants.js\");\n/* harmony import */ var _attachRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./attachRenderer */ \"../react-devtools-shared/src/attachRenderer.js\");\n/* harmony import */ var react_devtools_shared_src_backend_utils_formatConsoleArguments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-devtools-shared/src/backend/utils/formatConsoleArguments */ \"../react-devtools-shared/src/backend/utils/formatConsoleArguments.js\");\n/* harmony import */ var react_devtools_shared_src_backend_utils_formatWithStyles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-devtools-shared/src/backend/utils/formatWithStyles */ \"../react-devtools-shared/src/backend/utils/formatWithStyles.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Install the hook on window, which is an event emitter.\n * Note: this global hook __REACT_DEVTOOLS_GLOBAL_HOOK__ is a de facto public API.\n * It's especially important to avoid creating direct dependency on the DevTools Backend.\n * That's why we still inline the whole event emitter implementation,\n * the string format implementation, and part of the console implementation here.\n *\n * \n */\n\n\n\n // React's custom built component stack strings match \"\\s{4}in\"\n// Chrome's prefix matches \"\\s{4}at\"\n\nvar PREFIX_REGEX = /\\s{4}(in|at)\\s{1}/; // Firefox and Safari have no prefix (\"\")\n// but we can fallback to looking for location info (e.g. \"foo.js:12:345\")\n\nvar ROW_COLUMN_NUMBER_REGEX = /:\\d+:\\d+(\\n|$)/;\n\nfunction isStringComponentStack(text) {\n  return PREFIX_REGEX.test(text) || ROW_COLUMN_NUMBER_REGEX.test(text);\n} // We add a suffix to some frames that older versions of React didn't do.\n// To compare if it's equivalent we strip out the suffix to see if they're\n// still equivalent. Similarly, we sometimes use [] and sometimes () so we\n// strip them to for the comparison.\n\n\nvar frameDiffs = / \\(\\<anonymous\\>\\)$|\\@unknown\\:0\\:0$|\\(|\\)|\\[|\\]/gm;\n\nfunction areStackTracesEqual(a, b) {\n  return a.replace(frameDiffs, '') === b.replace(frameDiffs, '');\n}\n\nvar targetConsole = console;\nvar defaultProfilingSettings = {\n  recordChangeDescriptions: false,\n  recordTimeline: false\n};\nfunction installHook(target, maybeSettingsOrSettingsPromise) {\n  var shouldStartProfilingNow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var profilingSettings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultProfilingSettings;\n\n  if (target.hasOwnProperty('__REACT_DEVTOOLS_GLOBAL_HOOK__')) {\n    return null;\n  }\n\n  function detectReactBuildType(renderer) {\n    try {\n      if (typeof renderer.version === 'string') {\n        // React DOM Fiber (16+)\n        if (renderer.bundleType > 0) {\n          // This is not a production build.\n          // We are currently only using 0 (PROD) and 1 (DEV)\n          // but might add 2 (PROFILE) in the future.\n          return 'development';\n        } // React 16 uses flat bundles. If we report the bundle as production\n        // version, it means we also minified and envified it ourselves.\n\n\n        return 'production'; // Note: There is still a risk that the CommonJS entry point has not\n        // been envified or uglified. In this case the user would have *both*\n        // development and production bundle, but only the prod one would run.\n        // This would be really bad. We have a separate check for this because\n        // it happens *outside* of the renderer injection. See `checkDCE` below.\n      } // $FlowFixMe[method-unbinding]\n\n\n      var _toString = Function.prototype.toString;\n\n      if (renderer.Mount && renderer.Mount._renderNewRootComponent) {\n        // React DOM Stack\n        var renderRootCode = _toString.call(renderer.Mount._renderNewRootComponent); // Filter out bad results (if that is even possible):\n\n\n        if (renderRootCode.indexOf('function') !== 0) {\n          // Hope for the best if we're not sure.\n          return 'production';\n        } // Check for React DOM Stack < 15.1.0 in development.\n        // If it contains \"storedMeasure\" call, it's wrapped in ReactPerf (DEV only).\n        // This would be true even if it's minified, as method name still matches.\n\n\n        if (renderRootCode.indexOf('storedMeasure') !== -1) {\n          return 'development';\n        } // For other versions (and configurations) it's not so easy.\n        // Let's quickly exclude proper production builds.\n        // If it contains a warning message, it's either a DEV build,\n        // or an PROD build without proper dead code elimination.\n\n\n        if (renderRootCode.indexOf('should be a pure function') !== -1) {\n          // Now how do we tell a DEV build from a bad PROD build?\n          // If we see NODE_ENV, we're going to assume this is a dev build\n          // because most likely it is referring to an empty shim.\n          if (renderRootCode.indexOf('NODE_ENV') !== -1) {\n            return 'development';\n          } // If we see \"development\", we're dealing with an envified DEV build\n          // (such as the official React DEV UMD).\n\n\n          if (renderRootCode.indexOf('development') !== -1) {\n            return 'development';\n          } // I've seen process.env.NODE_ENV !== 'production' being smartly\n          // replaced by `true` in DEV by Webpack. I don't know how that\n          // works but we can safely guard against it because `true` was\n          // never used in the function source since it was written.\n\n\n          if (renderRootCode.indexOf('true') !== -1) {\n            return 'development';\n          } // By now either it is a production build that has not been minified,\n          // or (worse) this is a minified development build using non-standard\n          // environment (e.g. \"staging\"). We're going to look at whether\n          // the function argument name is mangled:\n\n\n          if ( // 0.13 to 15\n          renderRootCode.indexOf('nextElement') !== -1 || // 0.12\n          renderRootCode.indexOf('nextComponent') !== -1) {\n            // We can't be certain whether this is a development build or not,\n            // but it is definitely unminified.\n            return 'unminified';\n          } else {\n            // This is likely a minified development build.\n            return 'development';\n          }\n        } // By now we know that it's envified and dead code elimination worked,\n        // but what if it's still not minified? (Is this even possible?)\n        // Let's check matches for the first argument name.\n\n\n        if ( // 0.13 to 15\n        renderRootCode.indexOf('nextElement') !== -1 || // 0.12\n        renderRootCode.indexOf('nextComponent') !== -1) {\n          return 'unminified';\n        } // Seems like we're using the production version.\n        // However, the branch above is Stack-only so this is 15 or earlier.\n\n\n        return 'outdated';\n      }\n    } catch (err) {// Weird environments may exist.\n      // This code needs a higher fault tolerance\n      // because it runs even with closed DevTools.\n      // TODO: should we catch errors in all injected code, and not just this part?\n    }\n\n    return 'production';\n  }\n\n  function checkDCE(fn) {\n    // This runs for production versions of React.\n    // Needs to be super safe.\n    try {\n      // $FlowFixMe[method-unbinding]\n      var _toString2 = Function.prototype.toString;\n\n      var code = _toString2.call(fn); // This is a string embedded in the passed function under DEV-only\n      // condition. However the function executes only in PROD. Therefore,\n      // if we see it, dead code elimination did not work.\n\n\n      if (code.indexOf('^_^') > -1) {\n        // Remember to report during next injection.\n        hasDetectedBadDCE = true; // Bonus: throw an exception hoping that it gets picked up by a reporting system.\n        // Not synchronously so that it doesn't break the calling code.\n\n        setTimeout(function () {\n          throw new Error('React is running in production mode, but dead code ' + 'elimination has not been applied. Read how to correctly ' + 'configure React for production: ' + 'https://react.dev/link/perf-use-production-build');\n        });\n      }\n    } catch (err) {}\n  } // TODO: isProfiling should be stateful, and we should update it once profiling is finished\n\n\n  var isProfiling = shouldStartProfilingNow;\n  var uidCounter = 0;\n\n  function inject(renderer) {\n    var id = ++uidCounter;\n    renderers.set(id, renderer);\n    var reactBuildType = hasDetectedBadDCE ? 'deadcode' : detectReactBuildType(renderer);\n    hook.emit('renderer', {\n      id: id,\n      renderer: renderer,\n      reactBuildType: reactBuildType\n    });\n    var rendererInterface = (0,_attachRenderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(hook, id, renderer, target, isProfiling, profilingSettings);\n\n    if (rendererInterface != null) {\n      hook.rendererInterfaces.set(id, rendererInterface);\n      hook.emit('renderer-attached', {\n        id: id,\n        rendererInterface: rendererInterface\n      });\n    } else {\n      hook.hasUnsupportedRendererAttached = true;\n      hook.emit('unsupported-renderer-version');\n    }\n\n    return id;\n  }\n\n  var hasDetectedBadDCE = false;\n\n  function sub(event, fn) {\n    hook.on(event, fn);\n    return function () {\n      return hook.off(event, fn);\n    };\n  }\n\n  function on(event, fn) {\n    if (!listeners[event]) {\n      listeners[event] = [];\n    }\n\n    listeners[event].push(fn);\n  }\n\n  function off(event, fn) {\n    if (!listeners[event]) {\n      return;\n    }\n\n    var index = listeners[event].indexOf(fn);\n\n    if (index !== -1) {\n      listeners[event].splice(index, 1);\n    }\n\n    if (!listeners[event].length) {\n      delete listeners[event];\n    }\n  }\n\n  function emit(event, data) {\n    if (listeners[event]) {\n      listeners[event].map(function (fn) {\n        return fn(data);\n      });\n    }\n  }\n\n  function getFiberRoots(rendererID) {\n    var roots = fiberRoots;\n\n    if (!roots[rendererID]) {\n      roots[rendererID] = new Set();\n    }\n\n    return roots[rendererID];\n  }\n\n  function onCommitFiberUnmount(rendererID, fiber) {\n    var rendererInterface = rendererInterfaces.get(rendererID);\n\n    if (rendererInterface != null) {\n      rendererInterface.handleCommitFiberUnmount(fiber);\n    }\n  }\n\n  function onCommitFiberRoot(rendererID, root, priorityLevel) {\n    var mountedRoots = hook.getFiberRoots(rendererID);\n    var current = root.current;\n    var isKnownRoot = mountedRoots.has(root);\n    var isUnmounting = current.memoizedState == null || current.memoizedState.element == null; // Keep track of mounted roots so we can hydrate when DevTools connect.\n\n    if (!isKnownRoot && !isUnmounting) {\n      mountedRoots.add(root);\n    } else if (isKnownRoot && isUnmounting) {\n      mountedRoots.delete(root);\n    }\n\n    var rendererInterface = rendererInterfaces.get(rendererID);\n\n    if (rendererInterface != null) {\n      rendererInterface.handleCommitFiberRoot(root, priorityLevel);\n    }\n  }\n\n  function onPostCommitFiberRoot(rendererID, root) {\n    var rendererInterface = rendererInterfaces.get(rendererID);\n\n    if (rendererInterface != null) {\n      rendererInterface.handlePostCommitFiberRoot(root);\n    }\n  }\n\n  var isRunningDuringStrictModeInvocation = false;\n\n  function setStrictMode(rendererID, isStrictMode) {\n    isRunningDuringStrictModeInvocation = isStrictMode;\n\n    if (isStrictMode) {\n      patchConsoleForStrictMode();\n    } else {\n      unpatchConsoleForStrictMode();\n    }\n  }\n\n  var unpatchConsoleCallbacks = []; // For StrictMode we patch console once we are running in StrictMode and unpatch right after it\n  // So patching could happen multiple times during the runtime\n  // Notice how we don't patch error or warn methods, because they are already patched in patchConsoleForErrorsAndWarnings\n  // This will only happen once, when hook is installed\n\n  function patchConsoleForStrictMode() {\n    // Don't patch console in case settings were not injected\n    if (!hook.settings) {\n      return;\n    } // Don't patch twice\n\n\n    if (unpatchConsoleCallbacks.length > 0) {\n      return;\n    } // At this point 'error', 'warn', and 'trace' methods are already patched\n    // by React DevTools hook to append component stacks and other possible features.\n\n\n    var consoleMethodsToOverrideForStrictMode = ['group', 'groupCollapsed', 'info', 'log']; // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n    var _loop = function _loop() {\n      var method = _consoleMethodsToOver[_i];\n      var originalMethod = targetConsole[method];\n\n      var overrideMethod = function overrideMethod() {\n        var settings = hook.settings; // Something unexpected happened, fallback to just printing the console message.\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (settings == null) {\n          originalMethod.apply(void 0, args);\n          return;\n        }\n\n        if (settings.hideConsoleLogsInStrictMode) {\n          return;\n        } // Dim the text color of the double logs if we're not hiding them.\n        // Firefox doesn't support ANSI escape sequences\n\n\n        if (false) {} else {\n          originalMethod.apply(void 0, [react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_0__.ANSI_STYLE_DIMMING_TEMPLATE].concat(_toConsumableArray(react_devtools_shared_src_backend_utils_formatConsoleArguments__WEBPACK_IMPORTED_MODULE_2__[\"default\"].apply(void 0, args))));\n        }\n      };\n\n      targetConsole[method] = overrideMethod;\n      unpatchConsoleCallbacks.push(function () {\n        targetConsole[method] = originalMethod;\n      });\n    };\n\n    for (var _i = 0, _consoleMethodsToOver = consoleMethodsToOverrideForStrictMode; _i < _consoleMethodsToOver.length; _i++) {\n      _loop();\n    }\n  }\n\n  function unpatchConsoleForStrictMode() {\n    unpatchConsoleCallbacks.forEach(function (callback) {\n      return callback();\n    });\n    unpatchConsoleCallbacks.length = 0;\n  }\n\n  var openModuleRangesStack = [];\n  var moduleRanges = [];\n\n  function getTopStackFrameString(error) {\n    var frames = error.stack.split('\\n');\n    var frame = frames.length > 1 ? frames[1] : null;\n    return frame;\n  }\n\n  function getInternalModuleRanges() {\n    return moduleRanges;\n  }\n\n  function registerInternalModuleStart(error) {\n    var startStackFrame = getTopStackFrameString(error);\n\n    if (startStackFrame !== null) {\n      openModuleRangesStack.push(startStackFrame);\n    }\n  }\n\n  function registerInternalModuleStop(error) {\n    if (openModuleRangesStack.length > 0) {\n      var startStackFrame = openModuleRangesStack.pop();\n      var stopStackFrame = getTopStackFrameString(error);\n\n      if (stopStackFrame !== null) {\n        // $FlowFixMe[incompatible-call]\n        moduleRanges.push([startStackFrame, stopStackFrame]);\n      }\n    }\n  } // For Errors and Warnings we only patch console once\n\n\n  function patchConsoleForErrorsAndWarnings() {\n    // Don't patch console in case settings were not injected\n    if (!hook.settings) {\n      return;\n    }\n\n    var consoleMethodsToOverrideForErrorsAndWarnings = ['error', 'trace', 'warn']; // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n    var _loop2 = function _loop2() {\n      var method = _consoleMethodsToOver2[_i2];\n      var originalMethod = targetConsole[method];\n\n      var overrideMethod = function overrideMethod() {\n        var settings = hook.settings; // Something unexpected happened, fallback to just printing the console message.\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        if (settings == null) {\n          originalMethod.apply(void 0, args);\n          return;\n        }\n\n        if (isRunningDuringStrictModeInvocation && settings.hideConsoleLogsInStrictMode) {\n          return;\n        }\n\n        var injectedComponentStackAsFakeError = false;\n        var alreadyHasComponentStack = false;\n\n        if (settings.appendComponentStack) {\n          var lastArg = args.length > 0 ? args[args.length - 1] : null;\n          alreadyHasComponentStack = typeof lastArg === 'string' && isStringComponentStack(lastArg); // The last argument should be a component stack.\n        }\n\n        var shouldShowInlineWarningsAndErrors = settings.showInlineWarningsAndErrors && (method === 'error' || method === 'warn'); // Search for the first renderer that has a current Fiber.\n        // We don't handle the edge case of stacks for more than one (e.g. interleaved renderers?)\n        // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n        var _iterator = _createForOfIteratorHelper(hook.rendererInterfaces.values()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var rendererInterface = _step.value;\n            var onErrorOrWarning = rendererInterface.onErrorOrWarning,\n                getComponentStack = rendererInterface.getComponentStack;\n\n            try {\n              if (shouldShowInlineWarningsAndErrors) {\n                // patch() is called by two places: (1) the hook and (2) the renderer backend.\n                // The backend is what implements a message queue, so it's the only one that injects onErrorOrWarning.\n                if (onErrorOrWarning != null) {\n                  onErrorOrWarning(method, args.slice());\n                }\n              }\n            } catch (error) {\n              // Don't let a DevTools or React internal error interfere with logging.\n              setTimeout(function () {\n                throw error;\n              }, 0);\n            }\n\n            try {\n              if (settings.appendComponentStack && getComponentStack != null) {\n                // This needs to be directly in the wrapper so we can pop exactly one frame.\n                var topFrame = Error('react-stack-top-frame');\n                var match = getComponentStack(topFrame);\n\n                if (match !== null) {\n                  var enableOwnerStacks = match.enableOwnerStacks,\n                      componentStack = match.componentStack; // Empty string means we have a match but no component stack.\n                  // We don't need to look in other renderers but we also don't add anything.\n\n                  if (componentStack !== '') {\n                    // Create a fake Error so that when we print it we get native source maps. Every\n                    // browser will print the .stack property of the error and then parse it back for source\n                    // mapping. Rather than print the internal slot. So it doesn't matter that the internal\n                    // slot doesn't line up.\n                    var fakeError = new Error(''); // In Chromium, only the stack property is printed but in Firefox the <name>:<message>\n                    // gets printed so to make the colon make sense, we name it so we print Stack:\n                    // and similarly Safari leave an expandable slot.\n\n                    if (false) {} else {\n                      fakeError.name = enableOwnerStacks ? 'Stack' : 'Component Stack'; // This gets printed\n                    } // In Chromium, the stack property needs to start with ^[\\w.]*Error\\b to trigger stack\n                    // formatting. Otherwise it is left alone. So we prefix it. Otherwise we just override it\n                    // to our own stack.\n\n\n                    fakeError.stack =  true ? (enableOwnerStacks ? 'Error Stack:' : 'Error Component Stack:') + componentStack : 0;\n\n                    if (alreadyHasComponentStack) {\n                      // Only modify the component stack if it matches what we would've added anyway.\n                      // Otherwise we assume it was a non-React stack.\n                      if (areStackTracesEqual(args[args.length - 1], componentStack)) {\n                        var firstArg = args[0];\n\n                        if (args.length > 1 && typeof firstArg === 'string' && firstArg.endsWith('%s')) {\n                          args[0] = firstArg.slice(0, firstArg.length - 2); // Strip the %s param\n                        }\n\n                        args[args.length - 1] = fakeError;\n                        injectedComponentStackAsFakeError = true;\n                      }\n                    } else {\n                      args.push(fakeError);\n                      injectedComponentStackAsFakeError = true;\n                    }\n                  } // Don't add stacks from other renderers.\n\n\n                  break;\n                }\n              }\n            } catch (error) {\n              // Don't let a DevTools or React internal error interfere with logging.\n              setTimeout(function () {\n                throw error;\n              }, 0);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (settings.breakOnConsoleErrors) {\n          // --- Welcome to debugging with React DevTools ---\n          // This debugger statement means that you've enabled the \"break on warnings\" feature.\n          // Use the browser's Call Stack panel to step out of this override function\n          // to where the original warning or error was logged.\n          // eslint-disable-next-line no-debugger\n          debugger;\n        }\n\n        if (isRunningDuringStrictModeInvocation) {\n          // Dim the text color of the double logs if we're not hiding them.\n          // Firefox doesn't support ANSI escape sequences\n          if (false) { var argsWithCSSStyles; } else {\n            originalMethod.apply(void 0, [injectedComponentStackAsFakeError ? react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_0__.ANSI_STYLE_DIMMING_TEMPLATE_WITH_COMPONENT_STACK : react_devtools_shared_src_constants__WEBPACK_IMPORTED_MODULE_0__.ANSI_STYLE_DIMMING_TEMPLATE].concat(_toConsumableArray(react_devtools_shared_src_backend_utils_formatConsoleArguments__WEBPACK_IMPORTED_MODULE_2__[\"default\"].apply(void 0, args))));\n          }\n        } else {\n          originalMethod.apply(void 0, args);\n        }\n      };\n\n      targetConsole[method] = overrideMethod;\n    };\n\n    for (var _i2 = 0, _consoleMethodsToOver2 = consoleMethodsToOverrideForErrorsAndWarnings; _i2 < _consoleMethodsToOver2.length; _i2++) {\n      _loop2();\n    }\n  } // TODO: More meaningful names for \"rendererInterfaces\" and \"renderers\".\n\n\n  var fiberRoots = {};\n  var rendererInterfaces = new Map();\n  var listeners = {};\n  var renderers = new Map();\n  var backends = new Map();\n  var hook = {\n    rendererInterfaces: rendererInterfaces,\n    listeners: listeners,\n    backends: backends,\n    // Fast Refresh for web relies on this.\n    renderers: renderers,\n    hasUnsupportedRendererAttached: false,\n    emit: emit,\n    getFiberRoots: getFiberRoots,\n    inject: inject,\n    on: on,\n    off: off,\n    sub: sub,\n    // This is a legacy flag.\n    // React v16 checks the hook for this to ensure DevTools is new enough.\n    supportsFiber: true,\n    // React Flight Client checks the hook for this to ensure DevTools is new enough.\n    supportsFlight: true,\n    // React calls these methods.\n    checkDCE: checkDCE,\n    onCommitFiberUnmount: onCommitFiberUnmount,\n    onCommitFiberRoot: onCommitFiberRoot,\n    // React v18.0+\n    onPostCommitFiberRoot: onPostCommitFiberRoot,\n    setStrictMode: setStrictMode,\n    // Schedule Profiler runtime helpers.\n    // These internal React modules to report their own boundaries\n    // which in turn enables the profiler to dim or filter internal frames.\n    getInternalModuleRanges: getInternalModuleRanges,\n    registerInternalModuleStart: registerInternalModuleStart,\n    registerInternalModuleStop: registerInternalModuleStop\n  };\n\n  if (maybeSettingsOrSettingsPromise == null) {\n    // Set default settings\n    hook.settings = {\n      appendComponentStack: true,\n      breakOnConsoleErrors: false,\n      showInlineWarningsAndErrors: true,\n      hideConsoleLogsInStrictMode: false\n    };\n    patchConsoleForErrorsAndWarnings();\n  } else {\n    Promise.resolve(maybeSettingsOrSettingsPromise).then(function (settings) {\n      hook.settings = settings;\n      hook.emit('settingsInitialized', settings);\n      patchConsoleForErrorsAndWarnings();\n    }).catch(function () {\n      targetConsole.error(\"React DevTools failed to get Console Patching settings. Console won't be patched and some console features will not work.\");\n    });\n  }\n\n  Object.defineProperty(target, '__REACT_DEVTOOLS_GLOBAL_HOOK__', {\n    // This property needs to be configurable for the test environment,\n    // else we won't be able to delete and recreate it between tests.\n    configurable: true,\n    enumerable: false,\n    get: function get() {\n      return hook;\n    }\n  });\n  return hook;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/hook.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/hydration.js":
/*!*************************************************!*\
  !*** ../react-devtools-shared/src/hydration.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"dehydrate\": () => (/* binding */ dehydrate),\n/* harmony export */   \"fillInPath\": () => (/* binding */ fillInPath),\n/* harmony export */   \"hydrate\": () => (/* binding */ hydrate),\n/* harmony export */   \"meta\": () => (/* binding */ meta)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/utils */ \"../react-devtools-shared/src/utils.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar meta = {\n  inspectable: Symbol('inspectable'),\n  inspected: Symbol('inspected'),\n  name: Symbol('name'),\n  preview_long: Symbol('preview_long'),\n  preview_short: Symbol('preview_short'),\n  readonly: Symbol('readonly'),\n  size: Symbol('size'),\n  type: Symbol('type'),\n  unserializable: Symbol('unserializable')\n};\n// This threshold determines the depth at which the bridge \"dehydrates\" nested data.\n// Dehydration means that we don't serialize the data for e.g. postMessage or stringify,\n// unless the frontend explicitly requests it (e.g. a user clicks to expand a props object).\n//\n// Reducing this threshold will improve the speed of initial component inspection,\n// but may decrease the responsiveness of expanding objects/arrays to inspect further.\nvar LEVEL_THRESHOLD = 2;\n/**\n * Generate the dehydrated metadata for complex object instances\n */\n\nfunction createDehydrated(type, inspectable, data, cleaned, path) {\n  cleaned.push(path);\n  var dehydrated = {\n    inspectable: inspectable,\n    type: type,\n    preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n    preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n    name: typeof data.constructor !== 'function' || typeof data.constructor.name !== 'string' || data.constructor.name === 'Object' ? '' : data.constructor.name\n  };\n\n  if (type === 'array' || type === 'typed_array') {\n    dehydrated.size = data.length;\n  } else if (type === 'object') {\n    dehydrated.size = Object.keys(data).length;\n  }\n\n  if (type === 'iterator' || type === 'typed_array') {\n    dehydrated.readonly = true;\n  }\n\n  return dehydrated;\n}\n/**\n * Strip out complex data (instances, functions, and data nested > LEVEL_THRESHOLD levels deep).\n * The paths of the stripped out objects are appended to the `cleaned` list.\n * On the other side of the barrier, the cleaned list is used to \"re-hydrate\" the cleaned representation into\n * an object with symbols as attributes, so that a sanitized object can be distinguished from a normal object.\n *\n * Input: {\"some\": {\"attr\": fn()}, \"other\": AnInstance}\n * Output: {\n *   \"some\": {\n *     \"attr\": {\"name\": the fn.name, type: \"function\"}\n *   },\n *   \"other\": {\n *     \"name\": \"AnInstance\",\n *     \"type\": \"object\",\n *   },\n * }\n * and cleaned = [[\"some\", \"attr\"], [\"other\"]]\n */\n\n\nfunction dehydrate(data, cleaned, unserializable, path, isPathAllowed) {\n  var level = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var type = (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.getDataType)(data);\n  var isPathAllowedCheck;\n\n  switch (type) {\n    case 'html_element':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: data.tagName,\n        type: type\n      };\n\n    case 'function':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: typeof data.name === 'function' || !data.name ? 'function' : data.name,\n        type: type\n      };\n\n    case 'string':\n      isPathAllowedCheck = isPathAllowed(path);\n\n      if (isPathAllowedCheck) {\n        return data;\n      } else {\n        return data.length <= 500 ? data : data.slice(0, 500) + '...';\n      }\n\n    case 'bigint':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: data.toString(),\n        type: type\n      };\n\n    case 'symbol':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: data.toString(),\n        type: type\n      };\n    // React Elements aren't very inspector-friendly,\n    // and often contain private fields or circular references.\n\n    case 'react_element':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.getDisplayNameForReactElement)(data) || 'Unknown',\n        type: type\n      };\n    // ArrayBuffers error if you try to inspect them.\n\n    case 'array_buffer':\n    case 'data_view':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: type === 'data_view' ? 'DataView' : 'ArrayBuffer',\n        size: data.byteLength,\n        type: type\n      };\n\n    case 'array':\n      isPathAllowedCheck = isPathAllowed(path);\n\n      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {\n        return createDehydrated(type, true, data, cleaned, path);\n      }\n\n      var arr = [];\n\n      for (var i = 0; i < data.length; i++) {\n        arr[i] = dehydrateKey(data, i, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);\n      }\n\n      return arr;\n\n    case 'html_all_collection':\n    case 'typed_array':\n    case 'iterator':\n      isPathAllowedCheck = isPathAllowed(path);\n\n      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {\n        return createDehydrated(type, true, data, cleaned, path);\n      } else {\n        var unserializableValue = {\n          unserializable: true,\n          type: type,\n          readonly: true,\n          size: type === 'typed_array' ? data.length : undefined,\n          preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n          preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n          name: typeof data.constructor !== 'function' || typeof data.constructor.name !== 'string' || data.constructor.name === 'Object' ? '' : data.constructor.name\n        }; // TRICKY\n        // Don't use [...spread] syntax for this purpose.\n        // This project uses @babel/plugin-transform-spread in \"loose\" mode which only works with Array values.\n        // Other types (e.g. typed arrays, Sets) will not spread correctly.\n\n        Array.from(data).forEach(function (item, i) {\n          return unserializableValue[i] = dehydrate(item, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);\n        });\n        unserializable.push(path);\n        return unserializableValue;\n      }\n\n    case 'opaque_iterator':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: data[Symbol.toStringTag],\n        type: type\n      };\n\n    case 'date':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: data.toString(),\n        type: type\n      };\n\n    case 'regexp':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: data.toString(),\n        type: type\n      };\n\n    case 'object':\n      isPathAllowedCheck = isPathAllowed(path);\n\n      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {\n        return createDehydrated(type, true, data, cleaned, path);\n      } else {\n        var object = {};\n        (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.getAllEnumerableKeys)(data).forEach(function (key) {\n          var name = key.toString();\n          object[name] = dehydrateKey(data, key, cleaned, unserializable, path.concat([name]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);\n        });\n        return object;\n      }\n\n    case 'class_instance':\n      isPathAllowedCheck = isPathAllowed(path);\n\n      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {\n        return createDehydrated(type, true, data, cleaned, path);\n      }\n\n      var value = {\n        unserializable: true,\n        type: type,\n        readonly: true,\n        preview_short: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, false),\n        preview_long: (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataForPreview)(data, true),\n        name: typeof data.constructor !== 'function' || typeof data.constructor.name !== 'string' ? '' : data.constructor.name\n      };\n      (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.getAllEnumerableKeys)(data).forEach(function (key) {\n        var keyAsString = key.toString();\n        value[keyAsString] = dehydrate(data[key], cleaned, unserializable, path.concat([keyAsString]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);\n      });\n      unserializable.push(path);\n      return value;\n\n    case 'infinity':\n    case 'nan':\n    case 'undefined':\n      // Some values are lossy when sent through a WebSocket.\n      // We dehydrate+rehydrate them to preserve their type.\n      cleaned.push(path);\n      return {\n        type: type\n      };\n\n    default:\n      return data;\n  }\n}\n\nfunction dehydrateKey(parent, key, cleaned, unserializable, path, isPathAllowed) {\n  var level = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n\n  try {\n    return dehydrate(parent[key], cleaned, unserializable, path, isPathAllowed, level);\n  } catch (error) {\n    var preview = '';\n\n    if (_typeof(error) === 'object' && error !== null && typeof error.stack === 'string') {\n      preview = error.stack;\n    } else if (typeof error === 'string') {\n      preview = error;\n    }\n\n    cleaned.push(path);\n    return {\n      inspectable: false,\n      preview_short: '[Exception]',\n      preview_long: preview ? '[Exception: ' + preview + ']' : '[Exception]',\n      name: preview,\n      type: 'unknown'\n    };\n  }\n}\n\nfunction fillInPath(object, data, path, value) {\n  var target = (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.getInObject)(object, path);\n\n  if (target != null) {\n    if (!target[meta.unserializable]) {\n      delete target[meta.inspectable];\n      delete target[meta.inspected];\n      delete target[meta.name];\n      delete target[meta.preview_long];\n      delete target[meta.preview_short];\n      delete target[meta.readonly];\n      delete target[meta.size];\n      delete target[meta.type];\n    }\n  }\n\n  if (value !== null && data.unserializable.length > 0) {\n    var unserializablePath = data.unserializable[0];\n    var isMatch = unserializablePath.length === path.length;\n\n    for (var i = 0; i < path.length; i++) {\n      if (path[i] !== unserializablePath[i]) {\n        isMatch = false;\n        break;\n      }\n    }\n\n    if (isMatch) {\n      upgradeUnserializable(value, value);\n    }\n  }\n\n  (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.setInObject)(object, path, value);\n}\nfunction hydrate(object, cleaned, unserializable) {\n  cleaned.forEach(function (path) {\n    var length = path.length;\n    var last = path[length - 1];\n    var parent = (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.getInObject)(object, path.slice(0, length - 1));\n\n    if (!parent || !parent.hasOwnProperty(last)) {\n      return;\n    }\n\n    var value = parent[last];\n\n    if (!value) {\n      return;\n    } else if (value.type === 'infinity') {\n      parent[last] = Infinity;\n    } else if (value.type === 'nan') {\n      parent[last] = NaN;\n    } else if (value.type === 'undefined') {\n      parent[last] = undefined;\n    } else {\n      // Replace the string keys with Symbols so they're non-enumerable.\n      var replaced = {};\n      replaced[meta.inspectable] = !!value.inspectable;\n      replaced[meta.inspected] = false;\n      replaced[meta.name] = value.name;\n      replaced[meta.preview_long] = value.preview_long;\n      replaced[meta.preview_short] = value.preview_short;\n      replaced[meta.size] = value.size;\n      replaced[meta.readonly] = !!value.readonly;\n      replaced[meta.type] = value.type;\n      parent[last] = replaced;\n    }\n  });\n  unserializable.forEach(function (path) {\n    var length = path.length;\n    var last = path[length - 1];\n    var parent = (0,react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_0__.getInObject)(object, path.slice(0, length - 1));\n\n    if (!parent || !parent.hasOwnProperty(last)) {\n      return;\n    }\n\n    var node = parent[last];\n\n    var replacement = _objectSpread({}, node);\n\n    upgradeUnserializable(replacement, node);\n    parent[last] = replacement;\n  });\n  return object;\n}\n\nfunction upgradeUnserializable(destination, source) {\n  var _Object$definePropert;\n\n  Object.defineProperties(destination, (_Object$definePropert = {}, _defineProperty(_Object$definePropert, meta.inspected, {\n    configurable: true,\n    enumerable: false,\n    value: !!source.inspected\n  }), _defineProperty(_Object$definePropert, meta.name, {\n    configurable: true,\n    enumerable: false,\n    value: source.name\n  }), _defineProperty(_Object$definePropert, meta.preview_long, {\n    configurable: true,\n    enumerable: false,\n    value: source.preview_long\n  }), _defineProperty(_Object$definePropert, meta.preview_short, {\n    configurable: true,\n    enumerable: false,\n    value: source.preview_short\n  }), _defineProperty(_Object$definePropert, meta.size, {\n    configurable: true,\n    enumerable: false,\n    value: source.size\n  }), _defineProperty(_Object$definePropert, meta.readonly, {\n    configurable: true,\n    enumerable: false,\n    value: !!source.readonly\n  }), _defineProperty(_Object$definePropert, meta.type, {\n    configurable: true,\n    enumerable: false,\n    value: source.type\n  }), _defineProperty(_Object$definePropert, meta.unserializable, {\n    configurable: true,\n    enumerable: false,\n    value: !!source.unserializable\n  }), _Object$definePropert));\n  delete destination.inspected;\n  delete destination.name;\n  delete destination.preview_long;\n  delete destination.preview_short;\n  delete destination.size;\n  delete destination.readonly;\n  delete destination.type;\n  delete destination.unserializable;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/hydration.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/isArray.js":
/*!***********************************************!*\
  !*** ../react-devtools-shared/src/isArray.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar isArray = Array.isArray;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArray);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9pc0FycmF5LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7QUFTQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vUmVhY3REZXZUb29sc0JhY2tlbmQvLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9pc0FycmF5LmpzP2E0OTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/isArray.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/storage.js":
/*!***********************************************!*\
  !*** ../react-devtools-shared/src/storage.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"localStorageGetItem\": () => (/* binding */ localStorageGetItem),\n/* harmony export */   \"localStorageRemoveItem\": () => (/* binding */ localStorageRemoveItem),\n/* harmony export */   \"localStorageSetItem\": () => (/* binding */ localStorageSetItem),\n/* harmony export */   \"sessionStorageGetItem\": () => (/* binding */ sessionStorageGetItem),\n/* harmony export */   \"sessionStorageRemoveItem\": () => (/* binding */ sessionStorageRemoveItem),\n/* harmony export */   \"sessionStorageSetItem\": () => (/* binding */ sessionStorageSetItem)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction localStorageGetItem(key) {\n  try {\n    return localStorage.getItem(key);\n  } catch (error) {\n    return null;\n  }\n}\nfunction localStorageRemoveItem(key) {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {}\n}\nfunction localStorageSetItem(key, value) {\n  try {\n    return localStorage.setItem(key, value);\n  } catch (error) {}\n}\nfunction sessionStorageGetItem(key) {\n  try {\n    return sessionStorage.getItem(key);\n  } catch (error) {\n    return null;\n  }\n}\nfunction sessionStorageRemoveItem(key) {\n  try {\n    sessionStorage.removeItem(key);\n  } catch (error) {}\n}\nfunction sessionStorageSetItem(key, value) {\n  try {\n    return sessionStorage.setItem(key, value);\n  } catch (error) {}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9zdG9yYWdlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vUmVhY3REZXZUb29sc0JhY2tlbmQvLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9zdG9yYWdlLmpzPzk0ZTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsU3RvcmFnZUdldEl0ZW0oa2V5OiBzdHJpbmcpOiBhbnkge1xuICB0cnkge1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbFN0b3JhZ2VSZW1vdmVJdGVtKGtleTogc3RyaW5nKTogdm9pZCB7XG4gIHRyeSB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHt9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbFN0b3JhZ2VTZXRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge31cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlc3Npb25TdG9yYWdlR2V0SXRlbShrZXk6IHN0cmluZyk6IGFueSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2Vzc2lvblN0b3JhZ2VSZW1vdmVJdGVtKGtleTogc3RyaW5nKTogdm9pZCB7XG4gIHRyeSB7XG4gICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICB9IGNhdGNoIChlcnJvcikge31cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlc3Npb25TdG9yYWdlU2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuICB0cnkge1xuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge31cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/storage.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/utils.js":
/*!*********************************************!*\
  !*** ../react-devtools-shared/src/utils.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"alphaSortKeys\": () => (/* binding */ alphaSortKeys),\n/* harmony export */   \"backendToFrontendSerializedElementMapper\": () => (/* binding */ backendToFrontendSerializedElementMapper),\n/* harmony export */   \"deletePathInObject\": () => (/* binding */ deletePathInObject),\n/* harmony export */   \"filterOutLocationComponentFilters\": () => (/* binding */ filterOutLocationComponentFilters),\n/* harmony export */   \"formatDataForPreview\": () => (/* binding */ formatDataForPreview),\n/* harmony export */   \"getAllEnumerableKeys\": () => (/* binding */ getAllEnumerableKeys),\n/* harmony export */   \"getDataType\": () => (/* binding */ getDataType),\n/* harmony export */   \"getDefaultComponentFilters\": () => (/* binding */ getDefaultComponentFilters),\n/* harmony export */   \"getDefaultOpenInEditorURL\": () => (/* binding */ getDefaultOpenInEditorURL),\n/* harmony export */   \"getDisplayName\": () => (/* binding */ getDisplayName),\n/* harmony export */   \"getDisplayNameForReactElement\": () => (/* binding */ getDisplayNameForReactElement),\n/* harmony export */   \"getIfReloadedAndProfiling\": () => (/* binding */ getIfReloadedAndProfiling),\n/* harmony export */   \"getInObject\": () => (/* binding */ getInObject),\n/* harmony export */   \"getIsReloadAndProfileSupported\": () => (/* binding */ getIsReloadAndProfileSupported),\n/* harmony export */   \"getOpenInEditorURL\": () => (/* binding */ getOpenInEditorURL),\n/* harmony export */   \"getProfilingSettings\": () => (/* binding */ getProfilingSettings),\n/* harmony export */   \"getSavedComponentFilters\": () => (/* binding */ getSavedComponentFilters),\n/* harmony export */   \"getUID\": () => (/* binding */ getUID),\n/* harmony export */   \"getWrappedDisplayName\": () => (/* binding */ getWrappedDisplayName),\n/* harmony export */   \"isPlainObject\": () => (/* binding */ isPlainObject),\n/* harmony export */   \"normalizeUrl\": () => (/* binding */ normalizeUrl),\n/* harmony export */   \"onReloadAndProfile\": () => (/* binding */ onReloadAndProfile),\n/* harmony export */   \"onReloadAndProfileFlagsReset\": () => (/* binding */ onReloadAndProfileFlagsReset),\n/* harmony export */   \"parseElementDisplayNameFromBackend\": () => (/* binding */ parseElementDisplayNameFromBackend),\n/* harmony export */   \"printOperationsArray\": () => (/* binding */ printOperationsArray),\n/* harmony export */   \"renamePathInObject\": () => (/* binding */ renamePathInObject),\n/* harmony export */   \"setInObject\": () => (/* binding */ setInObject),\n/* harmony export */   \"setSavedComponentFilters\": () => (/* binding */ setSavedComponentFilters),\n/* harmony export */   \"shallowDiffers\": () => (/* binding */ shallowDiffers),\n/* harmony export */   \"utfDecodeStringWithRanges\": () => (/* binding */ utfDecodeStringWithRanges),\n/* harmony export */   \"utfEncodeString\": () => (/* binding */ utfEncodeString)\n/* harmony export */ });\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lru-cache */ \"../../node_modules/lru-cache/index.js\");\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lru_cache__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/ReactSymbols */ \"../shared/ReactSymbols.js\");\n/* harmony import */ var shared_ReactFeatureFlags__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/ReactFeatureFlags */ \"../shared/ReactFeatureFlags.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"../react-devtools-shared/src/constants.js\");\n/* harmony import */ var _frontend_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-devtools-shared/src/frontend/types */ \"../react-devtools-shared/src/frontend/types.js\");\n/* harmony import */ var react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-devtools-shared/src/storage */ \"../react-devtools-shared/src/storage.js\");\n/* harmony import */ var _hydration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hydration */ \"../react-devtools-shared/src/hydration.js\");\n/* harmony import */ var _isArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./isArray */ \"../react-devtools-shared/src/isArray.js\");\n/* harmony import */ var _backend_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./backend/utils */ \"../react-devtools-shared/src/backend/utils/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"../../node_modules/process/browser.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\n\n\n\n\n\n // $FlowFixMe[method-unbinding]\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar cachedDisplayNames = new WeakMap(); // On large trees, encoding takes significant time.\n// Try to reuse the already encoded strings.\n\nvar encodedStringCache = new (lru_cache__WEBPACK_IMPORTED_MODULE_0___default())({\n  max: 1000\n});\nfunction alphaSortKeys(a, b) {\n  if (a.toString() > b.toString()) {\n    return 1;\n  } else if (b.toString() > a.toString()) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\nfunction getAllEnumerableKeys(obj) {\n  var keys = new Set();\n  var current = obj;\n\n  var _loop = function _loop() {\n    var currentKeys = [].concat(_toConsumableArray(Object.keys(current)), _toConsumableArray(Object.getOwnPropertySymbols(current)));\n    var descriptors = Object.getOwnPropertyDescriptors(current);\n    currentKeys.forEach(function (key) {\n      // $FlowFixMe[incompatible-type]: key can be a Symbol https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\n      if (descriptors[key].enumerable) {\n        keys.add(key);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  };\n\n  while (current != null) {\n    _loop();\n  }\n\n  return keys;\n} // Mirror https://github.com/facebook/react/blob/7c21bf72ace77094fd1910cc350a548287ef8350/packages/shared/getComponentName.js#L27-L37\n\nfunction getWrappedDisplayName(outerType, innerType, wrapperName, fallbackName) {\n  var displayName = outerType === null || outerType === void 0 ? void 0 : outerType.displayName;\n  return displayName || \"\".concat(wrapperName, \"(\").concat(getDisplayName(innerType, fallbackName), \")\");\n}\nfunction getDisplayName(type) {\n  var fallbackName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Anonymous';\n  var nameFromCache = cachedDisplayNames.get(type);\n\n  if (nameFromCache != null) {\n    return nameFromCache;\n  }\n\n  var displayName = fallbackName; // The displayName property is not guaranteed to be a string.\n  // It's only safe to use for our purposes if it's a string.\n  // github.com/facebook/react-devtools/issues/803\n\n  if (typeof type.displayName === 'string') {\n    displayName = type.displayName;\n  } else if (typeof type.name === 'string' && type.name !== '') {\n    displayName = type.name;\n  }\n\n  cachedDisplayNames.set(type, displayName);\n  return displayName;\n}\nvar uidCounter = 0;\nfunction getUID() {\n  return ++uidCounter;\n}\nfunction utfDecodeStringWithRanges(array, left, right) {\n  var string = '';\n\n  for (var i = left; i <= right; i++) {\n    string += String.fromCodePoint(array[i]);\n  }\n\n  return string;\n}\n\nfunction surrogatePairToCodePoint(charCode1, charCode2) {\n  return ((charCode1 & 0x3ff) << 10) + (charCode2 & 0x3ff) + 0x10000;\n} // Credit for this encoding approach goes to Tim Down:\n// https://stackoverflow.com/questions/4877326/how-can-i-tell-if-a-string-contains-multibyte-characters-in-javascript\n\n\nfunction utfEncodeString(string) {\n  var cached = encodedStringCache.get(string);\n\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  var encoded = [];\n  var i = 0;\n  var charCode;\n\n  while (i < string.length) {\n    charCode = string.charCodeAt(i); // Handle multibyte unicode characters (like emoji).\n\n    if ((charCode & 0xf800) === 0xd800) {\n      encoded.push(surrogatePairToCodePoint(charCode, string.charCodeAt(++i)));\n    } else {\n      encoded.push(charCode);\n    }\n\n    ++i;\n  }\n\n  encodedStringCache.set(string, encoded);\n  return encoded;\n}\nfunction printOperationsArray(operations) {\n  // The first two values are always rendererID and rootID\n  var rendererID = operations[0];\n  var rootID = operations[1];\n  var logs = [\"operations for renderer:\".concat(rendererID, \" and root:\").concat(rootID)];\n  var i = 2; // Reassemble the string table.\n\n  var stringTable = [null // ID = 0 corresponds to the null string.\n  ];\n  var stringTableSize = operations[i++];\n  var stringTableEnd = i + stringTableSize;\n\n  while (i < stringTableEnd) {\n    var nextLength = operations[i++];\n    var nextString = utfDecodeStringWithRanges(operations, i, i + nextLength - 1);\n    stringTable.push(nextString);\n    i += nextLength;\n  }\n\n  while (i < operations.length) {\n    var operation = operations[i];\n\n    switch (operation) {\n      case _constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_ADD:\n        {\n          var _id = operations[i + 1];\n          var type = operations[i + 2];\n          i += 3;\n\n          if (type === _frontend_types__WEBPACK_IMPORTED_MODULE_4__.ElementTypeRoot) {\n            logs.push(\"Add new root node \".concat(_id));\n            i++; // isStrictModeCompliant\n\n            i++; // supportsProfiling\n\n            i++; // supportsStrictMode\n\n            i++; // hasOwnerMetadata\n          } else {\n            var parentID = operations[i];\n            i++;\n            i++; // ownerID\n\n            var displayNameStringID = operations[i];\n            var displayName = stringTable[displayNameStringID];\n            i++;\n            i++; // key\n\n            logs.push(\"Add node \".concat(_id, \" (\").concat(displayName || 'null', \") as child of \").concat(parentID));\n          }\n\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_REMOVE:\n        {\n          var removeLength = operations[i + 1];\n          i += 2;\n\n          for (var removeIndex = 0; removeIndex < removeLength; removeIndex++) {\n            var _id2 = operations[i];\n            i += 1;\n            logs.push(\"Remove node \".concat(_id2));\n          }\n\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_REMOVE_ROOT:\n        {\n          i += 1;\n          logs.push(\"Remove root \".concat(rootID));\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_SET_SUBTREE_MODE:\n        {\n          var _id3 = operations[i + 1];\n          var mode = operations[i + 1];\n          i += 3;\n          logs.push(\"Mode \".concat(mode, \" set for subtree with root \").concat(_id3));\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_REORDER_CHILDREN:\n        {\n          var _id4 = operations[i + 1];\n          var numChildren = operations[i + 2];\n          i += 3;\n          var children = operations.slice(i, i + numChildren);\n          i += numChildren;\n          logs.push(\"Re-order node \".concat(_id4, \" children \").concat(children.join(',')));\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_UPDATE_TREE_BASE_DURATION:\n        // Base duration updates are only sent while profiling is in progress.\n        // We can ignore them at this point.\n        // The profiler UI uses them lazily in order to generate the tree.\n        i += 3;\n        break;\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__.TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:\n        var id = operations[i + 1];\n        var numErrors = operations[i + 2];\n        var numWarnings = operations[i + 3];\n        i += 4;\n        logs.push(\"Node \".concat(id, \" has \").concat(numErrors, \" errors and \").concat(numWarnings, \" warnings\"));\n        break;\n\n      default:\n        throw Error(\"Unsupported Bridge operation \\\"\".concat(operation, \"\\\"\"));\n    }\n  }\n\n  console.log(logs.join('\\n  '));\n}\nfunction getDefaultComponentFilters() {\n  return [{\n    type: _frontend_types__WEBPACK_IMPORTED_MODULE_4__.ComponentFilterElementType,\n    value: _frontend_types__WEBPACK_IMPORTED_MODULE_4__.ElementTypeHostComponent,\n    isEnabled: true\n  }];\n}\nfunction getSavedComponentFilters() {\n  try {\n    var raw = (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.localStorageGetItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.LOCAL_STORAGE_COMPONENT_FILTER_PREFERENCES_KEY);\n\n    if (raw != null) {\n      var parsedFilters = JSON.parse(raw);\n      return filterOutLocationComponentFilters(parsedFilters);\n    }\n  } catch (error) {}\n\n  return getDefaultComponentFilters();\n}\nfunction setSavedComponentFilters(componentFilters) {\n  (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.localStorageSetItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.LOCAL_STORAGE_COMPONENT_FILTER_PREFERENCES_KEY, JSON.stringify(filterOutLocationComponentFilters(componentFilters)));\n} // Following __debugSource removal from Fiber, the new approach for finding the source location\n// of a component, represented by the Fiber, is based on lazily generating and parsing component stack frames\n// To find the original location, React DevTools will perform symbolication, source maps are required for that.\n// In order to start filtering Fibers, we need to find location for all of them, which can't be done lazily.\n// Eager symbolication can become quite expensive for large applications.\n\nfunction filterOutLocationComponentFilters(componentFilters) {\n  // This is just an additional check to preserve the previous state\n  // Filters can be stored on the backend side or in user land (in a window object)\n  if (!Array.isArray(componentFilters)) {\n    return componentFilters;\n  }\n\n  return componentFilters.filter(function (f) {\n    return f.type !== _frontend_types__WEBPACK_IMPORTED_MODULE_4__.ComponentFilterLocation;\n  });\n}\nfunction getDefaultOpenInEditorURL() {\n  return typeof process.env.EDITOR_URL === 'string' ? process.env.EDITOR_URL : '';\n}\nfunction getOpenInEditorURL() {\n  try {\n    var raw = (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.localStorageGetItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.LOCAL_STORAGE_OPEN_IN_EDITOR_URL);\n\n    if (raw != null) {\n      return JSON.parse(raw);\n    }\n  } catch (error) {}\n\n  return getDefaultOpenInEditorURL();\n}\nfunction parseElementDisplayNameFromBackend(displayName, type) {\n  if (displayName === null) {\n    return {\n      formattedDisplayName: null,\n      hocDisplayNames: null,\n      compiledWithForget: false\n    };\n  }\n\n  if (displayName.startsWith('Forget(')) {\n    var displayNameWithoutForgetWrapper = displayName.slice(7, displayName.length - 1);\n\n    var _parseElementDisplayN = parseElementDisplayNameFromBackend(displayNameWithoutForgetWrapper, type),\n        formattedDisplayName = _parseElementDisplayN.formattedDisplayName,\n        _hocDisplayNames = _parseElementDisplayN.hocDisplayNames;\n\n    return {\n      formattedDisplayName: formattedDisplayName,\n      hocDisplayNames: _hocDisplayNames,\n      compiledWithForget: true\n    };\n  }\n\n  var hocDisplayNames = null;\n\n  switch (type) {\n    case _frontend_types__WEBPACK_IMPORTED_MODULE_4__.ElementTypeClass:\n    case _frontend_types__WEBPACK_IMPORTED_MODULE_4__.ElementTypeForwardRef:\n    case _frontend_types__WEBPACK_IMPORTED_MODULE_4__.ElementTypeFunction:\n    case _frontend_types__WEBPACK_IMPORTED_MODULE_4__.ElementTypeMemo:\n    case _frontend_types__WEBPACK_IMPORTED_MODULE_4__.ElementTypeVirtual:\n      if (displayName.indexOf('(') >= 0) {\n        var matches = displayName.match(/[^()]+/g);\n\n        if (matches != null) {\n          // $FlowFixMe[incompatible-type]\n          displayName = matches.pop();\n          hocDisplayNames = matches;\n        }\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  return {\n    // $FlowFixMe[incompatible-return]\n    formattedDisplayName: displayName,\n    hocDisplayNames: hocDisplayNames,\n    compiledWithForget: false\n  };\n} // Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\n\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n}\nfunction getInObject(object, path) {\n  return path.reduce(function (reduced, attr) {\n    if (reduced) {\n      if (hasOwnProperty.call(reduced, attr)) {\n        return reduced[attr];\n      }\n\n      if (typeof reduced[Symbol.iterator] === 'function') {\n        // Convert iterable to array and return array[index]\n        //\n        // TRICKY\n        // Don't use [...spread] syntax for this purpose.\n        // This project uses @babel/plugin-transform-spread in \"loose\" mode which only works with Array values.\n        // Other types (e.g. typed arrays, Sets) will not spread correctly.\n        return Array.from(reduced)[attr];\n      }\n    }\n\n    return null;\n  }, object);\n}\nfunction deletePathInObject(object, path) {\n  var length = path.length;\n  var last = path[length - 1];\n\n  if (object != null) {\n    var parent = getInObject(object, path.slice(0, length - 1));\n\n    if (parent) {\n      if ((0,_isArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(parent)) {\n        parent.splice(last, 1);\n      } else {\n        delete parent[last];\n      }\n    }\n  }\n}\nfunction renamePathInObject(object, oldPath, newPath) {\n  var length = oldPath.length;\n\n  if (object != null) {\n    var parent = getInObject(object, oldPath.slice(0, length - 1));\n\n    if (parent) {\n      var lastOld = oldPath[length - 1];\n      var lastNew = newPath[length - 1];\n      parent[lastNew] = parent[lastOld];\n\n      if ((0,_isArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(parent)) {\n        parent.splice(lastOld, 1);\n      } else {\n        delete parent[lastOld];\n      }\n    }\n  }\n}\nfunction setInObject(object, path, value) {\n  var length = path.length;\n  var last = path[length - 1];\n\n  if (object != null) {\n    var parent = getInObject(object, path.slice(0, length - 1));\n\n    if (parent) {\n      parent[last] = value;\n    }\n  }\n}\n\n/**\n * Get a enhanced/artificial type string based on the object instance\n */\nfunction getDataType(data) {\n  if (data === null) {\n    return 'null';\n  } else if (data === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof HTMLElement !== 'undefined' && data instanceof HTMLElement) {\n    return 'html_element';\n  }\n\n  var type = _typeof(data);\n\n  switch (type) {\n    case 'bigint':\n      return 'bigint';\n\n    case 'boolean':\n      return 'boolean';\n\n    case 'function':\n      return 'function';\n\n    case 'number':\n      if (Number.isNaN(data)) {\n        return 'nan';\n      } else if (!Number.isFinite(data)) {\n        return 'infinity';\n      } else {\n        return 'number';\n      }\n\n    case 'object':\n      if (data.$$typeof === shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_ELEMENT_TYPE || data.$$typeof === shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_LEGACY_ELEMENT_TYPE) {\n        return 'react_element';\n      }\n\n      if ((0,_isArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(data)) {\n        return 'array';\n      } else if (ArrayBuffer.isView(data)) {\n        return hasOwnProperty.call(data.constructor, 'BYTES_PER_ELEMENT') ? 'typed_array' : 'data_view';\n      } else if (data.constructor && data.constructor.name === 'ArrayBuffer') {\n        // HACK This ArrayBuffer check is gross; is there a better way?\n        // We could try to create a new DataView with the value.\n        // If it doesn't error, we know it's an ArrayBuffer,\n        // but this seems kind of awkward and expensive.\n        return 'array_buffer';\n      } else if (typeof data[Symbol.iterator] === 'function') {\n        var iterator = data[Symbol.iterator]();\n\n        if (!iterator) {// Proxies might break assumptoins about iterators.\n          // See github.com/facebook/react/issues/21654\n        } else {\n          return iterator === data ? 'opaque_iterator' : 'iterator';\n        }\n      } else if (data.constructor && data.constructor.name === 'RegExp') {\n        return 'regexp';\n      } else {\n        // $FlowFixMe[method-unbinding]\n        var toStringValue = Object.prototype.toString.call(data);\n\n        if (toStringValue === '[object Date]') {\n          return 'date';\n        } else if (toStringValue === '[object HTMLAllCollection]') {\n          return 'html_all_collection';\n        }\n      }\n\n      if (!isPlainObject(data)) {\n        return 'class_instance';\n      }\n\n      return 'object';\n\n    case 'string':\n      return 'string';\n\n    case 'symbol':\n      return 'symbol';\n\n    case 'undefined':\n      if ( // $FlowFixMe[method-unbinding]\n      Object.prototype.toString.call(data) === '[object HTMLAllCollection]') {\n        return 'html_all_collection';\n      }\n\n      return 'undefined';\n\n    default:\n      return 'unknown';\n  }\n} // Fork of packages/react-is/src/ReactIs.js:30, but with legacy element type\n// Which has been changed in https://github.com/facebook/react/pull/28813\n\nfunction typeOfWithLegacyElementSymbol(object) {\n  if (_typeof(object) === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_ELEMENT_TYPE:\n      case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_LEGACY_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_FRAGMENT_TYPE:\n          case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_PROFILER_TYPE:\n          case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_STRICT_MODE_TYPE:\n          case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_SUSPENSE_TYPE:\n          case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_SUSPENSE_LIST_TYPE:\n          case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_VIEW_TRANSITION_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_CONTEXT_TYPE:\n              case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_FORWARD_REF_TYPE:\n              case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_LAZY_TYPE:\n              case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_MEMO_TYPE:\n                return $$typeofType;\n\n              case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_CONSUMER_TYPE:\n                if (shared_ReactFeatureFlags__WEBPACK_IMPORTED_MODULE_2__.enableRenderableContext) {\n                  return $$typeofType;\n                }\n\n              // Fall through\n\n              case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_PROVIDER_TYPE:\n                if (!shared_ReactFeatureFlags__WEBPACK_IMPORTED_MODULE_2__.enableRenderableContext) {\n                  return $$typeofType;\n                }\n\n              // Fall through\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getDisplayNameForReactElement(element) {\n  var elementType = typeOfWithLegacyElementSymbol(element);\n\n  switch (elementType) {\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_CONSUMER_TYPE:\n      return 'ContextConsumer';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_PROVIDER_TYPE:\n      return 'ContextProvider';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_CONTEXT_TYPE:\n      return 'Context';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_FORWARD_REF_TYPE:\n      return 'ForwardRef';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_LAZY_TYPE:\n      return 'Lazy';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_MEMO_TYPE:\n      return 'Memo';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_VIEW_TRANSITION_TYPE:\n      return 'ViewTransition';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_1__.REACT_TRACING_MARKER_TYPE:\n      return 'TracingMarker';\n\n    default:\n      var type = element.type;\n\n      if (typeof type === 'string') {\n        return type;\n      } else if (typeof type === 'function') {\n        return getDisplayName(type, 'Anonymous');\n      } else if (type != null) {\n        return 'NotImplementedInDevtools';\n      } else {\n        return 'Element';\n      }\n\n  }\n}\nvar MAX_PREVIEW_STRING_LENGTH = 50;\n\nfunction truncateForDisplay(string) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_PREVIEW_STRING_LENGTH;\n\n  if (string.length > length) {\n    return string.slice(0, length) + '…';\n  } else {\n    return string;\n  }\n} // Attempts to mimic Chrome's inline preview for values.\n// For example, the following value...\n//   {\n//      foo: 123,\n//      bar: \"abc\",\n//      baz: [true, false],\n//      qux: { ab: 1, cd: 2 }\n//   };\n//\n// Would show a preview of...\n//   {foo: 123, bar: \"abc\", baz: Array(2), qux: {…}}\n//\n// And the following value...\n//   [\n//     123,\n//     \"abc\",\n//     [true, false],\n//     { foo: 123, bar: \"abc\" }\n//   ];\n//\n// Would show a preview of...\n//   [123, \"abc\", Array(2), {…}]\n\n\nfunction formatDataForPreview(data, showFormattedValue) {\n  if (data != null && hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__.meta.type)) {\n    return showFormattedValue ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__.meta.preview_long] : data[_hydration__WEBPACK_IMPORTED_MODULE_6__.meta.preview_short];\n  }\n\n  var type = getDataType(data);\n\n  switch (type) {\n    case 'html_element':\n      return \"<\".concat(truncateForDisplay(data.tagName.toLowerCase()), \" />\");\n\n    case 'function':\n      if (typeof data.name === 'function' || data.name === '') {\n        return '() => {}';\n      }\n\n      return \"\".concat(truncateForDisplay(data.name), \"() {}\");\n\n    case 'string':\n      return \"\\\"\".concat(data, \"\\\"\");\n\n    case 'bigint':\n      return truncateForDisplay(data.toString() + 'n');\n\n    case 'regexp':\n      return truncateForDisplay(data.toString());\n\n    case 'symbol':\n      return truncateForDisplay(data.toString());\n\n    case 'react_element':\n      return \"<\".concat(truncateForDisplay(getDisplayNameForReactElement(data) || 'Unknown'), \" />\");\n\n    case 'array_buffer':\n      return \"ArrayBuffer(\".concat(data.byteLength, \")\");\n\n    case 'data_view':\n      return \"DataView(\".concat(data.buffer.byteLength, \")\");\n\n    case 'array':\n      if (showFormattedValue) {\n        var formatted = '';\n\n        for (var i = 0; i < data.length; i++) {\n          if (i > 0) {\n            formatted += ', ';\n          }\n\n          formatted += formatDataForPreview(data[i], false);\n\n          if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {\n            // Prevent doing a lot of unnecessary iteration...\n            break;\n          }\n        }\n\n        return \"[\".concat(truncateForDisplay(formatted), \"]\");\n      } else {\n        var length = hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__.meta.size) ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__.meta.size] : data.length;\n        return \"Array(\".concat(length, \")\");\n      }\n\n    case 'typed_array':\n      var shortName = \"\".concat(data.constructor.name, \"(\").concat(data.length, \")\");\n\n      if (showFormattedValue) {\n        var _formatted = '';\n\n        for (var _i = 0; _i < data.length; _i++) {\n          if (_i > 0) {\n            _formatted += ', ';\n          }\n\n          _formatted += data[_i];\n\n          if (_formatted.length > MAX_PREVIEW_STRING_LENGTH) {\n            // Prevent doing a lot of unnecessary iteration...\n            break;\n          }\n        }\n\n        return \"\".concat(shortName, \" [\").concat(truncateForDisplay(_formatted), \"]\");\n      } else {\n        return shortName;\n      }\n\n    case 'iterator':\n      var name = data.constructor.name;\n\n      if (showFormattedValue) {\n        // TRICKY\n        // Don't use [...spread] syntax for this purpose.\n        // This project uses @babel/plugin-transform-spread in \"loose\" mode which only works with Array values.\n        // Other types (e.g. typed arrays, Sets) will not spread correctly.\n        var array = Array.from(data);\n        var _formatted2 = '';\n\n        for (var _i2 = 0; _i2 < array.length; _i2++) {\n          var entryOrEntries = array[_i2];\n\n          if (_i2 > 0) {\n            _formatted2 += ', ';\n          } // TRICKY\n          // Browsers display Maps and Sets differently.\n          // To mimic their behavior, detect if we've been given an entries tuple.\n          //   Map(2) {\"abc\" => 123, \"def\" => 123}\n          //   Set(2) {\"abc\", 123}\n\n\n          if ((0,_isArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(entryOrEntries)) {\n            var key = formatDataForPreview(entryOrEntries[0], true);\n            var value = formatDataForPreview(entryOrEntries[1], false);\n            _formatted2 += \"\".concat(key, \" => \").concat(value);\n          } else {\n            _formatted2 += formatDataForPreview(entryOrEntries, false);\n          }\n\n          if (_formatted2.length > MAX_PREVIEW_STRING_LENGTH) {\n            // Prevent doing a lot of unnecessary iteration...\n            break;\n          }\n        }\n\n        return \"\".concat(name, \"(\").concat(data.size, \") {\").concat(truncateForDisplay(_formatted2), \"}\");\n      } else {\n        return \"\".concat(name, \"(\").concat(data.size, \")\");\n      }\n\n    case 'opaque_iterator':\n      {\n        return data[Symbol.toStringTag];\n      }\n\n    case 'date':\n      return data.toString();\n\n    case 'class_instance':\n      return data.constructor.name;\n\n    case 'object':\n      if (showFormattedValue) {\n        var keys = Array.from(getAllEnumerableKeys(data)).sort(alphaSortKeys);\n        var _formatted3 = '';\n\n        for (var _i3 = 0; _i3 < keys.length; _i3++) {\n          var _key = keys[_i3];\n\n          if (_i3 > 0) {\n            _formatted3 += ', ';\n          }\n\n          _formatted3 += \"\".concat(_key.toString(), \": \").concat(formatDataForPreview(data[_key], false));\n\n          if (_formatted3.length > MAX_PREVIEW_STRING_LENGTH) {\n            // Prevent doing a lot of unnecessary iteration...\n            break;\n          }\n        }\n\n        return \"{\".concat(truncateForDisplay(_formatted3), \"}\");\n      } else {\n        return '{…}';\n      }\n\n    case 'boolean':\n    case 'number':\n    case 'infinity':\n    case 'nan':\n    case 'null':\n    case 'undefined':\n      return data;\n\n    default:\n      try {\n        return truncateForDisplay(String(data));\n      } catch (error) {\n        return 'unserializable';\n      }\n\n  }\n} // Basically checking that the object only has Object in its prototype chain\n\nvar isPlainObject = function isPlainObject(object) {\n  var objectPrototype = Object.getPrototypeOf(object);\n  if (!objectPrototype) return true;\n  var objectParentPrototype = Object.getPrototypeOf(objectPrototype);\n  return !objectParentPrototype;\n};\nfunction backendToFrontendSerializedElementMapper(element) {\n  var _parseElementDisplayN2 = parseElementDisplayNameFromBackend(element.displayName, element.type),\n      formattedDisplayName = _parseElementDisplayN2.formattedDisplayName,\n      hocDisplayNames = _parseElementDisplayN2.hocDisplayNames,\n      compiledWithForget = _parseElementDisplayN2.compiledWithForget;\n\n  return _objectSpread(_objectSpread({}, element), {}, {\n    displayName: formattedDisplayName,\n    hocDisplayNames: hocDisplayNames,\n    compiledWithForget: compiledWithForget\n  });\n} // Chrome normalizes urls like webpack-internals:// but new URL don't, so cannot use new URL here.\n\nfunction normalizeUrl(url) {\n  return url.replace('/./', '/');\n}\nfunction getIsReloadAndProfileSupported() {\n  // Notify the frontend if the backend supports the Storage API (e.g. localStorage).\n  // If not, features like reload-and-profile will not work correctly and must be disabled.\n  var isBackendStorageAPISupported = false;\n\n  try {\n    localStorage.getItem('test');\n    isBackendStorageAPISupported = true;\n  } catch (error) {}\n\n  return isBackendStorageAPISupported && (0,_backend_utils__WEBPACK_IMPORTED_MODULE_8__.isSynchronousXHRSupported)();\n} // Expected to be used only by browser extension and react-devtools-inline\n\nfunction getIfReloadedAndProfiling() {\n  return (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.sessionStorageGetItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.SESSION_STORAGE_RELOAD_AND_PROFILE_KEY) === 'true';\n}\nfunction getProfilingSettings() {\n  return {\n    recordChangeDescriptions: (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.sessionStorageGetItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY) === 'true',\n    recordTimeline: (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.sessionStorageGetItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.SESSION_STORAGE_RECORD_TIMELINE_KEY) === 'true'\n  };\n}\nfunction onReloadAndProfile(recordChangeDescriptions, recordTimeline) {\n  (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.sessionStorageSetItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.SESSION_STORAGE_RELOAD_AND_PROFILE_KEY, 'true');\n  (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.sessionStorageSetItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY, recordChangeDescriptions ? 'true' : 'false');\n  (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.sessionStorageSetItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.SESSION_STORAGE_RECORD_TIMELINE_KEY, recordTimeline ? 'true' : 'false');\n}\nfunction onReloadAndProfileFlagsReset() {\n  (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.sessionStorageRemoveItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.SESSION_STORAGE_RELOAD_AND_PROFILE_KEY);\n  (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.sessionStorageRemoveItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY);\n  (0,react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_5__.sessionStorageRemoveItem)(_constants__WEBPACK_IMPORTED_MODULE_3__.SESSION_STORAGE_RECORD_TIMELINE_KEY);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/utils.js\n");

/***/ }),

/***/ "../react-devtools-timeline/src/constants.js":
/*!***************************************************!*\
  !*** ../react-devtools-timeline/src/constants.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"COMFORTABLE_LINE_HEIGHT\": () => (/* reexport safe */ react_devtools_shared_src_devtools_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMFORTABLE_LINE_HEIGHT),\n/* harmony export */   \"COMPACT_LINE_HEIGHT\": () => (/* reexport safe */ react_devtools_shared_src_devtools_constants_js__WEBPACK_IMPORTED_MODULE_0__.COMPACT_LINE_HEIGHT),\n/* harmony export */   \"REACT_TOTAL_NUM_LANES\": () => (/* binding */ REACT_TOTAL_NUM_LANES),\n/* harmony export */   \"SCHEDULING_PROFILER_VERSION\": () => (/* binding */ SCHEDULING_PROFILER_VERSION),\n/* harmony export */   \"SNAPSHOT_MAX_HEIGHT\": () => (/* binding */ SNAPSHOT_MAX_HEIGHT)\n/* harmony export */ });\n/* harmony import */ var react_devtools_shared_src_devtools_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/devtools/constants.js */ \"../react-devtools-shared/src/devtools/constants.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar REACT_TOTAL_NUM_LANES = 31; // Increment this number any time a backwards breaking change is made to the profiler metadata.\n\nvar SCHEDULING_PROFILER_VERSION = 1;\nvar SNAPSHOT_MAX_HEIGHT = 60;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtdGltZWxpbmUvc3JjL2NvbnN0YW50cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7QUFTQTtBQUtBOztBQUdBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9yZWFjdC1kZXZ0b29scy10aW1lbGluZS9zcmMvY29uc3RhbnRzLmpzPzU5MDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuZXhwb3J0IHtcbiAgQ09NRk9SVEFCTEVfTElORV9IRUlHSFQsXG4gIENPTVBBQ1RfTElORV9IRUlHSFQsXG59IGZyb20gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvZGV2dG9vbHMvY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IGNvbnN0IFJFQUNUX1RPVEFMX05VTV9MQU5FUyA9IDMxO1xuXG4vLyBJbmNyZW1lbnQgdGhpcyBudW1iZXIgYW55IHRpbWUgYSBiYWNrd2FyZHMgYnJlYWtpbmcgY2hhbmdlIGlzIG1hZGUgdG8gdGhlIHByb2ZpbGVyIG1ldGFkYXRhLlxuZXhwb3J0IGNvbnN0IFNDSEVEVUxJTkdfUFJPRklMRVJfVkVSU0lPTiA9IDE7XG5cbmV4cG9ydCBjb25zdCBTTkFQU0hPVF9NQVhfSEVJR0hUID0gNjA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-timeline/src/constants.js\n");

/***/ }),

/***/ "../shared/ReactFeatureFlags.js":
/*!**************************************!*\
  !*** ../shared/ReactFeatureFlags.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"alwaysThrottleRetries\": () => (/* binding */ alwaysThrottleRetries),\n/* harmony export */   \"disableClientCache\": () => (/* binding */ disableClientCache),\n/* harmony export */   \"disableCommentsAsDOMContainers\": () => (/* binding */ disableCommentsAsDOMContainers),\n/* harmony export */   \"disableDefaultPropsExceptForClasses\": () => (/* binding */ disableDefaultPropsExceptForClasses),\n/* harmony export */   \"disableInputAttributeSyncing\": () => (/* binding */ disableInputAttributeSyncing),\n/* harmony export */   \"disableLegacyContext\": () => (/* binding */ disableLegacyContext),\n/* harmony export */   \"disableLegacyContextForFunctionComponents\": () => (/* binding */ disableLegacyContextForFunctionComponents),\n/* harmony export */   \"disableLegacyMode\": () => (/* binding */ disableLegacyMode),\n/* harmony export */   \"disableSchedulerTimeoutInWorkLoop\": () => (/* binding */ disableSchedulerTimeoutInWorkLoop),\n/* harmony export */   \"disableTextareaChildren\": () => (/* binding */ disableTextareaChildren),\n/* harmony export */   \"enableAsyncDebugInfo\": () => (/* binding */ enableAsyncDebugInfo),\n/* harmony export */   \"enableAsyncIterableChildren\": () => (/* binding */ enableAsyncIterableChildren),\n/* harmony export */   \"enableCPUSuspense\": () => (/* binding */ enableCPUSuspense),\n/* harmony export */   \"enableComponentPerformanceTrack\": () => (/* binding */ enableComponentPerformanceTrack),\n/* harmony export */   \"enableCreateEventHandleAPI\": () => (/* binding */ enableCreateEventHandleAPI),\n/* harmony export */   \"enableDO_NOT_USE_disableStrictPassiveEffect\": () => (/* binding */ enableDO_NOT_USE_disableStrictPassiveEffect),\n/* harmony export */   \"enableFabricCompleteRootInCommitPhase\": () => (/* binding */ enableFabricCompleteRootInCommitPhase),\n/* harmony export */   \"enableFizzExternalRuntime\": () => (/* binding */ enableFizzExternalRuntime),\n/* harmony export */   \"enableHalt\": () => (/* binding */ enableHalt),\n/* harmony export */   \"enableHiddenSubtreeInsertionEffectCleanup\": () => (/* binding */ enableHiddenSubtreeInsertionEffectCleanup),\n/* harmony export */   \"enableHydrationLaneScheduling\": () => (/* binding */ enableHydrationLaneScheduling),\n/* harmony export */   \"enableInfiniteRenderLoopDetection\": () => (/* binding */ enableInfiniteRenderLoopDetection),\n/* harmony export */   \"enableLegacyCache\": () => (/* binding */ enableLegacyCache),\n/* harmony export */   \"enableLegacyFBSupport\": () => (/* binding */ enableLegacyFBSupport),\n/* harmony export */   \"enableLegacyHidden\": () => (/* binding */ enableLegacyHidden),\n/* harmony export */   \"enableMoveBefore\": () => (/* binding */ enableMoveBefore),\n/* harmony export */   \"enableNoCloningMemoCache\": () => (/* binding */ enableNoCloningMemoCache),\n/* harmony export */   \"enableObjectFiber\": () => (/* binding */ enableObjectFiber),\n/* harmony export */   \"enableOwnerStacks\": () => (/* binding */ enableOwnerStacks),\n/* harmony export */   \"enablePersistedModeClonedFlag\": () => (/* binding */ enablePersistedModeClonedFlag),\n/* harmony export */   \"enablePostpone\": () => (/* binding */ enablePostpone),\n/* harmony export */   \"enableProfilerCommitHooks\": () => (/* binding */ enableProfilerCommitHooks),\n/* harmony export */   \"enableProfilerNestedUpdatePhase\": () => (/* binding */ enableProfilerNestedUpdatePhase),\n/* harmony export */   \"enableProfilerTimer\": () => (/* binding */ enableProfilerTimer),\n/* harmony export */   \"enableReactTestRendererWarning\": () => (/* binding */ enableReactTestRendererWarning),\n/* harmony export */   \"enableRenderableContext\": () => (/* binding */ enableRenderableContext),\n/* harmony export */   \"enableRetryLaneExpiration\": () => (/* binding */ enableRetryLaneExpiration),\n/* harmony export */   \"enableSchedulingProfiler\": () => (/* binding */ enableSchedulingProfiler),\n/* harmony export */   \"enableScopeAPI\": () => (/* binding */ enableScopeAPI),\n/* harmony export */   \"enableShallowPropDiffing\": () => (/* binding */ enableShallowPropDiffing),\n/* harmony export */   \"enableSiblingPrerendering\": () => (/* binding */ enableSiblingPrerendering),\n/* harmony export */   \"enableSuspenseAvoidThisFallback\": () => (/* binding */ enableSuspenseAvoidThisFallback),\n/* harmony export */   \"enableSuspenseCallback\": () => (/* binding */ enableSuspenseCallback),\n/* harmony export */   \"enableTaint\": () => (/* binding */ enableTaint),\n/* harmony export */   \"enableThrottledScheduling\": () => (/* binding */ enableThrottledScheduling),\n/* harmony export */   \"enableTransitionTracing\": () => (/* binding */ enableTransitionTracing),\n/* harmony export */   \"enableTrustedTypesIntegration\": () => (/* binding */ enableTrustedTypesIntegration),\n/* harmony export */   \"enableUpdaterTracking\": () => (/* binding */ enableUpdaterTracking),\n/* harmony export */   \"enableUseEffectEventHook\": () => (/* binding */ enableUseEffectEventHook),\n/* harmony export */   \"enableUseResourceEffectHook\": () => (/* binding */ enableUseResourceEffectHook),\n/* harmony export */   \"enableViewTransition\": () => (/* binding */ enableViewTransition),\n/* harmony export */   \"enableYieldingBeforePassive\": () => (/* binding */ enableYieldingBeforePassive),\n/* harmony export */   \"favorSafetyOverHydrationPerf\": () => (/* binding */ favorSafetyOverHydrationPerf),\n/* harmony export */   \"passChildrenWhenCloningPersistedNodes\": () => (/* binding */ passChildrenWhenCloningPersistedNodes),\n/* harmony export */   \"renameElementSymbol\": () => (/* binding */ renameElementSymbol),\n/* harmony export */   \"retryLaneExpirationMs\": () => (/* binding */ retryLaneExpirationMs),\n/* harmony export */   \"syncLaneExpirationMs\": () => (/* binding */ syncLaneExpirationMs),\n/* harmony export */   \"transitionLaneExpirationMs\": () => (/* binding */ transitionLaneExpirationMs)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// -----------------------------------------------------------------------------\n// Land or remove (zero effort)\n//\n// Flags that can likely be deleted or landed without consequences\n// -----------------------------------------------------------------------------\n// None\n// -----------------------------------------------------------------------------\n// Killswitch\n//\n// Flags that exist solely to turn off a change in case it causes a regression\n// when it rolls out to prod. We should remove these as soon as possible.\n// -----------------------------------------------------------------------------\nvar enableHydrationLaneScheduling = true; // -----------------------------------------------------------------------------\n// Land or remove (moderate effort)\n//\n// Flags that can be probably deleted or landed, but might require extra effort\n// like migrating internal callers or performance testing.\n// -----------------------------------------------------------------------------\n// TODO: Finish rolling out in www\n\nvar favorSafetyOverHydrationPerf = true; // Need to remove didTimeout argument from Scheduler before landing\n\nvar disableSchedulerTimeoutInWorkLoop = false; // TODO: Land at Meta before removing.\n\nvar disableDefaultPropsExceptForClasses = true; // -----------------------------------------------------------------------------\n// Slated for removal in the future (significant effort)\n//\n// These are experiments that didn't work out, and never shipped, but we can't\n// delete from the codebase until we migrate internal callers.\n// -----------------------------------------------------------------------------\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n//\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n//\n// This will eventually be replaced by the Transition Tracing proposal.\n\nvar enableSuspenseCallback = false; // Experimental Scope support.\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\nvar enableCreateEventHandleAPI = false; // Support legacy Primer support on internal FB www\n\nvar enableLegacyFBSupport = false; // -----------------------------------------------------------------------------\n// Ongoing experiments\n//\n// These are features that we're either actively exploring or are reasonably\n// likely to include in an upcoming release.\n// -----------------------------------------------------------------------------\n// Yield to the browser event loop and not just the scheduler event loop before passive effects.\n// Fix gated tests that fail with this flag enabled before turning it back on.\n\nvar enableYieldingBeforePassive = false; // Experiment to intentionally yield less to block high framerate animations.\n\nvar enableThrottledScheduling = false;\nvar enableLegacyCache = true;\nvar enableAsyncIterableChildren = true;\nvar enableTaint = true;\nvar enablePostpone = true;\nvar enableHalt = true;\nvar enableViewTransition = true;\n/**\n * Switches the Fabric API from doing layout in commit work instead of complete work.\n */\n\nvar enableFabricCompleteRootInCommitPhase = false;\n/**\n * Switches Fiber creation to a simple object instead of a constructor.\n */\n\nvar enableObjectFiber = false;\nvar enableTransitionTracing = false; // FB-only usage. The new API has different semantics.\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\nvar enableSuspenseAvoidThisFallback = false;\nvar enableCPUSuspense = true; // Test this at Meta before enabling.\n\nvar enableNoCloningMemoCache = false;\nvar enableUseEffectEventHook = true; // Test in www before enabling in open source.\n// Enables DOM-server to stream its instruction set as data-attributes\n// (handled with an MutationObserver) instead of inline-scripts\n\nvar enableFizzExternalRuntime = true;\nvar alwaysThrottleRetries = true;\nvar passChildrenWhenCloningPersistedNodes = false;\n/**\n * Enables a new Fiber flag used in persisted mode to reduce the number\n * of cloned host components.\n */\n\nvar enablePersistedModeClonedFlag = false;\nvar enableOwnerStacks = true;\nvar enableShallowPropDiffing = false;\nvar enableSiblingPrerendering = true;\n/**\n * Enables an expiration time for retry lanes to avoid starvation.\n */\n\nvar enableRetryLaneExpiration = false;\nvar retryLaneExpirationMs = 5000;\nvar syncLaneExpirationMs = 250;\nvar transitionLaneExpirationMs = 5000;\n/**\n * Enables a new error detection for infinite render loops from updates caused\n * by setState or similar outside of the component owning the state.\n */\n\nvar enableInfiniteRenderLoopDetection = false;\n/**\n * Experimental new hook for better managing resources in effects.\n */\n\nvar enableUseResourceEffectHook = false; // -----------------------------------------------------------------------------\n// Ready for next major.\n//\n// Alias __NEXT_MAJOR__ to __EXPERIMENTAL__ for easier skimming.\n// -----------------------------------------------------------------------------\n// TODO: Anything that's set to `true` in this section should either be cleaned\n// up (if it's on everywhere, including Meta and RN builds) or moved to a\n// different section of this file.\n// const __NEXT_MAJOR__ = __EXPERIMENTAL__;\n// Renames the internal symbol for elements since they have changed signature/constructor\n\nvar renameElementSymbol = true;\n/**\n * Enables a fix to run insertion effect cleanup on hidden subtrees.\n */\n\nvar enableHiddenSubtreeInsertionEffectCleanup = false;\n/**\n * Removes legacy style context defined using static `contextTypes` and consumed with static `childContextTypes`.\n */\n\nvar disableLegacyContext = true;\n/**\n * Removes legacy style context just from function components.\n */\n\nvar disableLegacyContextForFunctionComponents = true; // Enable the moveBefore() alternative to insertBefore(). This preserves states of moves.\n\nvar enableMoveBefore = false; // Disabled caching behavior of `react/cache` in client runtimes.\n\nvar disableClientCache = true; // Warn on any usage of ReactTestRenderer\n\nvar enableReactTestRendererWarning = true; // Disables legacy mode\n// This allows us to land breaking changes to remove legacy mode APIs in experimental builds\n// before removing them in stable in the next Major\n\nvar disableLegacyMode = true; // Make <Context> equivalent to <Context.Provider> instead of <Context.Consumer>\n\nvar enableRenderableContext = true; // -----------------------------------------------------------------------------\n// Chopping Block\n//\n// Planned feature deprecations and breaking changes. Sorted roughly in order of\n// when we plan to enable them.\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// React DOM Chopping Block\n//\n// Similar to main Chopping Block but only flags related to React DOM. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n// Disable support for comment nodes as React DOM containers. Already disabled\n// in open source, but www codebase still relies on it. Need to remove.\n\nvar disableCommentsAsDOMContainers = true;\nvar enableTrustedTypesIntegration = false; // Prevent the value and checked attributes from syncing with their related\n// DOM properties\n\nvar disableInputAttributeSyncing = false; // Disables children for <textarea> elements\n\nvar disableTextareaChildren = false; // -----------------------------------------------------------------------------\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n// Gather advanced timing metrics for Profiler subtrees.\n\nvar enableProfilerTimer = false; // Adds performance.measure() marks using Chrome extensions to allow formatted\n// Component rendering tracks to show up in the Performance tab.\n// This flag will be used for both Server Component and Client Component tracks.\n// All calls should also be gated on enableProfilerTimer.\n\nvar enableComponentPerformanceTrack = true; // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\n\nvar enableSchedulingProfiler = !enableComponentPerformanceTrack && false; // Record durations for commit and passive effects phases.\n\nvar enableProfilerCommitHooks = false; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\nvar enableProfilerNestedUpdatePhase = false;\nvar enableAsyncDebugInfo = true; // Track which Fiber(s) schedule render work.\n\nvar enableUpdaterTracking = false; // Internal only.\n\nvar enableDO_NOT_USE_disableStrictPassiveEffect = false;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/ReactFeatureFlags.js\n");

/***/ }),

/***/ "../shared/ReactSymbols.js":
/*!*********************************!*\
  !*** ../shared/ReactSymbols.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ASYNC_ITERATOR\": () => (/* binding */ ASYNC_ITERATOR),\n/* harmony export */   \"REACT_CONSUMER_TYPE\": () => (/* binding */ REACT_CONSUMER_TYPE),\n/* harmony export */   \"REACT_CONTEXT_TYPE\": () => (/* binding */ REACT_CONTEXT_TYPE),\n/* harmony export */   \"REACT_ELEMENT_TYPE\": () => (/* binding */ REACT_ELEMENT_TYPE),\n/* harmony export */   \"REACT_FORWARD_REF_TYPE\": () => (/* binding */ REACT_FORWARD_REF_TYPE),\n/* harmony export */   \"REACT_FRAGMENT_TYPE\": () => (/* binding */ REACT_FRAGMENT_TYPE),\n/* harmony export */   \"REACT_LAZY_TYPE\": () => (/* binding */ REACT_LAZY_TYPE),\n/* harmony export */   \"REACT_LEGACY_ELEMENT_TYPE\": () => (/* binding */ REACT_LEGACY_ELEMENT_TYPE),\n/* harmony export */   \"REACT_LEGACY_HIDDEN_TYPE\": () => (/* binding */ REACT_LEGACY_HIDDEN_TYPE),\n/* harmony export */   \"REACT_MEMO_CACHE_SENTINEL\": () => (/* binding */ REACT_MEMO_CACHE_SENTINEL),\n/* harmony export */   \"REACT_MEMO_TYPE\": () => (/* binding */ REACT_MEMO_TYPE),\n/* harmony export */   \"REACT_OFFSCREEN_TYPE\": () => (/* binding */ REACT_OFFSCREEN_TYPE),\n/* harmony export */   \"REACT_PORTAL_TYPE\": () => (/* binding */ REACT_PORTAL_TYPE),\n/* harmony export */   \"REACT_POSTPONE_TYPE\": () => (/* binding */ REACT_POSTPONE_TYPE),\n/* harmony export */   \"REACT_PROFILER_TYPE\": () => (/* binding */ REACT_PROFILER_TYPE),\n/* harmony export */   \"REACT_PROVIDER_TYPE\": () => (/* binding */ REACT_PROVIDER_TYPE),\n/* harmony export */   \"REACT_SCOPE_TYPE\": () => (/* binding */ REACT_SCOPE_TYPE),\n/* harmony export */   \"REACT_STRICT_MODE_TYPE\": () => (/* binding */ REACT_STRICT_MODE_TYPE),\n/* harmony export */   \"REACT_SUSPENSE_LIST_TYPE\": () => (/* binding */ REACT_SUSPENSE_LIST_TYPE),\n/* harmony export */   \"REACT_SUSPENSE_TYPE\": () => (/* binding */ REACT_SUSPENSE_TYPE),\n/* harmony export */   \"REACT_TRACING_MARKER_TYPE\": () => (/* binding */ REACT_TRACING_MARKER_TYPE),\n/* harmony export */   \"REACT_VIEW_TRANSITION_TYPE\": () => (/* binding */ REACT_VIEW_TRANSITION_TYPE),\n/* harmony export */   \"getIteratorFn\": () => (/* binding */ getIteratorFn)\n/* harmony export */ });\n/* harmony import */ var shared_ReactFeatureFlags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/ReactFeatureFlags */ \"../shared/ReactFeatureFlags.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n // ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\n\nvar REACT_LEGACY_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_ELEMENT_TYPE = shared_ReactFeatureFlags__WEBPACK_IMPORTED_MODULE_0__.renameElementSymbol ? Symbol.for('react.transitional.element') : REACT_LEGACY_ELEMENT_TYPE;\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nvar REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nvar REACT_MEMO_CACHE_SENTINEL = Symbol.for('react.memo_cache_sentinel');\nvar REACT_POSTPONE_TYPE = Symbol.for('react.postpone');\nvar REACT_VIEW_TRANSITION_TYPE = Symbol.for('react.view_transition');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || _typeof(maybeIterable) !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\nvar ASYNC_ITERATOR = Symbol.asyncIterator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL1JlYWN0U3ltYm9scy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7OztBQVNBO0FBR0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFJQTtBQUlBO0FBRUE7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7O0FBR0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uL3NoYXJlZC9SZWFjdFN5bWJvbHMuanM/YzAyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQge3JlbmFtZUVsZW1lbnRTeW1ib2x9IGZyb20gJ3NoYXJlZC9SZWFjdEZlYXR1cmVGbGFncyc7XG5cbi8vIEFUVEVOVElPTlxuLy8gV2hlbiBhZGRpbmcgbmV3IHN5bWJvbHMgdG8gdGhpcyBmaWxlLFxuLy8gUGxlYXNlIGNvbnNpZGVyIGFsc28gYWRkaW5nIHRvICdyZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvUmVhY3RTeW1ib2xzJ1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy5cbmV4cG9ydCBjb25zdCBSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFOiBzeW1ib2wgPSBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50Jyk7XG5leHBvcnQgY29uc3QgUkVBQ1RfRUxFTUVOVF9UWVBFOiBzeW1ib2wgPSByZW5hbWVFbGVtZW50U3ltYm9sXG4gID8gU3ltYm9sLmZvcigncmVhY3QudHJhbnNpdGlvbmFsLmVsZW1lbnQnKVxuICA6IFJFQUNUX0xFR0FDWV9FTEVNRU5UX1RZUEU7XG5leHBvcnQgY29uc3QgUkVBQ1RfUE9SVEFMX1RZUEU6IHN5bWJvbCA9IFN5bWJvbC5mb3IoJ3JlYWN0LnBvcnRhbCcpO1xuZXhwb3J0IGNvbnN0IFJFQUNUX0ZSQUdNRU5UX1RZUEU6IHN5bWJvbCA9IFN5bWJvbC5mb3IoJ3JlYWN0LmZyYWdtZW50Jyk7XG5leHBvcnQgY29uc3QgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTogc3ltYm9sID0gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKTtcbmV4cG9ydCBjb25zdCBSRUFDVF9QUk9GSUxFUl9UWVBFOiBzeW1ib2wgPSBTeW1ib2wuZm9yKCdyZWFjdC5wcm9maWxlcicpO1xuZXhwb3J0IGNvbnN0IFJFQUNUX1BST1ZJREVSX1RZUEU6IHN5bWJvbCA9IFN5bWJvbC5mb3IoJ3JlYWN0LnByb3ZpZGVyJyk7IC8vIFRPRE86IERlbGV0ZSB3aXRoIGVuYWJsZVJlbmRlcmFibGVDb250ZXh0XG5leHBvcnQgY29uc3QgUkVBQ1RfQ09OU1VNRVJfVFlQRTogc3ltYm9sID0gU3ltYm9sLmZvcigncmVhY3QuY29uc3VtZXInKTtcbmV4cG9ydCBjb25zdCBSRUFDVF9DT05URVhUX1RZUEU6IHN5bWJvbCA9IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKTtcbmV4cG9ydCBjb25zdCBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOiBzeW1ib2wgPSBTeW1ib2wuZm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpO1xuZXhwb3J0IGNvbnN0IFJFQUNUX1NVU1BFTlNFX1RZUEU6IHN5bWJvbCA9IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlJyk7XG5leHBvcnQgY29uc3QgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFOiBzeW1ib2wgPSBTeW1ib2wuZm9yKFxuICAncmVhY3Quc3VzcGVuc2VfbGlzdCcsXG4pO1xuZXhwb3J0IGNvbnN0IFJFQUNUX01FTU9fVFlQRTogc3ltYm9sID0gU3ltYm9sLmZvcigncmVhY3QubWVtbycpO1xuZXhwb3J0IGNvbnN0IFJFQUNUX0xBWllfVFlQRTogc3ltYm9sID0gU3ltYm9sLmZvcigncmVhY3QubGF6eScpO1xuZXhwb3J0IGNvbnN0IFJFQUNUX1NDT1BFX1RZUEU6IHN5bWJvbCA9IFN5bWJvbC5mb3IoJ3JlYWN0LnNjb3BlJyk7XG5leHBvcnQgY29uc3QgUkVBQ1RfT0ZGU0NSRUVOX1RZUEU6IHN5bWJvbCA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm9mZnNjcmVlbicpO1xuZXhwb3J0IGNvbnN0IFJFQUNUX0xFR0FDWV9ISURERU5fVFlQRTogc3ltYm9sID0gU3ltYm9sLmZvcihcbiAgJ3JlYWN0LmxlZ2FjeV9oaWRkZW4nLFxuKTtcbmV4cG9ydCBjb25zdCBSRUFDVF9UUkFDSU5HX01BUktFUl9UWVBFOiBzeW1ib2wgPSBTeW1ib2wuZm9yKFxuICAncmVhY3QudHJhY2luZ19tYXJrZXInLFxuKTtcblxuZXhwb3J0IGNvbnN0IFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUw6IHN5bWJvbCA9IFN5bWJvbC5mb3IoXG4gICdyZWFjdC5tZW1vX2NhY2hlX3NlbnRpbmVsJyxcbik7XG5cbmV4cG9ydCBjb25zdCBSRUFDVF9QT1NUUE9ORV9UWVBFOiBzeW1ib2wgPSBTeW1ib2wuZm9yKCdyZWFjdC5wb3N0cG9uZScpO1xuXG5leHBvcnQgY29uc3QgUkVBQ1RfVklFV19UUkFOU0lUSU9OX1RZUEU6IHN5bWJvbCA9IFN5bWJvbC5mb3IoXG4gICdyZWFjdC52aWV3X3RyYW5zaXRpb24nLFxuKTtcblxuY29uc3QgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gU3ltYm9sLml0ZXJhdG9yO1xuY29uc3QgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGU6ID9hbnkpOiA/KCkgPT4gP0l0ZXJhdG9yPGFueT4ge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBtYXliZUl0ZXJhdG9yID1cbiAgICAoTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSkgfHxcbiAgICBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTtcbiAgaWYgKHR5cGVvZiBtYXliZUl0ZXJhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG1heWJlSXRlcmF0b3I7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBjb25zdCBBU1lOQ19JVEVSQVRPUiA9IFN5bWJvbC5hc3luY0l0ZXJhdG9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/ReactSymbols.js\n");

/***/ }),

/***/ "../shared/hasOwnProperty.js":
/*!***********************************!*\
  !*** ../shared/hasOwnProperty.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hasOwnProperty);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2hhc093blByb3BlcnR5LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7QUFTQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9zaGFyZWQvaGFzT3duUHJvcGVydHkuanM/YmJjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmV4cG9ydCBkZWZhdWx0IGhhc093blByb3BlcnR5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/hasOwnProperty.js\n");

/***/ }),

/***/ "../shared/isArray.js":
/*!****************************!*\
  !*** ../shared/isArray.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar isArrayImpl = Array.isArray;\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArray);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2lzQXJyYXkuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7OztBQVdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL1JlYWN0RGV2VG9vbHNCYWNrZW5kLy4uL3NoYXJlZC9pc0FycmF5LmpzP2Q5M2EiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuZGVjbGFyZSBmdW5jdGlvbiBpc0FycmF5KGE6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKEFycmF5LmlzQXJyYXkoYSkpO1xuXG5jb25zdCBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQXJyYXkoYTogbWl4ZWQpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzQXJyYXlJbXBsKGEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/isArray.js\n");

/***/ }),

/***/ "../shared/objectIs.js":
/*!*****************************!*\
  !*** ../shared/objectIs.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = // $FlowFixMe[method-unbinding]\ntypeof Object.is === 'function' ? Object.is : is;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (objectIs);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL29iamVjdElzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7O0FBU0E7Ozs7QUFJQTtBQUNBO0FBQUE7QUFHQTs7QUFFQTtBQUVBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdERldlRvb2xzQmFja2VuZC8uLi9zaGFyZWQvb2JqZWN0SXMuanM/ZDFjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4OiBhbnksIHk6IGFueSkge1xuICByZXR1cm4gKFxuICAgICh4ID09PSB5ICYmICh4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSkpIHx8ICh4ICE9PSB4ICYmIHkgIT09IHkpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICk7XG59XG5cbmNvbnN0IG9iamVjdElzOiAoeDogYW55LCB5OiBhbnkpID0+IGJvb2xlYW4gPVxuICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG4gIHR5cGVvZiBPYmplY3QuaXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuaXMgOiBpcztcblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0SXM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/objectIs.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/backend.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});